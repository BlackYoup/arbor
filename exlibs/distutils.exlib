# Copyright 2008 Ali Polatel
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'distutils.eclass' from Gentoo, which is:
#   Copyright 1999-2008 Gentoo Foundation

# The distutils eclass is designed to allow easier installation of
# distutils-based python modules and their incorporation into
# the Exherbo Linux system.
#
# It inherits python, multilib.

require python multilib

export_exlib_phases src_prepare src_compile src_install pkg_postinst pkg_postrm

# The distutils src_prepare function, this function is exported
distutils_src_prepare() {
    default

    # remove ez_setup stuff to prevent packages
    # from installing setuptools on their own
    rm -rf ez_setup*
    echo "def use_setuptools(*args, **kwargs): pass" > ez_setup.py
}

# The distutils src_compile function, this function is exported
distutils_src_compile() {
    python_version
    ${python} -B setup.py build "$@" || die "compilation failed"
}

# The distutils src_install function, this function is exported.
# It also installs the "standard docs" (CHANGELOG, Change*, KNOWN_BUGS, MAINTAINERS,
# PKG-INFO, CONTRIBUTORS, TODO, NEWS, MANIFEST*, README*, and AUTHORS)
distutils_src_install() {

    python_version
    # need this for python-2.5 + setuptools in cases where
    # a package uses distutils but does not install anything
    # in site-packages. (eg. dev-java/java-config-2.x)
    # - liquidx (14/08/2006)
    pylibdir="$(${python} -c 'from distutils.sysconfig import get_python_lib; print get_python_lib()')"
    [[ -n "${pylibdir}" ]] && dodir "${pylibdir}"

    ${python} -B setup.py install --root="${IMAGE}" --no-compile "$@" || die

    DDOCS="CHANGELOG KNOWN_BUGS MAINTAINERS PKG-INFO CONTRIBUTORS TODO NEWS"
    DDOCS="${DDOCS} Change* MANIFEST* README* AUTHORS"

    for doc in ${DDOCS}; do
        [[ -s "$doc" ]] && dodoc $doc
    done

    [[ -n "${DOCS}" ]] && dodoc ${DOCS}
}

# Generic pyc/pyo cleanup script. This function is exported.
distutils_pkg_postrm() {
    local moddir pylibdir pymod
    if [[ -z "${PYTHON_MODNAME}" ]]; then
        for pylibdir in "${ROOT}"/usr/$(get_libdir)/python*; do
            if [[ -d "${pylibdir}"/site-packages/${PN} ]]; then
                PYTHON_MODNAME=${PN}
            fi
        done
    fi

    ebegin "Performing Python Module Cleanup .."
    if [[ -n "${PYTHON_MODNAME}" ]]; then
        for pymod in ${PYTHON_MODNAME}; do
            for pylibdir in "${ROOT}"/usr/$(get_libdir)/python*; do
                if [[ -d "${pylibdir}"/site-packages/${pymod} ]]; then
                    python_mod_cleanup "${pylibdir#${ROOT}}"/site-packages/${pymod}
                fi
            done
        done
    else
        python_mod_cleanup
    fi
    eend 0
}

# This is a generic optimization, you should override it if your package
# installs things in another directory. This function is exported
distutils_pkg_postinst() {
    local pylibdir pymod
    if [[ -z "${PYTHON_MODNAME}" ]]; then
        for pylibdir in "${ROOT}"/usr/$(get_libdir)/python*; do
            if [[ -d "${pylibdir}"/site-packages/${PN} ]]; then
                PYTHON_MODNAME=${PN}
            fi
        done
    fi

    python_version
    for pymod in ${PYTHON_MODNAME}; do
        python_mod_optimize \
            $(python_get_sitedir)/${pymod}
    done
}

# Calls python_version, so that you can use something like
#  e.g. insinto /usr/include/python${PYVER}
distutils_python_version() {
    python_version
}

