# Copyright 2009 Saleem Abdulrasool <compnerd@compnerd.org>
# Copyright 2009 Bo Ã˜rsted Andresen <zlin@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

# multibuild_get_var $class $target $var
multibuild_get_var()
{
    local merged class=${1} target=${2} var=${3}

    merged=MULTIBUILD_${class}_${target}_MERGED_${var}
    echo "${!merged}"
}

# multibuild_get_all_var $class $var
multibuild_get_all_var() {
    local x target class=${1} var=${2}
    x=MULTIBUILD_${class}_TARGETS
    for target in ${!x}; do
        x=MULTIBUILD_${class}_${target}_MERGED_${var}
        echo "${!x}"
    done
}

# multibuild_load_build_target $class $target
multibuild_load_build_target()
{
    local class=${1}
    local target=${2}
    local x var merged

    # if profile and user vars have not been merged, merge them
    merged=MULTIBUILD_${class}_${target}_MERGED
    if [[ -z ${!merged} ]]; then
        for x in $(eval echo \${!MULTIBUILD_${class}_${target}_PROFILE_*} \
                             \${!MULTIBUILD_${class}_${target}_USER_*}); do
            var=${x#MULTIBUILD_${class}_${target}_@(PROFILE|USER)_}
            merged=MULTIBUILD_${class}_${target}_MERGED_${var}
            export ${merged}="${!merged:+${!merged} }${!x}"
        done
        export MULTIBUILD_${class}_${target}_MERGED=true
    fi

    # load _MERGED_ variables
    for merged in $(eval echo \${!MULTIBUILD_${class}_${target}_MERGED_*}); do
        export MULTIBUILD_${class}_${target}_CURRENT_${merged#MULTIBUILD_${class}_${target}_MERGED_}="${!merged}"
        export ${merged#MULTIBUILD_${class}_${target}_MERGED_}="${!merged}"
    done

    # enforce _LOCKED_ variables
    var=MULTIBUILD_${CLASS}_LOCKED_VARS
    for var in ${!var}; do
        x=MULTIBUILD_${class}_${target}_PROFILE_${var}
        [[ ${!var} == ${!x} ]] || eerror "someone attempted to set ${var}=${!var}, but it is locked to ${var}=${!x}"
        export ${var}="${!x}"
    done

    # set current target
    export MULTIBUILD_${class}_CURRENT_TARGET="${target}"
}

# multibuild_save_build_target $class
multibuild_save_build_target()
{
    local class=${1}
    local target=MULTIBUILD_${class}_CURRENT_TARGET
    target=${!target}
    local x var

    for x in $(eval echo \${!MULTIBUILD_${class}_${target}_CURRENT_*}); do
        var=${x#MULTIBUILD_${class}_${target}_CURRENT_}
        export MULTIBUILD_${class}_${target}_MERGED_${var}="${!var}"
    done
}

# multibuild_switch_build_target $class $target
multibuild_switch_build_target()
{
    multibuild_save_build_target "${@}"
    multibuild_load_build_target "${@}"
}

multibuild_load_default_targets() {
    local class target
    for class in ${MULTIBUILD_CLASSES}; do
        x=MULTIBUILD_${class}_DEFAULT_TARGET
        multibuild_load_build_target ${class} ${!x:-DEFAULT}
    done
}

multibuild_sanity_check_profile()
{
    local x var class target

    for class in ${MULTIBUILD_CLASSES} ; do
        x=MULTIBUILD_${class}_TARGETS
        for target in ${!x}; do
            x=MULTIBUILD_${class}_REQUIRED_VARS
            for var in ${!x}; do
                x=MULTIBUILD_${class}_${target}_PROFILE_${var}
                [[ -n ${!x} ]] || die "Invalid profile does not set ${x}"
            done
        done
    done

    x=MULTIBUILD_${class}_DEFAULT_TARGET
    [[ ${target} == ${!x} ]] || die "Invalid profile sets ${target} target last, should be ${!x}"
}

[[ ${EXHERES_PHASE} != metadata ]] && multibuild_sanity_check_profile && multibuild_load_default_targets

