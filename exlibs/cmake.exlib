# Copyright 2008 Bo Ã˜rsted Andresen <zlin@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'cmake-utils.eclass' from Gentoo, which is:
#     Copyright 1999-2007 Gentoo Foundation

# The cmake exlib contains functions that make creating ebuilds for
# cmake-based packages easy.
# Its main features are support of out-of-source builds as well as in-source
# builds and an implementation of the well-known option_enable and option_with
# functions for CMake.

myexparam -b out_of_source=true
myexparam cmake_minimum_version=2.6.4

DEPENDENCIES="
    build:
        sys-devel/cmake[>=$(exparam cmake_minimum_version)]"

export_exlib_phases src_configure src_compile src_test src_install

ECMAKE_BUILD_DIR="${WORKBASE}"/build
DEFAULT_SRC_TEST_PARAMS+=( ARGS="--verbose" )

# Used to enter the correct build dir and run a command in
# cmake_src_{compile,test,install}.
cmake_run() {
    illegal_in_global_scope

    local ret
    if [[ -d ${ECMAKE_BUILD_DIR} ]]; then
        edo pushd "${ECMAKE_BUILD_DIR}"
        ret=$?
    fi
    edo "${@}"
    if [[ -d ${ECMAKE_BUILD_DIR} ]]; then
        edo popd
    fi
    return ${ret}
}

# Similar to option_enable for cmake. A few examples:
#   `cmake_enable Foo`     -> foo ? -DENABLE_Foo=ON : -DENABLE_Foo=OFF
#   `cmake_enable FOO`     -> foo ? -DENABLE_FOO=ON : -DENABLE_FOO=OFF
#   `cmake_enable foo Bar` -> foo ? -DENABLE_Bar=ON : -DENABLE_Bar=OFF
#   `cmake_enable Foo Foo` -> Foo ? -DENABLE_Foo=ON : -DENABLE_Foo=OFF
cmake_build() {
    illegal_in_global_scope

    _cmake_option BUILD "$@"
}

cmake_enable() {
    illegal_in_global_scope

    _cmake_option ENABLE "$@"
}

# Similar to cmake_enable but using HAVE instead of ENABLE.
cmake_have() {
    illegal_in_global_scope

    _cmake_option HAVE "$@"
}

cmake_option() {
    illegal_in_global_scope

    _cmake_option '' "$@"
}

# Similar to cmake_enable but using WANT instead of ENABLE.
cmake_want() {
    illegal_in_global_scope

    _cmake_option WANT "$@"
}

# Similar to cmake_enable but using WITH instead of ENABLE.
cmake_with() {
    illegal_in_global_scope

    _cmake_option WITH "$@"
}

# Calls cmake with default arguments. If CMAKE_NO_COLOR is set it disables colours. If CMAKE_SILENT
# is set it generates silent makefiles instead of verbose. If you use CMAKE_SILENT you MUST unset it
# and rebuild before posting a build log.
# It also respects the following variables similarly to default_src_configure and econf:
#    CMAKE_SRC_CONFIGURE_PARAMS
#    CMAKE_SRC_CONFIGURE_OPTION_BUILDS
#    CMAKE_SRC_CONFIGURE_OPTION_ENABLES
#    CMAKE_SRC_CONFIGURE_OPTION_HAVES
#    CMAKE_SRC_CONFIGURE_OPTIONS
#    CMAKE_SRC_CONFIGURE_OPTION_WANTS
#    CMAKE_SRC_CONFIGURE_OPTION_WITHS
#    EXTRA_ECONF
# All arguments passed to ecmake are passed on to cmake right before $EXTRA_ECONF.
ecmake() {
    illegal_in_global_scope

    if exparam -b out_of_source; then
        edo mkdir -p "${ECMAKE_BUILD_DIR}" || return 1
        edo pushd "${ECMAKE_BUILD_DIR}" || return 1
    fi

    local cmakeargs

    # All default CMAKE_BUILD_TYPEs come with default CFLAGS, CXXFLAGS, which are *appended* to
    # CMAKE_C_FLAGS, CMAKE_CXX_FLAGS if a given build type is used. Thus they override users' settings,
    # and mustn't be used.
    cmakeargs=(
        ${CMAKE_NO_COLOR:--DCMAKE_COLOR_MAKEFILE:BOOL=TRUE}
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=TRUE
        ${CMAKE_SILENT:+-DCMAKE_VERBOSE_MAKEFILE:BOOL=FALSE}
        -DCMAKE_BUILD_TYPE:STRING='None'
        -DCMAKE_C_FLAGS:STRING="${CFLAGS}"
        -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS}"
        -DCMAKE_C_COMPILER:PATH="${CC}"
        -DCMAKE_CXX_COMPILER:PATH="${CXX}"
        -DCMAKE_INSTALL_PREFIX:PATH="${PREFIX:=/usr}"
        -DLIB_INSTALL_DIR:PATH="${PREFIX}/${LIBDIR}"
        -DLIB_SUFFIX:STRING=${LIBDIR/lib}
    )

    edo cmake "${cmakeargs[@]}" "$@" "${EXTRA_ECONF}" "${WORK}" || return 1

    if [[ -d ${ECMAKE_BUILD_DIR} ]]; then
        edo popd
    fi
}

# Function for configuring a package. Disable the out_of_source exparam to make this
# exlib perform the build in the sources. Otherwise it defaults to out-of-source.
cmake_src_configure() {
    illegal_in_global_scope

    ecmake \
        "${CMAKE_SRC_CONFIGURE_PARAMS[@]}" \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTION_BUILDS[@]}" ; do
            cmake_build ${s}
        done ) \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTION_ENABLES[@]}" ; do
            cmake_enable ${s}
        done ) \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTION_HAVES[@]}" ; do
            cmake_have ${s}
        done ) \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTIONS[@]}" ; do
            cmake_option ${s}
        done ) \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTION_WANTS[@]}" ; do
            cmake_want ${s}
        done ) \
        $(for s in "${CMAKE_SRC_CONFIGURE_OPTION_WITHS[@]}" ; do
            cmake_with ${s}
        done )
}

# Function for building the package. Automatically detects the correct build
# dir.  All arguments including CMAKE_SRC_COMPILE_PARAMS are passed to emake.
cmake_src_compile() {
    cmake_run emake "${CMAKE_SRC_COMPILE_PARAMS[@]}" "$@"
}

# Function for testing the package. Automatically detects the build dir. Uses
# default_src_test.
cmake_src_test() {
    cmake_run default_src_test
}

# Function for installing the package. Automatically detects the build dir.
# Uses default_src_install.
cmake_src_install() {
    cmake_run default_src_install
    # We run default_src_install from ${ECMAKE_BUILD_DIR}, so it doesn't look for docs in ${WORK}.
    [[ -d ${ECMAKE_BUILD_DIR} ]] && emagicdocs
}

### Functions below this are for internal use only.

# Used by cmake_enable, cmake_have, cmake_want and cmake_with.
_cmake_option() {
    illegal_in_global_scope

    [[ -n ${2} ]] || die "cmake_${1,,} <option flag> [<flag name>]"
    local flag
    if [[ -n ${3} ]]; then
        flag=${2}
    else
        flag=${2,,}
    fi
    echo "-D${1:+${1}_}${3:-$(optionfmt ${2})}:BOOL=$(option ${flag} && echo TRUE || echo FALSE)"
}

