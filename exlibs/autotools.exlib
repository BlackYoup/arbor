# Copyright 2008 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
#
# Based in part upon autotools.eclass which is:
#    Copyright 1999-2007 Gentoo Foundation
#    $Header: /var/cvsroot/gentoo-x86/eclass/autotools.eclass,v 1.65 2007/03/04 21:03:59 vapier Exp $
#
# This exlib is for handling autotooled software packages that
# need to regenerate their build scripts.

require versionator

export_exlib_phases src_prepare

DEPENDENCIES="build: sys-devel/libtool"

autotools_dependencies() {
    if [[ -n ${SUPPORTED_AUTOCONF[@]} ]]; then
        if [[ ${SUPPORTED_AUTOCONF[@]} == none ]]; then
            WANT_AUTOCONF=none
        else
            sorted_any_of_slot_dependencies \
                sys-devel/autoconf \
                "${SUPPORTED_AUTOCONF[@]}"
        fi
    else
        [[ ${WANT_AUTOCONF:-latest} == latest ]] && WANT_AUTOCONF="2.5"
        [[ ${WANT_AUTOCONF} != none ]] \
            && echo " sys-devel/autoconf:${WANT_AUTOCONF}"
    fi

    if [[ -n ${SUPPORTED_AUTOMAKE[@]} ]]; then
        if [[ ${SUPPORTED_AUTOMAKE[@]} == none ]]; then
            WANT_AUTOMAKE="none"
        else
            sorted_any_of_slot_dependencies \
                sys-devel/automake \
                "${SUPPORTED_AUTOMAKE[@]}"
        fi
    else
        [[ ${WANT_AUTOMAKE:-latest} == latest ]] && WANT_AUTOMAKE="1.10"
        [[ ${WANT_AUTOMAKE} != none ]] \
            && echo " sys-devel/automake:${WANT_AUTOMAKE}"
    fi
}

[[ -n ${WANT_AUTOCONF} ]] && AUTOCONF_DEPRECATED="${WANT_AUTOCONF}"
[[ -n ${WANT_AUTOMAKE} ]] && AUTOMAKE_DEPRECATED="${WANT_AUTOMAKE}"
DEPENDENCIES+="$(autotools_dependencies)"

autotools_select_versions() {
    local i sorted_slots=()
    if [[ -z ${WANT_AUTOCONF} && ${SUPPORTED_AUTOCONF[@]} != none ]]; then
        if [[ -n ${SUPPORTED_AUTOCONF[@]} ]]; then
            sorted_slots=( $(version_sort ${SUPPORTED_AUTOCONF[@]}) )
            for((i=${#sorted_slots[@]}-1; i>=0; --i)); do
                has_version sys-devel/autoconf:${sorted_slots[i]} \
                    && export WANT_AUTOCONF="${sorted_slots[i]}" \
                    && break
            done
            [[ -z ${WANT_AUTOCONF} ]] && die "No autoconf installed"
        else
            [[ ${WANT_AUTOCONF:-latest} == latest ]] \
                && export WANT_AUTOCONF="2.5" \
                && AUTOCONF_DEPRECATED="${WANT_AUTOCONF}"
        fi
    fi
    if [[ -z ${WANT_AUTOMAKE} && ${SUPPORTED_AUTOMAKE[@]} != none ]]; then
        if [[ -n ${SUPPORTED_AUTOMAKE[@]}  ]]; then
            sorted_slots=( $(version_sort ${SUPPORTED_AUTOMAKE[@]}) )
            for((i=${#sorted_slots[@]}-1; i>=0; --i)); do
                has_version sys-devel/automake:${sorted_slots[i]} \
                    && export WANT_AUTOMAKE="${sorted_slots[i]}" \
                    && break
            done
            [[ -z ${WANT_AUTOMAKE} ]] && die "No automake installed"
        else
            [[ ${WANT_AUTOMAKE:-latest} == latest ]] \
                && export WANT_AUTOMAKE="1.10" \
                && AUTOMAKE_DEPRECATED="${WANT_AUTOMAKE}"
        fi
    fi
    for i in AUTO{CONF,MAKE}_DEPRECATED; do
        if [[ -n ${!i} ]]; then
            ewarn "WANT_${i%_DEPRECATED} is deprecated. Please convert ${PN} to set SUPPORTED_${i%_DEPRECATED} instead."
            export ${i}=""
        fi
    done
}

# Variables:
#
#   AT_M4DIR          - Additional director(y|ies) aclocal should search
#   AM_OPTS           - Additional options to pass to automake during
#                       eautoreconf call.
#   AT_NOELIBTOOLIZE  - Don't run elibtoolize command if set to 'yes',
#                       useful when elibtoolize needs to be ran with
#                       particular options

# Functions:
#
#   eautoreconf()  - Should do a full autoreconf - normally what most people
#                    will be interested in.  Also should handle additional
#                    directories specified by AC_CONFIG_SUBDIRS.
#   eaclocal()     - Runs aclocal.  Respects AT_M4DIR for additional directories
#                    to search for macro's.
#   _elibtoolize() - Runs libtoolize.  Note the '_' prefix .. to not collide
#                    with elibtoolize() from libtool.eclass
#   eautoconf      - Runs autoconf.
#   eautoheader    - Runs autoheader.
#   eautomake      - Runs automake


# This function mimes the behavior of autoreconf, but uses the different
# eauto* functions to run the tools. It doesn't take any parameters.
eautoreconf() {
    autotools_select_versions
    local pwd=$(pwd) x auxdir

    if [[ -z ${AT_NO_RECURSIVE} ]]; then
        # Take care of subdirs
        for x in $(autotools_get_subdirs); do
            if [[ -d ${x} ]] ; then
                cd "${x}"
                eautoreconf
                cd "${pwd}"
            fi
        done
    fi

    auxdir=$(autotools_get_auxdir)

    echo "eautoreconf: running in ${PWD} ..."
    [[ -n ${auxdir} ]] && mkdir -p "${auxdir}"
    eaclocal
    _elibtoolize --copy --force
    eautoconf
    eautoheader
    FROM_EAUTORECONF="yes" eautomake ${AM_OPTS}
}

# These functions run the autotools using autotools_run_tool with the
# specified parametres. The name of the tool run is the same of the function
# without e prefix.
# They also force installing the support files for safety.
eaclocal() {
    autotools_select_versions
    local aclocal_opts

    if [[ -n ${AT_M4DIR} ]] ; then
        for x in ${AT_M4DIR} ; do
            case "${x}" in
            "-I")
                # We handle it below
                ;;
            *)
                [[ ! -d ${x} ]] && ewarn "eaclocal: '${x}' does not exist"
                aclocal_opts="${aclocal_opts} -I ${x}"
                ;;
            esac
        done
    fi

    [[ ! -f aclocal.m4 || -n $(grep -e 'generated.*by aclocal' aclocal.m4) ]] && \
        autotools_run_tool aclocal "$@" ${aclocal_opts}
}

_elibtoolize() {
    autotools_select_versions
    local opts lttest

    # Check if we should run libtoolize (AM_PROG_LIBTOOL is an older macro,
    # check for both AM_PROG_LIBTOOL and the current AC_PROG_LIBTOOL)
    lttest="$(autotools_check_macro "AC_PROG_LIBTOOL")$(autotools_check_macro "AM_PROG_LIBTOOL")"
    [[ -n ${lttest} ]] || return 0

    [[ -f Makefile.am ]] && opts="--automake"

    [[ "${USERLAND}" == "Darwin" ]] && LIBTOOLIZE="glibtoolize"
    autotools_run_tool ${LIBTOOLIZE:-libtoolize} "$@" ${opts}

    # Need to rerun aclocal
    eaclocal
}

eautoheader() {
    autotools_select_versions
    # Check if we should run autoheader
    [[ -n $(autotools_check_macro "AC_CONFIG_HEADERS") ]] || return 0
    NO_FAIL=1 autotools_run_tool autoheader "$@"
}

eautoconf() {
    autotools_select_versions
    if [[ ! -f configure.ac && ! -f configure.in ]] ; then
        echo
        eerror "No configure.{ac,in} present in ${PWD##*/}!"
        echo
        die "No configure.{ac,in} present in ${PWD##*/}!"
    fi

    autotools_run_tool autoconf "$@"
}

eautomake() {
    autotools_select_versions
    local extra_opts

    [[ -f Makefile.am ]] || return 0

    if [[ -z ${FROM_EAUTORECONF} && -f Makefile.in ]]; then
        local used_automake installed_automake

        installed_automake=$(automake --version | head -n 1 | \
            sed -e 's:.*(GNU automake) ::')
        used_automake=$(head -n 1 < Makefile.in | \
            sed -e 's:.*by automake \(.*\) from .*:\1:')

        if [[ ${installed_automake} != ${used_automake} ]]; then
            einfo "Automake used for the package (${used_automake}) differs from the installed version (${installed_automake})."
            eautoreconf
            return 0
        fi
    fi

    [[ -f INSTALL && -f AUTHORS && -f ChangeLog && -f NEWS ]] \
        || extra_opts="${extra_opts} --foreign"

    # --force-missing seems not to be recognized by some flavours of automake
    autotools_run_tool automake --add-missing --copy ${extra_opts} "$@"
}

# Internal function to run an autotools' tool
autotools_run_tool() {
    autotools_select_versions
    local ret=0

    echo "$@"
    "$@"
    ret=$?

    if [[ ${ret} != 0 && ${NO_FAIL} != 1 ]]; then
        eerror "Failed Running $1 !"
        die "Failed Running $1 !"
    fi
}

# Internal function to check for support
autotools_check_macro() {
    autotools_select_versions
    [[ -f configure.ac || -f configure.in ]] && \
        WANT_AUTOCONF="2.5" autoconf --trace=$1 2>/dev/null
    return 0
}

# Internal function to get additional subdirs to configure
autotools_get_subdirs() {
    autotools_select_versions
    local subdirs_scan_out

    subdirs_scan_out=$(autotools_check_macro "AC_CONFIG_SUBDIRS")
    [[ -n ${subdirs_scan_out} ]] || return 0

    echo "${subdirs_scan_out}" | gawk \
    '($0 !~ /^[[:space:]]*(#|dnl)/) {
        if (match($0, /AC_CONFIG_SUBDIRS:(.*)$/, res))
            print res[1]
    }' | uniq

    return 0
}

autotools_get_auxdir() {
    autotools_select_versions
    local auxdir_scan_out

    auxdir_scan_out=$(autotools_check_macro "AC_CONFIG_AUX_DIR")
    [[ -n ${auxdir_scan_out} ]] || return 0

    echo ${auxdir_scan_out} | gawk \
    '($0 !~ /^[[:space:]]*(#|dnl)/) {
        if (match($0, /AC_CONFIG_AUX_DIR:(.*)$/, res))
            print res[1]
    }' | uniq

    return 0
}

autotools_src_prepare() {
    default

    eautoreconf
}

