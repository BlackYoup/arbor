# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/eclass/versionator.eclass,v 1.13 2007/04/23 19:35:05 swegener Exp $
#
# Original Author: Ciaran McCreesh <ciaranm@gentoo.org>
#
# This eclass provides functions which simplify manipulating $PV and similar
# variables. Most functions default to working with $PV, although other
# values can be used.
#
# Simple Example 1: $PV is 1.2.3b, we want 1_2.3b:
#     MY_PV=$(replace_version_separator 1 '_' )
#
# Full list of user usable functions provided by this eclass (see the functions
# themselves for documentation):
#     replace_version_separator       index     newvalue   ver_str
#     replace_all_version_separators      newvalue  ver_str
#     delete_version_separator        index ver_str
#     delete_all_version_separators   ver_str
#     get_last_version_component_index    ver_str
#
# Rather than being a number, the index parameter can be a separator character
# such as '-', '.' or '_'. In this case, the first separator of this kind is
# selected.

get_all_version_components() {
    die "get_all_version_components sucks, use ever split_all"
}

get_version_components() {
    die "get_version_components sucks, use ever split"
}

get_major_version() {
    die "get_major_version sucks, use ever major"
}

get_version_component_range() {
    die "get_version_component_range sucks, use ever range"
}

get_after_major_version() {
    die "get_after_major_version sucks, use ever range 2-, or implement ever remainder"
}

# Replace the $1th separator with $2 in $3 (defaults to $PV if $3 is not
# supplied). If there are fewer than $1 separators, don't change anything.
#     1 '_' 1.2.3   -> 1_2.3
#     2 '_' 1.2.3   -> 1.2_3
#     1 '_' 1b-2.3  -> 1b_2.3
# Rather than being a number, $1 can be a separator character such as '-', '.'
# or '_'. In this case, the first separator of this kind is selected.
replace_version_separator() {
    local w i c found=0 v="${3:-${PV}}"
    w=${1:-1}
    c=( $(ever split_all ${v} ) )
    if [[ "${w//[[:digit:]]/}" == "${w}" ]] ; then
        # it's a character, not an index
        for (( i = 0 ; i < ${#c[@]} ; i = $i + 1 )) ; do
            if [[ "${c[${i}]}" == "${w}" ]] ; then
                c[${i}]="${2}"
                break
            fi
        done
    else
        for (( i = 0 ; i < ${#c[@]} ; i = $i + 1 )) ; do
            if [[ -n "${c[${i}]//[^-._]}" ]] ; then
                found=$(($found + 1))
                if [[ "$found" == "${w}" ]] ; then
                    c[${i}]="${2}"
                    break
                fi
            fi
        done
    fi
    c=${c[@]}
    echo ${c// }
}

# Replace all version separators in $2 (defaults to $PV) with $1.
#     '_' 1b.2.3    -> 1b_2_3
replace_all_version_separators() {
    local c
    c=( $(ever split_all "${2:-${PV}}" ) )
    c="${c[@]//[-._]/$1}"
    echo ${c// }
}

# Delete the $1th separator in $2 (defaults to $PV if $2 is not supplied). If
# there are fewer than $1 separators, don't change anything.
#     1 1.2.3       -> 12.3
#     2 1.2.3       -> 1.23
#     1 1b-2.3      -> 1b2.3
# Rather than being a number, $1 can be a separator character such as '-', '.'
# or '_'. In this case, the first separator of this kind is deleted.
delete_version_separator() {
    replace_version_separator "${1}" "" "${2}"
}

# Delete all version separators in $1 (defaults to $PV).
#     1b.2.3        -> 1b23
delete_all_version_separators() {
    replace_all_version_separators "" "${1}"
}

get_version_component_count() {
    die "get_version_component_count sucks, add it to ever if you need it, or count the number of words returned by ever split"
}

# What is the index of the last version component in $1 (defaults to $PV)?
#     1.0.1   ->  3
#     3.0c-r1     ->  4
#
get_last_version_component_index() {
    local a
    a=( $(ever split "${1:-${PV}}" ) )
    echo $(( ${#a[@]} - 1 ))
}

version_is_at_least() {
    die "version_is_at_least sucks, use ever at_least"
}

version_compare() {
    die "version_compare sucks, use ever at_least"
}

# Returns its parameters sorted, highest version last. We're using a quadratic
# algorithm for simplicity, so don't call it with more than a few dozen items.
version_sort() {
    local left=0 idx lowest_idx tmp items=()
    items=( $@ )
    while (( ${left} < ${#items[@]} )); do
        lowest_idx=${left}
        (( idx = lowest_idx + 1 ))
        while (( ${idx} < ${#items[@]} )); do
            ever at_least "${items[idx]}" "${items[lowest_idx]}" && lowest_idx=${idx}
            (( idx += 1 ))
        done
        tmp=${items[lowest_idx]}
        items[lowest_idx]=${items[left]}
        items[left]=${tmp}
        (( left+=1 ))
    done
    echo ${items[@]}
}

# First argument is a catogory/pn. The remaining arguments are slots. Sorts the
# slots and outputs " || ( cpn:slot1 cpn:slot2 cpn:slot3 ) " etc, where slot1 is
# highest. If there is only one slot it merely outputs " cpn:slot ".
sorted_any_of_slot_dependencies() {
    local i sorted_slots cpn=${1}
    shift
    (( ${#} > 1 )) && echo -n " || ( "
    sorted_slots=( $(version_sort ${@}) )
    for((i=${#sorted_slots[@]}-1; i>=0; --i)); do
        echo -n " ${cpn}:${sorted_slots[i]} "
    done
    (( ${#} > 1 )) && echo -n ") "
}

