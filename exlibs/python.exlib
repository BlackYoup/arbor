# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/eclass/python.eclass,v 1.32 2007/05/06 22:11:12 kloeri Exp $
#
# Author: Alastair Tse <liquidx@gentoo.org>
#
# A Utility Eclass that should be inherited by anything that deals with
# Python or Python modules.
#
# - Features:
# python_get_abi()        - returns the current python abi
# python_mod_cleanup()    - Goes through /usr/lib*/python* to remove
#               orphaned *.pyc *.pyo

require multilib

myexparam python_dep=

myexparam -b has_lib=true
myexparam -b has_bin=false

if exparam -b has_bin; then
    [[ -n $(exparam python_dep) ]] && DEPENDENCIES+="
    build+run:
        dev-lang/python:*[>=$(exparam python_dep)]
"
elif exparam -b has_lib; then
    [[ -n $(exparam python_dep) ]] && DEPENDENCIES+="
    build+run:
        dev-lang/python:=[>=$(exparam python_dep)]
"
fi

export PYTHON="/usr/bin/python"

#
# name:   python_disable/enable_pyc
# desc:   tells python not to automatically recompile modules to .pyc/.pyo
#     even if the timestamps/version stamps don't match. this is
#     done to protect sandbox.
#
# note:   supported by dev-lang/python[>=2.6] only.
#
python_disable_pyc() {
    illegal_in_global_scope

    export PYTHONDONTWRITEBYTECODE=1
}

python_enable_pyc() {
    illegal_in_global_scope

    unset PYTHONDONTWRITEBYTECODE
}

python_get_abi() {
    illegal_in_global_scope

    local python_abi

    python_abi=$(${PYTHON} -V 2>&1)
    python_abi=${python_abi#Python }
    python_abi=$(ever range 1-2 ${python_abi})

    echo -n "${python_abi}"
}

# Run without arguments, returns the python library directory.
python_get_libdir() {
    illegal_in_global_scope

    echo -n "/usr/$(get_libdir)/python$(python_get_abi)"
}

# Run without arguments, returns the python site-packages directory.
python_get_sitedir() {
    illegal_in_global_scope

    echo -n "$(python_get_libdir)/site-packages"
}

# Byte-compiles all .py files in ${IMAGE}$(python_get_libdir). Changing the mtime of a .py file
# invalidates the byte-compiled versions. python_bytecompile() should thus be run at the end of
# src_install(). Both .pyc & .pyo (optimized & byte-compiled) files are generated.
python_bytecompile() {
    illegal_in_global_scope

    [[ ${EXHERES_PHASE} != install ]] && die "${FUNCNAME} should only be run in src_install()"

    [[ -n ${@} ]] && die "${FUNCNAME} takes no arguments"

    edo python$(python_get_abi)    -mcompileall -f -q -d $(python_get_libdir) "${IMAGE}$(python_get_libdir)"
    edo python$(python_get_abi) -O -mcompileall -f -q -d $(python_get_libdir) "${IMAGE}$(python_get_libdir)"
}

#
# name:   python_mod_cleanup
# desc:   run with optional arguments, where arguments are directories of
#     python modules. if none given, it will look in /usr/lib/python[0-9].[0-9]
#
#     it will recursively scan all compiled python modules in the directories
#     and determine if they are orphaned (eg. their corresponding .py is missing.)
#     if they are, then it will remove their corresponding .pyc and .pyo
#
python_mod_cleanup() {
    illegal_in_global_scope

    local SEARCH_PATH=() myroot src_py

    # Check if phase is pkg_postrm()
    [[ ${EXHERES_PHASE} != postrm ]] &&\
        die "${FUNCNAME} should only be run in pkg_postrm()"

    # strip trailing slash
    myroot="${ROOT%/}"

    if (($#)); then
        SEARCH_PATH=("${@#/}")
        SEARCH_PATH=("${SEARCH_PATH[@]/#/$myroot/}")
    else
        SEARCH_PATH=("${myroot}"/usr/lib*/python*/site-packages)
    fi

    for path in "${SEARCH_PATH[@]}"; do
        einfo "Cleaning orphaned Python bytecode from ${path} ..."
        while read -rd ''; do
            src_py="${REPLY%[co]}"
            [[ -f "${src_py}" ]] && continue
            einfo "Purging ${src_py}[co]"
            rm -f "${src_py}"[co]
        done < <(find "${path}" -name '*.py[co]' -print0)

        # attempt to remove directories that maybe empty
        while read -r dir; do
            rmdir "${dir}" 2>/dev/null
        done < <(find "${path}" -type d | sort -r)
    done
}

