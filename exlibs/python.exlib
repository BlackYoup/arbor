# Copyright 2009 Ingmar Vanhassel
# Distributed under the terms of the GNU General Public License v2

# Based in part upon 'python.eclass' v1.32 from Gentoo, which is:
#   Copyright 1999-2004 Gentoo Foundation

myexparam python_dep=

myexparam -b has_lib=true
myexparam -b has_bin=false

PYTHON_EXLIB_API=2

if [[ -n $(exparam python_dep) ]]; then
    exparam -v PYTHON_DEP python_dep
    if ([ "${PYTHON_DEP:0:1}" != '[' ] && [ "${PYTHON_DEP:0:1}" != '' ]); then
        PYTHON_EXLIB_API=1
    fi
else
    # if not bin nor lib, we don't have a dependency and everything should work
    if exparam -b has_lib || exparam -b has_bin; then
        PYTHON_EXLIB_API=1
    fi
fi

case ${PYTHON_EXLIB_API} in
    1)
        if exparam -b has_bin; then
            [[ -n $(exparam python_dep) ]] && DEPENDENCIES+="
            build+run:
                dev-lang/python:*[>=$(exparam python_dep)]
        "
        elif exparam -b has_lib; then
            [[ -n $(exparam python_dep) ]] && DEPENDENCIES+="
            build+run:
                dev-lang/python:=[>=$(exparam python_dep)]
        "
        fi

        export PYTHON="/usr/$(exhost --build)/bin/python"


        # Tells python not to automatically recompile modules to .pyc/.pyo even if the timestamps/version
        # stamps don't match. this is done to protect sandbox.
        #
        # NOTE: Supported by dev-lang/python[>=2.6] only.
        python_disable_pyc() {
            illegal_in_global_scope

            export PYTHONDONTWRITEBYTECODE=1
        }

        python_enable_pyc() {
            illegal_in_global_scope

            unset PYTHONDONTWRITEBYTECODE
        }

        # Returns the current python abi
        python_get_abi() {
            illegal_in_global_scope

            local python_abi

            # TODO(moben) this assumes that python == python2
            # hopefully we have migrated everything to API=2 of this exlib until that changes
            python_abi=$(eclectic python2-$(exhost --target) show)

            echo -n "${python_abi}"
        }

        # Run without arguments, returns the python include directory.
        python_get_incdir() {
            illegal_in_global_scope

            echo -n "/usr/$(exhost --target)/include/python$(python_get_abi)"
        }

        # Run without arguments, returns the python library directory.
        python_get_libdir() {
            illegal_in_global_scope

            echo -n "/usr/$(exhost --target)/lib/python$(python_get_abi)"
        }

        # Run without arguments, returns the python site-packages directory.
        python_get_sitedir() {
            illegal_in_global_scope

            echo -n "$(python_get_libdir)/site-packages"
        }

        # Byte-compiles all .py files in ${IMAGE}$(python_get_libdir). Changing the mtime of a .py file
        # invalidates the byte-compiled versions. python_bytecompile() should thus be run at the end of
        # src_install(). Both .pyc & .pyo (optimized & byte-compiled) files are generated.
        python_bytecompile() {
            illegal_in_global_scope

            [[ ${EXHERES_PHASE} != install ]] && die "${FUNCNAME} should only be run in src_install()"

            [[ -n ${@} ]] && die "${FUNCNAME} takes no arguments"

            edo find "${IMAGE}$(python_get_libdir)" -type f -name '*.py' -exec touch {} +

            local excludes=()
            [[ -n "${PYTHON_BYTECOMPILE_EXCLUDES[@]}" ]] && \
                excludes=( -x "$(IFS='|' ; echo "${PYTHON_BYTECOMPILE_EXCLUDES[*]}")" )

            edo python$(python_get_abi)    -mcompileall -f -q -d $(python_get_libdir) "${excludes[@]}" "${IMAGE}$(python_get_libdir)"
            edo python$(python_get_abi) -O -mcompileall -f -q -d $(python_get_libdir) "${excludes[@]}" "${IMAGE}$(python_get_libdir)"
        }
        ;;
    2)
        myexparam python_sup="2.6 2.7 3.1 3.2 3.3" # supported python majors

        myexparam -b has_lib=true
        myexparam -b has_bin=false
        myexparam -b multibuild=true
        myexparam -b with_opt=false

        if exparam -b with_opt; then
            myexparam option_name=python
            exparam -v OPTION_NAME option_name
        fi

        # set dependencies ( eg python_abis:2.6? ( dev-lang/python:2.6[>=0] ) )
        python_dependencies() {
            for so in $(exparam python_sup); do
                echo "python_abis:${so}? ( dev-lang/python:${so}${PYTHON_DEP} )"
            done
        }

        if exparam -b with_opt; then
            MYOPTIONS="${OPTION_NAME}"
        fi

        if exparam -b has_lib; then
            # NOTE: currently it's only possible to use classes C or PYTHON_ABIS
            if exparam -b multibuild; then
                myexparam -b multiunpack=false
                exparam -b multiunpack && myexparam work=${PNV} && exparam -v PYTHON_WORK work

                exparam -v PYTHON_MULTIUNPACK multiunpack

                require easy-multibuild [ classes=[ PYTHON_ABIS ] \
                                          multiunpack=${PYTHON_MULTIUNPACK} $(exparam -b multiunpack && echo "work=${PYTHON_WORK}") ]
            fi
            exparam -v MULTIBUILD_PYTHON_ABIS_TARGETS python_sup

            # starting construction of MYOPTIONS
            MYOPTIONS+=' ('
            exparam -b with_opt && MYOPTIONS+=" ${OPTION_NAME}?"
            # define python subotions with description, requires and number_select
            MYOPTIONS+=" ( python_abis: ( $(exparam python_sup) ) [["
            # set the maximum of enabled python_abis:*
            exparam -b multibuild && MYOPTIONS+=' number-selected = at-least-one' || MYOPTIONS+=' number-selected = exactly-one'
            MYOPTIONS+=' ]] )'
            # finish construction of MYOPTIONS
            MYOPTIONS+=" )"
            DEPENDENCIES+="build+run: ("
            exparam -b with_opt && DEPENDENCIES+=" ${OPTION_NAME}?"
            DEPENDENCIES+=" ( $(python_dependencies) ) )"

            # set python version which we will build against, we need that until easy-multibuild is fixed
            # PYTHON_ABIS is set via the suboption
            if exparam -b multibuild; then
                export_exlib_phases src_configure src_compile src_test src_install

                python_run_phase() {
                    if exparam -b with_opt; then
                        if [[ $(type -t "easy-multibuild_src_${EXHERES_PHASE}") == function ]]; then
                            option "${OPTION_NAME}" && easy-multibuild_src_${EXHERES_PHASE}
                        else
                            default
                        fi
                    else
                        easy-multibuild_src_${EXHERES_PHASE}
                    fi
                }

                python_src_configure() {
                    python_run_phase
                }

                python_src_compile() {
                    python_run_phase
                }

                python_src_test() {
                    python_run_phase
                }

                python_src_install() {
                    python_run_phase
                }
            else
                export PYTHON="/usr/$(exhost --build)/bin/python${PYTHON_ABIS}"
            fi
        else
            if exparam -b has_bin; then
                DEPENDENCIES+="
                    build+run:
                        ( $(exparam -b with_opt && echo "${OPTION_NAME}?") ( dev-lang/python:*${PYTHON_DEP} ) )
                "
            fi
            export PYTHON="/usr/$(exhost --build)/bin/python"
        fi

        # Tells python not to automatically recompile modules to .pyc/.pyo even if the timestamps/version
        # stamps don't match. this is done to protect sandbox.
        #
        # NOTE: Supported by dev-lang/python[>=2.6] only.
        python_disable_pyc() {
            illegal_in_global_scope

            export PYTHONDONTWRITEBYTECODE=1
        }

        python_enable_pyc() {
            illegal_in_global_scope

            unset PYTHONDONTWRITEBYTECODE
        }

        # Returns the current python abi
        python_get_abi() {
            illegal_in_global_scope

            if exparam -b multibuild; then
                echo -n "${MULTIBUILD_PYTHON_ABIS_CURRENT_TARGET}"
            else
                echo -n "${PYTHON_ABIS}"
            fi
        }

        # Run without arguments, returns the python include directory.
        python_get_incdir() {
            illegal_in_global_scope

            echo -n "/usr/$(exhost --target)/include/python$(python_get_abi)"
        }

        # Run without arguments, returns the python library directory.
        python_get_libdir() {
            illegal_in_global_scope

            echo -n "/usr/$(exhost --target)/lib/python$(python_get_abi)"
        }

        # Run without arguments, returns the python site-packages directory.
        python_get_sitedir() {
            illegal_in_global_scope

            echo -n "$(python_get_libdir)/site-packages"
        }

        # Byte-compiles all .py files in ${IMAGE}$(python_get_libdir). Changing the mtime of a .py file
        # invalidates the byte-compiled versions. python_bytecompile() should thus be run at the end of
        # src_install(). Both .pyc & .pyo (optimized & byte-compiled) files are generated.
        python_bytecompile() {
            illegal_in_global_scope

            [[ ${EXHERES_PHASE} != install ]] && die "${FUNCNAME} should only be run in src_install()"

            [[ -n ${@} ]] && die "${FUNCNAME} takes no arguments"

            edo find "${IMAGE}$(python_get_libdir)" -type f -name '*.py' -exec touch {} +

            local excludes=()
            [[ -n "${PYTHON_BYTECOMPILE_EXCLUDES[@]}" ]] && \
                excludes=( -x "$(IFS='|' ; echo "${PYTHON_BYTECOMPILE_EXCLUDES[*]}")" )

            edo python$(python_get_abi)    -mcompileall -f -q -d $(python_get_libdir) "${excludes[@]}" "${IMAGE}$(python_get_libdir)"
            edo python$(python_get_abi) -O -mcompileall -f -q -d $(python_get_libdir) "${excludes[@]}" "${IMAGE}$(python_get_libdir)"
        }
        ;;
    *)
        die "Detecting python exlib api went wrong"
        ;;
esac
