# Copyright 2008 David Leverton <dleverton@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

scm-svn_do_dependencies() {
    if [[ $(scm_get_var REPOSITORY) == https://* ]]; then
        echo ">=dev-scm/subversion-1.5.0_alpha1[ssl]"
    else
        echo ">=dev-scm/subversion-1.5.0_alpha1"
    fi
}

scm-svn_do_check_vars() {
    [[ -n $(scm_get_var SVN_RAW_URI) ]] \
        && [[ -n $(scm_get_var BRANCH) || -n $(scm_get_var TAG) ||
                  -n $(scm_get_var SUBPATH) ]] \
        && die "$(scm_var_name SVN_RAW_URI) must not be set at the same time as $(scm_var_name BRANCH) or $(scm_var_name TAG) or $(scm_var_name SUBPATH)"
    [[ -n $(scm_get_var BRANCH) && -n $(scm_get_var TAG) ]] \
        && die "for svn, $(scm_var_name TAG) must not be set at the same time as $(scm_var_name BRANCH)"
    [[ -n $(scm_get_var REVISION) ]] && \
        [[ "$(scm_get_var REVISION)" == *[^[:digit:]]* || "$(scm_get_var REVISION)" -eq 0 ]] \
        && die "for svn, $(scm_var_name REVISION) must be a positive integer"
}

scm-svn_uri() {
    if [[ -n $(scm_get_var SVN_RAW_URI) ]]; then
        scm_get_var REPOSITORY
        return
    fi

    local uri="$(scm_get_var REPOSITORY)"
    uri="${uri%%*(/)}"
    if [[ -n $(scm_get_var TAG) ]]; then
        uri+="/tags/$(scm_get_var TAG)"
    elif [[ -n $(scm_get_var BRANCH) ]]; then
        uri+="/branches/$(scm_get_var BRANCH)"
    else
        uri+="/trunk"
    fi

    local subpath="$(scm_get_var SUBPATH)"
    subpath=${subpath##*(/)}
    subpath=${subpath%%*(/)}
    [[ -n ${subpath} ]] && uri+="/${subpath}"

    echo "${uri}"
}

scm-svn_svn() {
    if [[ ${1} == -q ]]; then
        shift
    else
        echo svn "${@}" >&2
    fi
    svn "${@}" || die "svn ${1} failed"
}

scm-svn_info() {
    local what="${2:-$(scm_get_var CHECKOUT_TO)}"
    local info="$(scm-svn_svn -q info "${what}" | sed -ne "s/^${1}: //p")"
    [[ -n ${info} ]] || die "could not determine ${1} for ${what}"
    echo "${info}"
}

scm-svn_do_appraise() {
    local dir="$(scm_get_var CHECKOUT_TO)"

    if [[ ! -d ${dir}/.svn ]]; then
        die "${dir} is not a svn checkout"
    fi

    if [[ "$(scm-svn_info URL)" != "$(scm-svn_uri)" ]]; then
        echo "${dir} is a checkout of $(scm-svn_info URL), but wanted $(scm-svn_uri)"

        return 1
    fi

    if [[ -n $(scm_get_var REVISION) ]]; then
        if [[ $(scm_get_var REVISION) -eq $(scm-svn_do_revision) ]]; then
            return 2
        else
            echo "${dir} is a checkout of revision $(scm-svn_do_revision), but wanted $(scm_get_var REVISION)"
            return 1
        fi
    fi

    if [[ -n $(scm_get_var TAG) && -z $(scm_get_var SVN_SLOPPY_TAG) ]]; then
        return 2
    else
        return 0
    fi
}

scm-svn_do_checkout() {
    local rev=$(scm_get_var REVISION)
    scm-svn_svn checkout --ignore-externals ${rev:+-r${rev}} "$(scm-svn_uri)" "$(scm_get_var CHECKOUT_TO)"
}

scm-svn_do_update() {
    if [[ "$(scm-svn_uri)" != "$(scm-svn_info URL)" ]]; then
        local oldroot="$(scm-svn_info "Repository Root")"
        local newroot="$(scm-svn_info "Repository Root" "$(scm-svn_uri)")"
        [[ ${newroot} != ${oldroot} ]] && scm-svn_svn switch --relocate "${oldroot}" "${newroot}" "$(scm_get_var CHECKOUT_TO)"
    fi

    local rev=$(scm_get_var REVISION)
    if [[ "$(scm-svn_uri)" != "$(scm-svn_info URL)" ]]; then
        scm-svn_svn switch --ignore-externals ${rev:+-r${rev}} "$(scm-svn_uri)" "$(scm_get_var CHECKOUT_TO)"
    else
        scm-svn_svn update --ignore-externals ${rev:+-r${rev}} "$(scm_get_var CHECKOUT_TO)"
    fi
}

scm-svn_do_revision() {
    scm-svn_info "Last Changed Rev"
}

scm-svn_do_unpack() {
    scm-svn_svn export --ignore-externals "$(scm_get_var CHECKOUT_TO)" "$(scm_get_var UNPACK_TO)"
}

