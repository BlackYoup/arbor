# Copyright 2009 Saleem Abdulrasool <compnerd@compnerd.org>
# Copyright 2009 Bo Ã˜rsted Andresen <zlin@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

# multibuild_get_all_var $class $var
multibuild_get_all_var() {
    local x target class=${1} var=${2}
    x=MULTIBUILD_${class}_TARGETS
    for target in ${!x}; do
        x=MULTIBUILD_${class}_${target}_MERGED_${var}
        echo "${!x}"
    done
}

# multibuild_get_var $class $target $var
multibuild_get_var()
{
    local x class=${1} target=${2} var=${3}

    x=MULTIBUILD_${class}_${target}_MERGED_${var}
    echo "${!x}"
}

# multibuild_save_build_target $class
multibuild_save_build_target()
{
    local class=${1}
    local target=MULTIBUILD_${class}_CURRENT_TARGET
    target=${!target}
    local x var

    for x in $(eval echo \${!MULTIBUILD_${class}_${target}_CURRENT_*}); do
        var=${x#MULTIBUILD_${class}_${target}_CURRENT_}
        export MULTIBUILD_${class}_${target}_MERGED_${var}="${!var}"
    done
}

# multibuild_load_build_target $class $target
multibuild_load_build_target()
{
    local class=${1}
    local target=${2}
    local x var merged

    # if profile and user vars have not been merged, merge them
    x=MULTIBUILD_${class}_${target}_MERGED
    if [[ -z ${!x} ]]; then
        for x in $(eval echo \${!MULTIBUILD_${class}_${target}_PROFILE_*} \
                             \${!MULTIBUILD_${class}_${target}_USER_*}); do
            var=${x#MULTIBUILD_${class}_${target}_@(PROFILE|USER)_}
            merged=MULTIBUILD_${class}_${target}_MERGED_${var}
            export ${merged}="${!merged:+${!merged} }${!x}"
        done
        export MULTIBUILD_${class}_${target}_MERGED=true
    fi

    # load merged vars
    for x in $(eval echo \${!MULTIBUILD_${class}_${target}_MERGED_*}); do
        export MULTIBUILD_${class}_${target}_CURRENT_${x#MULTIBUILD_${class}_${target}_MERGED_}="${!x}"
        export ${x#MULTIBUILD_${class}_${target}_MERGED_}="${!x}"
    done

    # enforce locked vars
    for x in $(eval echo \${MULTIBUILD_${class}_LOCKED_VARS}) ; do
        var=MULTIBUILD_${class}_${target}_PROFILE_${x}
        [[ ${!x} == ${!var} ]] || eerror "${x} was changed to ${!x}, should remain ${!var}"
        export ${var}="${!x}"
    done

    # set current target
    export MULTIBUILD_${class}_CURRENT_TARGET="${target}"
}

# multibuild_switch_build_target $class $target
multibuild_switch_build_target()
{
    multibuild_save_build_target "${@}"
    multibuild_load_build_target "${@}"
}

multibuild_load_default_targets() {
    local class target
    for class in ${MULTIBUILD_CLASSES}; do
        x=MULTIBUILD_${class}_DEFAULT_TARGET
        multibuild_load_build_target ${class} ${!x:-DEFAULT}
    done
}

multibuild_sanity_check_profile()
{
    local x var class target

    for class in ${MULTIBUILD_CLASSES} ; do
        x=MULTIBUILD_${class}_TARGETS
        for target in ${!x}; do
            x=MULTIBUILD_${class}_REQUIRED_VARS
            for var in ${!x}; do
                x=MULTIBUILD_${class}_${target}_PROFILE_${var}
                [[ -n ${!x} ]] || die "Invalid profile does not set ${x}"
            done
        done
    done

    x=MULTIBUILD_${class}_DEFAULT_TARGET
    [[ ${target} == ${!x} ]] || die "Invalid profile sets ${target} target last, should be ${!x}"
}

[[ ${EXHERES_PHASE} == metadata ]] || multibuild_sanity_check_profile

get_libdir()
{
    ewarn "get_libdir is deprecated"
    echo "${LIBDIR}"
}

get_all_libdirs()
{
    ewarn "get_all_libdirs is deprecated"

    local target libdir
    for target in ${MULTIBUILD_C_TARGETS} ; do
        # libdir is a locked var, no need to use get_build_var
        libdir=MULTIBUILD_C_${target}_PROFILE_LIBDIR
        echo ${!libdir}
    done
}

[[ ${EXHERES_PHASE} == metadata ]] || multibuild_load_default_targets

