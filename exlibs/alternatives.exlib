# Copyright 2008 Bo Ã˜rsted Andresen
# Copyright 2008 Mike Kelly
# Distributed under the terms of the GNU General Public License v2

# To use this exlib, you need to set the ALTERNATIVES_PROVIDED array in
# global scope. For example, ALTERNATIVES_PROVIDED=( "perl:5.8" ), where
# perl is the alternative being provided, and 5.8 is the provider name.
# If your package provides pkg_postinst or pkg_postrm phases, you also
# need to be sure you explicitly run alternatives_pkg_{postinst,postrm}
# where appropriate.

ALTERNATIVES_DIR="/etc/env.d/alternatives"

DEPENDENCIES="
    build+run:
        app-admin/eclectic"

# alternatives_for alternative provider unique source target [ unique source target [...]]
alternatives_for() {
    (( $# >= 5 )) && (( ($#-2)%3 == 0)) || die "${FUNCNAME} requires exactly 2+N*3 arguments where N>0"
    local x dupl alternative=${1} provider=${2} unique src target ret=0
    shift 2

    has "${alternative}:${provider}" "${ALTERNATIVES_PROVIDED[@]}" || \
        ALTERNATIVES_PROVIDED+=( "${alternative}:${provider}" )

    [[ -d "${IMAGE}${ALTERNATIVES_DIR}/${alternative}" ]] || dodir "${ALTERNATIVES_DIR}/${alternative}"

    while (( $# >= 3 )); do
        # unique is used in bash variable names and hence can only contain alphanumeric characters and _
        # handle dash, dot, plus and slash because they are so common in paths
        unique=${1}; src=${2}; target=${3}
        unique=${unique//-/_dash_}
        unique=${unique//./_dot_}
        unique=${unique//+/_plus_}
        unique=${unique//\//_slash_}
        if [[ ${unique} != *([[:alnum:]_]) ]]; then
            eerror "Illegal unique='${unique}', only alphanumeric characters and _ are legal"
            ((ret++))
        fi
        echo "PATH_${unique}='${src}'"
        echo "TARGET_${unique}='${target}'"
        shift 3
    done >> "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}"

    # sanity check for unique identifiers
    dupl=$(while read line; do echo ${line%%=*}; done < \
        "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}" | sort | uniq -d)
    if [[ -n ${dupl} ]]; then
        dupl=$(echo "${dupl}" | sed -e 's/^PATH_//' -e 's/^TARGET_//' | sort | uniq)
        die "Duplicate unique identifiers detected: '"${dupl}"'"
    fi
    [[ ${ret} -eq 0 ]] || die "Illegal uniques detected"
}

export_exlib_phases pkg_postinst pkg_postrm

alternatives_pkg_postinst() {
    local a alt provider module_version="20080924"
    for a in "${ALTERNATIVES_PROVIDED[@]}"; do
        alt="${a%:*}"
        provider="${a#*:}"
        read_ver() { (. "${1}" &>/dev/null; echo "${VERSION}" ); }
        [[ -f "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic" \
            && "$(read_ver "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic")" \
                -eq "${module_version}" ]] \
            && continue
        einfo "Creating alternatives module for ${alt}"
        cat > "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic" << EOF
# This module was automatically generated by alternatives.exlib
DESCRIPTION="Alternatives for ${alt}"
VERSION="${module_version}"
MAINTAINER="eclectic@exherbo.org"

ALTERNATIVE="${alt}"

inherit alternatives
EOF
        echo eclectic "${alt}" update "${provider}"
        eclectic "${alt}" update "${provider}"
    done
}

alternatives_pkg_postrm() {
    local a alt provider
    for a in "${ALTERNATIVES_PROVIDED[@]}"; do
        alt="${a%:*}"
        provider="${a#*:}"
        if [[ -d "${ROOT}${ALTERNATIVES_DIR}/${alt}" ]]; then
            einfo "Making sure ${alt} has a valid provider"
            echo eclectic "${alt}" update "${provider}"
            eclectic "${alt}" update "${provider}"
            continue
        fi
        einfo "Cleaning up unused alternatives module for ${alt}"
        echo eclectic "${alt}" unset
        eclectic "${alt}" unset
        echo rm "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic"
        rm "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic"
    done
}

