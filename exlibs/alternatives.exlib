# Copyright 2008 Bo Ã˜rsted Andresen
# Copyright 2008 Mike Kelly
# Distributed under the terms of the GNU General Public License v2

# To use this exlib, you need to set the ALTERNATIVES_PROVIDED array in
# global scope. For example, ALTERNATIVES_PROVIDED=( "perl:5.8" ), where
# perl is the alternative being provided, and 5.8 is the provider name.
# If your package provides pkg_postinst or pkg_postrm phases, you also
# need to be sure you explicitly run alternatives_pkg_{postinst,postrm}
# where appropriate.

ALTERNATIVES_DIR="/etc/env.d/alternatives"

DEPENDENCIES="
    build+run:
        app-admin/eclectic"

# alternatives_for alternative provider importance unique source target [ unique source target [...]]
alternatives_for() {
    (( $# >= 6 )) && (( $#%3 == 0)) || die "${FUNCNAME} requires exactly N*3 arguments where N>1"
    local x dupl alternative=${1} provider=${2} importance=${3} index unique src target ret=0
    shift 3

    # make sure importance is a signed integer
    if [[ ${importance} != ?(-)+([[:digit:]]) ]]; then
        eerror "Non-integer importance (${importance}) dectected"
        ((ret++))
    fi

    [[ -d "${IMAGE}${ALTERNATIVES_DIR}/${alternative}" ]] || dodir "${ALTERNATIVES_DIR}/${alternative}"

    # keep track of provided alternatives for use in pkg_post{rm,inst}. keep a mapping between importance and
    # provided alternatives and make sure the former is set to only one value
    if ! has "${alternative}:${provider}" "${ALTERNATIVES_PROVIDED[@]}"; then
        index=${#ALTERNATIVES_PROVIDED[@]}
        ALTERNATIVES_PROVIDED+=( "${alternative}:${provider}" )
        ALTERNATIVES_IMPORTANCE[index]=${importance}
        echo "IMPORTANCE=${importance}" >> "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}"
    else
        for((index=0;index<${#ALTERNATIVES_PROVIDED[@]};index++)); do
            if [[ ${alternative}:${provider} == ${ALTERNATIVES_PROVIDED[index]} ]]; then
                if [[ -n ${ALTERNATIVES_IMPORTANCE[index]} ]]; then
                    if [[ ${ALTERNATIVES_IMPORTANCE[index]} != ${importance} ]]; then
                        eerror "Differing importance (${ALTERNATIVES_IMPORTANCE[index]} != ${importance}) detected"
                        ((ret++))
                    fi
                else
                    ALTERNATIVES_IMPORTANCE[index]=${importance}
                    echo "IMPORTANCE=${importance}" >> "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}"
                fi
            fi
        done
    fi

    while (( $# >= 3 )); do
        # unique is used in bash variable names and hence can only contain alphanumeric characters and _
        # handle dash, dot, plus and slash because they are so common in paths
        unique=${1}; src=${2}; target=${3}
        unique=${unique//-/_dash_}
        unique=${unique//./_dot_}
        unique=${unique//+/_plus_}
        unique=${unique//\//_slash_}
        if [[ ${unique} != *([[:alnum:]_]) ]]; then
            eerror "Illegal unique (${unique}) detected, only alphanumeric characters and _ are legal"
            ((ret++))
        fi
        echo "PATH_${unique}='${src}'"
        echo "TARGET_${unique}='${target}'"
        if [[ -e ${IMAGE}${src} ]]; then
            local fulltarget=${target}
            [[ ${fulltarget} != /* ]] && fulltarget=${src%/*}/${fulltarget}
            mv "${IMAGE}${src}" "${IMAGE}${fulltarget}" || die "mv ${src} failed"
        fi
        shift 3
    done >> "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}"

    # sanity check for unique identifiers
    dupl=$(sed -e 's/=.*$//' "${IMAGE}${ALTERNATIVES_DIR}/${alternative}/${provider}" | sort | uniq -d)
    if [[ -n ${dupl} ]]; then
        dupl=$(echo "${dupl}" | sed -e 's/^PATH_//' -e 's/^TARGET_//' | uniq)
        eerror "Duplicate unique identifiers detected: '"${dupl}"'"
    fi
    [[ ${ret} -eq 0 ]] || die "Errors detected for ${provider}, provided for ${alternative}"
}

export_exlib_phases pkg_postinst pkg_postrm

alternatives_pkg_postinst() {
    local a alt provider module_version="20080924"
    for a in "${ALTERNATIVES_PROVIDED[@]}"; do
        alt="${a%:*}"
        provider="${a#*:}"
        if [[ ! -f "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic" \
            || "$(source "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic" &>/dev/null; echo "${VERSION}")" \
                -ne "${module_version}" ]]; then
            einfo "Creating alternatives module for ${alt}"
            if [[ ! -d ${ROOT}/usr/share/eclectic/modules ]]; then
                install -d "${ROOT}"/usr/share/eclectic/modules || eerror "Could not create eclectic modules dir"
            fi
            cat > "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic" << EOF
# This module was automatically generated by alternatives.exlib
DESCRIPTION="Alternatives for ${alt}"
VERSION="${module_version}"
MAINTAINER="eclectic@exherbo.org"

ALTERNATIVE="${alt}"

inherit alternatives
EOF
        fi

        echo eclectic "${alt}" update "${provider}"
        eclectic "${alt}" update "${provider}"
    done
}

alternatives_pkg_postrm() {
    local a alt provider
    for a in "${ALTERNATIVES_PROVIDED[@]}"; do
        alt="${a%:*}"
        provider="${a#*:}"
        if [[ -d "${ROOT}${ALTERNATIVES_DIR}/${alt}" ]]; then
            einfo "Making sure ${alt} has a valid provider"
            echo eclectic "${alt}" update "${provider}"
            eclectic "${alt}" update "${provider}"
            continue
        fi
        einfo "Cleaning up unused alternatives module for ${alt}"
        echo eclectic "${alt}" unset
        eclectic "${alt}" unset
        echo rm "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic"
        rm "${ROOT}/usr/share/eclectic/modules/${alt}.eclectic"
    done
}

