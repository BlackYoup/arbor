# Copyright 2008, 2009, 2010, 2011 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

myexparam -b htmldocs=true
myexparam -b manpages=true

require perl-module python bash-completion elisp-optional [ source_directory=contrib/emacs ] systemd-service

export_exlib_phases src_unpack src_configure src_compile src_test src_install

SUMMARY="A distributed VCS focused on speed, effectivity and real-world usability on large projects"
DESCRIPTION="Git is a fast, scalable, distributed revision control system with an unusually rich command set
that provides both high-level operations and full access to internals"
HOMEPAGE="http://git-scm.com/ http://git.or.cz/index.html"
DOWNLOADS="mirror://kernel/software/scm/${PN}/${PNV/_/.}.tar.bz2"
exparam -b htmldocs && DOWNLOADS+=" doc? ( mirror://kernel/software/scm/${PN}/${PN}-htmldocs-${PV/_/.}.tar.bz2 )"
exparam -b manpages && DOWNLOADS+=" mirror://kernel/software/scm/${PN}/${PN}-manpages-${PV/_/.}.tar.bz2"

BUGS_TO="ferdy@exherbo.org ingmar@exherbo.org"

REMOTE_IDS="freshmeat:${PN}"

UPSTREAM_DOCUMENTATION="
http://www.kernel.org/pub/software/scm/git/docs/v${PV/_/.}/gittutorial.html     [[ description = [ A short tutorial, to get started ] ]]
http://www.kernel.org/pub/software/scm/git/docs/v${PV/_/.}/everyday.html        [[ description = [ Some example workflows with git, a minimum set of commands ] ]]
http://www.kernel.org/pub/software/scm/git/docs/v${PV/_/.}/user-manual.html     [[ description = [ An in-depth user manual ] ]]
http://git.wiki.kernel.org/index.php/GitFaq                                 [[ description = [ The Git FAQ (wiki) ] ]]
"
UPSTREAM_RELEASE_NOTES="http://kernel.org/pub/software/scm/git/docs/RelNotes-${PV/_/.}.txt"

LICENCES="GPL-2"
SLOT="0"
MYOPTIONS="baselayout curl ipv6 tk xinetd
    emacs [[ description = [ Install various Emacs libraries: git.el, git-blame.el and vc-git.el ] ]]
    python [[ description = [ Install helper scripts for git remote helpers, a compatibility layer with other SCMs ] ]]
    webdav [[ requires = curl description = [ Adds support for pushing using http:// and https:// transports ] ]]"
exparam -b htmldocs && MYOPTIONS+=" doc"

DEPENDENCIES="
    build+run:
        dev-lang/perl:=[>=5.7.3]
        dev-libs/openssl
        sys-libs/zlib
        curl? ( net-misc/curl )
        tk? (
          dev-lang/tcl[>=8.4]
          dev-lang/tk[>=8.4]
        )
        webdav? ( dev-libs/expat )
    run:
        dev-perl/Error              [[ description = [ Used in Git.pm ] ]]
        xinetd? ( sys-apps/xinetd ) [[ description = [ Enables support for the xinetd super-server ] ]]
    suggestion:
        app-crypt/gnupg             [[ description = [ Needed for signing and verifying tags ] ]]
        dev-scm/cvsps               [[ description = [ Dependency for 'git cvsimport' ] ]]
        dev-perl/DBI                [[ description = [ Dependency for 'git cvsserver' ] ]]
        dev-lang/python:*           [[ description = [ Dependency for 'git p4' ] ]]
        dev-scm/subversion[perl]    [[ description = [ Dependency for 'git svn' ] group-name = [ git-svn ] ]]
        dev-perl/libwww-perl        [[ description = [ Dependency for 'git svn' ] group-name = [ git-svn ] ]]
        dev-perl/TermReadKey        [[ description = [ Dependency for 'git add --interactive, git svn' ] group-name = [ git-svn ] ]]
        dev-perl/Authen-SASL        [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        dev-perl/Net-SMTP-SSL       [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        virtual/mta                 [[ description = [ Dependency for 'git send-email' ] group-name = [ git-send-email ] ]]
        net-misc/openssh            [[ description = [ Enables support for ssh:// URIs ] ]]
        net-misc/rsync              [[ description = [ Enables support for rsync:// URIs ] ]]
        curl? ( net-misc/curl[ssl(+)]  [[ description = [ Enables support for https:// URIs ] ]] )
"

WORK=${WORKBASE}/${PNV/_/.}

git_src_unpack() {
    unpack ${PNV/_/.}.tar.bz2
    edo cd "${WORK}"
    exparam -b manpages && unpack ${PN}-manpages-${PV/_/.}.tar.bz2

    if exparam -b htmldocs && option doc; then
        edo cd Documentation
        unpack ${PN}-htmldocs-${PV/_/.}.tar.bz2
    fi
}

# No option: mozsha1/ppcsha1
# TODO Check whether we want NO_CROSS_DIRECTORY_HARDLINKS wrt pbins
git_src_configure() {
    option curl || myoptions+=" NO_CURL=YesPlease"
    option ipv6 || myoptions+=" NO_IPV6=YesPlease"
    option python || myoptions+=" NO_PYTHON=YesPlease"
    option tk || myoptions+=" NO_TCLTK=YesPlease"
    option webdav || myoptions+=" NO_EXPAT=YesPlease"
}

myemake() {
    emake \
        DESTDIR="${IMAGE}" \
        prefix=/usr \
        gitexecdir=/usr/libexec/${PN} \
        gitwebdir=/usr/share/gitweb \
        template_dir=/usr/share/${PN}/templates \
        INSTALLSITELIB=${VENDOR_LIB} \
        CFLAGS="${CFLAGS} -Wall" \
        LDFLAGS="${LDFLAGS}" \
        CC="${CC}" \
        AR="${AR}" \
        ${myoptions} \
        "${@}"
}

git_src_compile() {
    perlinfo
    myemake V=1 all
    elisp-optional_src_compile
}

git_src_test() {
    # default_src_test executes the wrong target, "make check", first
    myemake test
}

git_src_install() {
    myemake install

    if exparam -b manpages ; then
        doman man?/*
    else
        myemake ASCIIDOC8=YesPlease ASCIIDOC_NO_ROFF=YesPlease install-man
    fi

    dodoc README Documentation/{SubmittingPatches,CodingGuidelines}
    for d in / /howto/ /technical/ ; do
        docinto ${d}
        dodoc Documentation${d}*.txt
        if exparam -b htmldocs && option doc; then
            dodir /usr/share/doc/${PNVR}/html/
            insinto /usr/share/doc/${PNVR}/html/
            doins Documentation${d}*.html
        fi
    done
    docinto /

    dobashcompletion contrib/completion/git-completion.bash
    elisp-optional_src_install

    if option python ; then
        python_bytecompile
    fi

    exeinto /usr/libexec/${PN}
    doexe contrib/fast-import/git-p4
    dodoc contrib/fast-import/git-p4.txt
    newexe contrib/fast-import/import-tars.perl git-import-tars

    docinto /gitweb/
    dodoc gitweb/{INSTALL,README}

    fixlocalpod

    if option baselayout ; then
        newinitd "${FILES}"/git-daemon.initd git-daemon
        newconfd "${FILES}"/git-daemon.confd git-daemon
    fi
    if option xinetd ; then
        dodir /etc/xinetd.d
        insinto /etc/xinetd.d
        newins "${FILES}"/git-daemon.xinetd git-daemon
    fi

    install_systemd_files

    keepdir /usr/share/${PN}/templates/branches
}

