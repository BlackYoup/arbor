# Copyright 2008, 2009 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
#
# Based in part upon 'boost-1.35.0-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2008 Gentoo Foundation.
#
# Original author of aforementioned ebuild: Tiziano Mueller <dev-zero@gentoo.org>

require flag-o-matic multilib toolchain-funcs python ## check_requirements, 1024M disk

MY_PNV=${PN}_$(ever replace_all '_')

SUMMARY="Boost Libraries for C++"
HOMEPAGE="http://www.boost.org/"
DOWNLOADS="mirror://sourceforge/${PN}/${MY_PNV}.tar.bz2"

REMOTE_IDS="freshmeat:${PN}"
UPSTREAM_CHANGELOG="${HOMEPAGE}users/news/version_${PV//./_}"

LICENCES="freedist Boost-1.0"
SLOT="0"

MYOPTIONS="doc expat"
# All tests are slow, run only slow tests
RESTRICT="test"
# Libraries that need compiling:
# PARTS+=" date_time filesystem function_types graph iostreams mpi program_options python regex serialization signals system test thread wave"
#
# See output of:
# tools/jam/src/bin.linuxx86_64/bjam -d0 --show-libraries | while read line; do [[ ${line:0:1} == - ]] && echo ${line/- }; done"
#
# Others are header-only.

DEPENDENCIES="
    build+run:
        dev-lang/python:=
        expat? ( dev-libs/expat )"

WORK=${WORKBASE}/${MY_PNV}

ebjam() {
    local arch
    case ${ARCH} in
        amd64)      arch=x86_64 ;;
        x86|ia64)   arch=${ARCH} ;;
        *) die "Unknown arch" ;;
    esac

    # -q: Stop at first error, unless we're called using nonfatal
    echo "${WORK}"/tools/jam/src/bin.linux${arch}/bjam $(is_nonfatal || echo "-q") ${BJAM_OPTIONS[@]} "$@"
    "${WORK}"/tools/jam/src/bin.linux${arch}/bjam $(is_nonfatal || echo "-q") ${BJAM_OPTIONS[@]} "$@" \
        || die_unless_nonfatal 'ebjam failed.'
}

generate_user_config.jam() {
    python_version

    cat >"${WORK}"/user-config.jam <<EOF
variant exherbo : release : <optimization>custom <debug-symbols>custom ;

using gcc : $(gcc-fullversion) : $(tc-getCXX) : <cxxflags>"${CXXFLAGS}" <linkflags>"${LDFLAGS}" ;
using python : ${PYVER} : /usr : /usr/include/python${PYVER} : /usr/$(get_libdir)/python${PYVER} ;

EOF

    einfo "Using ${WORK}/user-config.jam:"
    cat "${WORK}"/user-config.jam
}

src_prepare() {
    default

    # Don't strip
    sed -e "s/-s\b//" -i "${WORK}"/tools/jam/src/build.jam || die "Sed to remove stripping failed."

    # <optimization>off forces -O0 on, overriding the user's flags, so we add dummy options "custom",
    # and use those instead, allowing user's *FLAGS to be used.
    sed -e "s/off speed space/& custom/" \
        -e "s/debug-symbols[[:space:]]*: on off/& custom/" \
        -i "${WORK}"/tools/build/v2/tools/builtin.jam || die "Sed to control optimisation failed."
}

src_configure() {
    local j

    pushd "${WORK}"/tools/jam/src >/dev/null || die "pushd ${WORK}/tools/jam/src failed"
    echo "Building bjam:" CC=$(tc-getCC) ./build.sh gcc
    CC=$(tc-getCC) ./build.sh gcc || die 'Building jam failed.'
    popd >/dev/null || die 'popd failed'

    generate_user_config.jam

    j=$(sed -n -e 's,.*-j\([[:digit:]]\+\).*,\1,p' <<< "${MAKEOPTS}")
    [[ -z ${j} ]] && ewarn "Couldn't determine number of jobs from \$MAKEOPTS='${MAKEOPTS}', falling back to -j1"

    BJAM_OPTIONS=(
        -j${j:-1}                   # Parallel make, note: '-j' without a digit just hangs. FIXME exlibify
        exherbo
        --user-config="${WORK}"/user-config.jam
        --layout=system
        --prefix="${IMAGE}"/usr
        --toolset=gcc               # FIXME: don't hardcode gcc
        link=shared
        runtime-link=shared
        threading=single,multi
        $(option expat && echo "-sEXPAT_INCLUDE=/usr/include")
        $(option expat && echo "-sEXPAT_LIBPATH=/usr/$(get_libdir)")
        -sICU_PATH=
        --without-mpi               # Dependencies not in arbor.git
    )
    export BJAM_OPTIONS BOOST_ROOT="${WORK}"
}

src_compile() {
    ebjam

    pushd "${WORK}/tools/regression/build" >/dev/null || die "pushd ${WORK}/tools/regression/build failed."
    ebjam
    popd >/dev/null || die "popd failed."
}

src_test_slow() {
    cd "${WORK}/status"
    echo "Running ${PN} tests, go make some coffee!"

    nonfatal ebjam --dump-tests 2>&1 | tee regress.log || ewarn "'ebjam --dump-tests' returned non-zero exit status: $?"

    "${WORK}"/tools/regression/build/bin/gcc-$(gcc-fullversion)/exherbo/threading-multi/process_jam_log --v2 < "${WORK}"/status/regress.log \
        || ewarn "Post-processing ./regress.log failed."
    cat > "${WORK}/status/comment.html" <<-EOF
<p>Tests are run on an <a href="http://www.exherbo.org">Exherbo</a> system.</p>
EOF

    ewarn 'FIXME: compiler_status'
    "${WORK}"/tools/regression/build/bin/gcc-$(gcc-fullversion)/exherbo/compiler_status \
        --v2 \
        --comment "${WORK}/status/comment.html" \
        "${WORK}" \
        cs-$(uname).html cs-$(uname)-links.html \
        || ewarn "Generating the build log html summary page failed"

    # sed -e 's|../boost.png|boost.png|' -i *.html # Cosmetic fix.
}

src_install() {
    local libdir=$(get_libdir)

    ebjam \
        --include-dir="${IMAGE}"/usr/include \
        --libdir="${IMAGE}"/usr/${libdir} \
        install

    dosym /usr/${libdir}/libboost_thread-mt.so /usr/${libdir}/libboost_thread.so

    if option doc; then
        insinto /usr/share/doc/${PNVR}/html
        doins -r doc more people wiki

        find libs -iname test -o -iname src -print0 | xargs -0 rm -r \
            || die "Couldn't clean out ./libs/."
        doins -r libs

        dosym /usr/include/${PN} /usr/share/doc/${PNVR}/html/${PN}
    fi

    docinto status
    nonfatal dodoc  "${WORK}"/{status/*,regress.log,boost.png}
}

