# Copyright 2007-2007 Bryan Ã˜stergaard
# Copyright 2008 Ali Polatel
# Copyright 2009, 2010 Ingmar Vanhassel
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'python-2.5.2-r4.ebuild' from Gentoo, which is:
#  Copyright 1999-2008 Gentoo Foundation

MY_PNV="Python-${PV}"

# python: no has_lib as it needs only the pyc part of the exlib
require flag-o-matic python [ has_lib=false ] alternatives \
        autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.13 1.12 1.11 1.10 ] ]
require easy-multibuild [ multiunpack=true work=${MY_PNV} ]

export_exlib_phases src_prepare src_install pkg_preinst

SUMMARY="Python interpreter"
HOMEPAGE="http://www.${PN}.org/"
DOWNLOADS="http://${PN}.org/ftp/${PN}/${PV}/${MY_PNV}.tar.xz"

UPSTREAM_DOCUMENTATION="
http://docs.${PN}.org/$(ever range 1-2)/
"
UPSTREAM_CHANGELOG="${HOMEPAGE}/download/releases/${PV}/NEWS.txt"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/download/releases/${PV}/"

LICENCES="PSF-2.2"
SLOT="$(ever range 1-2)"
MYOPTIONS="dbm examples readline sqlite tk
    ( berkdb gdbm ) [[ requires = dbm ]]
    dbm? ( ( berkdb gdbm ) [[ number-selected = exactly-one ]] )
    multibuild_c: ( 32 64 )
"

# FIXME: Internal copy of dev-libs/expat
DEPENDENCIES="
    build:
        virtual/pkg-config
    build+run:
        app-arch/bzip2[multibuild_c:*(-)?]
        dev-libs/libffi[multibuild_c:*(-)?]
        dev-libs/openssl[multibuild_c:*(-)?]
        sys-libs/ncurses[multibuild_c:*(-)?]
        sys-libs/zlib[>=1.1.3][multibuild_c:*(-)?]
        berkdb? ( sys-libs/db:=[>=4.6.21&<4.8][multibuild_c:*(-)?] [[ note = [ python:2.7 also supports 4.8 ] ]] )
        gdbm? ( sys-libs/gdbm[multibuild_c:*(-)?] )
        readline? ( sys-libs/readline[>=4.1][multibuild_c:*(-)?] )
        sqlite? ( dev-db/sqlite:3[>=3.0.8][multibuild_c:*(-)?] )
        tk? ( dev-lang/tk[>=8.0][multibuild_c:*(-)?] )
    post:
        app-admin/eclectic-python:$(ever major)[multibuild_c:*(-)?]
"

WORK="${WORKBASE}"
DEFAULT_SRC_CONFIGURE_PARAMS=(
    --enable-ipv6
    --enable-shared
    $(ever at_least 3 || echo --enable-unicode=ucs4)
    --with-system-ffi
)

if ever at_least 3.4; then
    DEFAULT_SRC_CONFIGURE_PARAMS+=( --without-ensurepip )
fi

python-build_prepare_one_multibuild() {
    if ! ever at_least 3.3; then
        # linux-3 support, applied upstream
        edo cp -r "${WORKBASE}/${MULTIBUILD_CLASS}/${MULTIBUILD_TARGET}/Python-${PV}/Lib/plat-linux2" "${WORKBASE}/${MULTIBUILD_CLASS}/${MULTIBUILD_TARGET}/Python-${PV}/Lib/plat-linux3"
    fi

    [[ -d ${FILES}/${PV} ]] && expatch "${FILES}/${PV}/"

    local needs_sed=(
        Lib/distutils/command/install.py
        Lib/distutils/sysconfig.py
        Lib/site.py
        Makefile.pre.in
    )

    if ever at_least 3.2; then
        needs_sed+=(
            Lib/sysconfig.py
            Lib/test/test_site.py
        )
    else
        needs_sed+=(
            Modules/Setup.dist
            Modules/getpath.c
            setup.py
        )
    fi

    if [[ $(ever major) == 3 ]]; then
        needs_sed+=(
            Lib/distutils/tests/test_install.py
        )
    fi

    edo sed -i -e "s:@@EXHERBO_LIBDIR@@:${LIBDIR}:g" ${needs_sed[@]}

    if ! multibuild_default_target C; then
        edo cp "${FILES}"/"${PN}"-config.py .

        edo sed -i -e "s:@@SLOT@@:${SLOT}:g" \
                   -e "s:@@PKG_CONFIG_PATH@@:${PKG_CONFIG_PATH%%:*}:g" \
            "${PN}"-config.py
    fi

    local prefix='/usr'
    multibuild_default_target C || prefix="/usr/${CHOST}"
    edo sed -i -e "s:@prefix@:${prefix}:g" Misc/${PN}.pc.in

    eautoreconf
}

prepare_one_multibuild() {
    python-build_prepare_one_multibuild
}

python-build_src_prepare() {
    easy-multibuild_run_phase
}

configure_prepare_one_multibuild() { :; }

configure_one_multibuild() {
    # dbm module can link to berkdb or gdbm.
    # default to gdbm when both are enabled.
    local disable="ndbm" # not available

    option berkdb   || disable+=" _bsddb"
    if ever at_least 3 ; then
        option dbm  || disable+=" _dbm"
        option gdbm || disable+=" _gdbm"
    else
        option dbm  || disable+=" dbm"
        option gdbm || disable+=" gdbm"
    fi
    option readline || disable+=" readline"
    option sqlite   || disable+=" _sqlite3"
    option tk       || disable+=" _tkinter"
    export PYTHON_DISABLE_MODULES="${disable}"

    # -fwrapv: http://bugs.python.org/issue11149
    export OPT="-fwrapv"
    export CPPFLAGS="$(pkg-config --cflags-only-I libffi) $(multibuild_get_var C ${MULTIBUILD_TARGET} CPPFLAGS)"
    export LDFLAGS="${LDFLAGS} -L/usr/${LIBDIR}"

    default
}

python-build_test_one_multibuild() {
    unset DISPLAY

    python_enable_pyc

    # needed for 32bit tests
    esandbox allow_net --connect "inet:127.0.0.1@1024-65535"
    esandbox allow_net --connect "inet6:::1@1024-65535"

    # for test_multiprocessing
    esandbox allow_net "unix:${TEMP%/}/pymp-*/listener-*"

    # rerun failed tests in verbose mode (regrtest -w)
    # disable tests (regrtest -x)
    EXTRATESTOPTS="-w -x ${DISABLE_TESTS[@]}" emake test

    esandbox disallow_net "unix:${TEMP%/}/pymp-*/listener-*"
    esandbox disallow_net --connect "inet:127.0.0.1@1024-65535"
    esandbox disallow_net --connect "inet6:::1@1024-65535"

    python_disable_pyc
}

test_one_multibuild() {
    python-build_test_one_multibuild
}

python-build_install_one_multibuild() {
    default

    # for backward compatibility, have plat-linux3 and plat-linux2 folders
    # as long as they are identical, this shouldn't be a problem
    pushd "${IMAGE}"/usr/${LIBDIR}/python${SLOT}/
    if [[ -d plat-linux2 ]]; then
        edo cp -r plat-linux2 plat-linux3
    elif [[ -d plat-linux3 ]]; then
        edo cp -r plat-linux3 plat-linux2
    fi
    popd

    edo rm "${IMAGE}"/usr/bin/python$(ever major)-config
    edo rm "${IMAGE}"/usr/${LIBDIR}/pkgconfig/python$(ever major).pc

    if [[ $(ever major) == 2 ]]; then
        edo rm "${IMAGE}"/usr/bin/smtpd.py
        edo rm "${IMAGE}"/usr/bin/python
        edo rm "${IMAGE}"/usr/${LIBDIR}/pkgconfig/python.pc
        edo mv "${IMAGE}"/usr/bin/idle{,${SLOT}}
        edo mv "${IMAGE}"/usr/bin/pydoc{,${SLOT}}
    else
        edo rm "${IMAGE}"/usr/bin/python$(ever major)
    fi

    if ever at_least 3.2; then
        edo mv "${IMAGE}"/usr/${LIBDIR}/{python${SLOT}/config-${SLOT}m,}/libpython${SLOT}m.a
        edo rm "${IMAGE}"/usr/bin/{2to3,idle3,pydoc3,python${SLOT}m}
        edo rm "${IMAGE}"/usr/share/man/man1/python3.1
        edo rm "${IMAGE}"/usr/bin/python${SLOT}-config
        edo mv "${IMAGE}"/usr/bin/python${SLOT}{m,}-config
        edo mv "${IMAGE}"/usr/${LIBDIR}/libpython$(ever major){,-${SLOT}}.so
        alternatives+=( /usr/${LIBDIR}/libpython$(ever major).so libpython$(ever major)-${SLOT}.so )
    else
        edo mv "${IMAGE}"/usr/bin/2to3{,-${SLOT}}
        edo mv "${IMAGE}"/usr/${LIBDIR}/{python${SLOT}/config,}/libpython${SLOT}.a
    fi

    if ever at_least 3.3; then
        edo rm "${IMAGE}"/usr/bin/pyvenv
    fi

    case ${SLOT} in
        2.7)
            edo rm "${IMAGE}"/usr/share/man/man1/python.1
            edo rm "${IMAGE}"/usr/share/man/man1/python$(ever major).1
            edo rm "${IMAGE}"/usr/bin/python-config
            edo rm "${IMAGE}"/usr/bin/python$(ever major)
            ;;
        3.1)
            edo mv "${IMAGE}"/usr/bin/idle{$(ever major),${SLOT}}
            edo mv "${IMAGE}"/usr/bin/pydoc{$(ever major),${SLOT}}
            ;;
    esac

    # pyconfig.h contains PLATFORMS specific bits
    local prefix='/usr'
    if ! multibuild_default_target C; then
        local m
        ever at_least 3.2 && m="m"

        prefix="/usr/${CHOST}"
        dodir ${prefix}/{bin,include/python${SLOT}${m}}
        edo mv "${IMAGE}"/usr/bin/python${SLOT} "${IMAGE}"/${prefix}/bin

        # Replace python-config by a multibuild-friendly one
        edo rm "${IMAGE}"/usr/bin/python${SLOT}-config
        into ${prefix}
        newbin python-config.py python${SLOT}-config

        edo mv "${IMAGE}"/usr/include/python${SLOT}${m}/*.h \
            "${IMAGE}"/${prefix}/include/python${SLOT}${m}

        alternatives+=(
            /usr/${CHOST}/bin/python$(ever major) python${SLOT}
            /usr/${CHOST}/bin/python$(ever major)-config python${SLOT}-config
        )

        if ever at_least 3.2; then
            edo pushd "${IMAGE}"/usr/${CHOST}/bin
            edo ln -s python${SLOT} python${SLOT}${m}
            edo ln -s python${SLOT}-config python${SLOT}${m}-config
            edo popd
        fi
    fi

    alternatives+=( /usr/${LIBDIR}/pkgconfig/python$(ever major).pc python-${SLOT}.pc )
}

install_one_multibuild() {
    python-build_install_one_multibuild
}

python-build_src_install() {
    # alternatives handling
    alternatives=("${PN}$(ever major)" "${SLOT}" "${SLOT}")

    easy-multibuild_src_install

    alternatives+=(
        /usr/bin/2to3-$(ever major) 2to3-${SLOT}
        /usr/bin/idle$(ever major) idle${SLOT}
        /usr/bin/pydoc$(ever major) pydoc${SLOT}
        /usr/bin/python$(ever major) python${SLOT}
        /usr/bin/python$(ever major)-config python${SLOT}-config
        /usr/share/man/man1/python$(ever major).1 python${SLOT}.1
    )

    ever at_least 3.3 && alternatives+=( /usr/bin/pyvenv-$(ever major) pyvenv-${SLOT} )

    alternatives_for "${alternatives[@]}"

    if ever at_least 3.2; then
        edo pushd "${IMAGE}"/usr/bin
        edo ln -s python${SLOT} python${SLOT}m
        edo ln -s python${SLOT}-config python${SLOT}m-config
        edo popd
    fi
}

# replace symlinks with directories
# accidentally incorrectly introduced with 52cca7bfe38138653fe2b329472bcb90e43a548d
python-build_pkg_preinst() {
    if [[ -L "${ROOT}"/usr/${LIBDIR}/python${SLOT}/plat-linux2 ]]; then
        edo rm "${ROOT}"/usr/${LIBDIR}/python${SLOT}/plat-linux2
    elif [[ -L "${ROOT}"/usr/${LIBDIR}/python${SLOT}/plat-linux3 ]]; then
        edo rm "${ROOT}"/usr/${LIBDIR}/python${SLOT}/plat-linux3
    fi
}

