# Copyright 2007-2007 Bryan Ã˜stergaard
# Copyright 2008 Ali Polatel
# Copyright 2009, 2010 Ingmar Vanhassel
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'python-2.5.2-r4.ebuild' from Gentoo, which is:
#  Copyright 1999-2008 Gentoo Foundation

MY_PNV="Python-${PV}"

# python: no has_lib as it needs only the pyc part of the exlib
require flag-o-matic python [ has_lib=false ] alternatives
require autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.13 1.12 1.11 1.10 ] ]

export_exlib_phases pkg_pretend src_prepare src_configure src_test src_install

SUMMARY="Python interpreter"
HOMEPAGE="http://www.${PN}.org/"
DOWNLOADS="http://${PN}.org/ftp/${PN}/${PV}/${MY_PNV}.tar.xz"

UPSTREAM_DOCUMENTATION="
http://docs.${PN}.org/$(ever range 1-2)/
"
UPSTREAM_CHANGELOG="${HOMEPAGE}/download/releases/${PV}/NEWS.txt"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/download/releases/${PV}/"

LICENCES="PSF-2.2"
SLOT="$(ever range 1-2)"
MYOPTIONS="dbm examples ipv6 readline sqlite tk
( berkdb gdbm ) [[ requires = dbm ]]
dbm? ( ( berkdb gdbm ) [[ number-selected = exactly-one ]] )
"

# FIXME: Internal copy of dev-libs/expat
DEPENDENCIES="
    build:
        virtual/pkg-config
    build+run:
        app-arch/bzip2
        dev-libs/libffi
        sys-libs/ncurses
        dev-libs/openssl
        sys-libs/zlib[>=1.1.3]
        berkdb? ( sys-libs/db:=[>=4.6.21&<4.8] [[ note = [ python:2.7 also supports 4.8 ] ]] )
        gdbm? ( sys-libs/gdbm )
        readline? ( sys-libs/readline[>=4.1] )
        sqlite? ( dev-db/sqlite:3[>=3.0.8] )
        tk? ( dev-lang/tk[>=8.0] )
"

WORK="${WORKBASE}/${MY_PNV}"
DEFAULT_SRC_CONFIGURE_PARAMS=(
    --enable-shared
    $(ever at_least 3 || echo --enable-unicode=ucs4)
    --with-system-ffi
)
DEFAULT_SRC_CONFIGURE_OPTION_ENABLES=( ipv6 )

python-build_pkg_pretend() {
    # python currently can't be cross compiled.
    # http://bugs.python.org/issue3754  (closed fixed, but it isn't)
    exhost --is-native -q || die "You can't yet install python for a non-native target"
}

python-build_src_prepare() {
    # linux-3 support, applied upstream
    ever at_least 3.3 || edo cp -r Lib/plat-linux2 Lib/plat-linux3

    [[ -d ${FILES}/${PV} ]] && expatch "${FILES}/${PV}/"

    edo cp "${FILES}"/"${PN}"-config.py .

    edo sed -i -e "s:@@SLOT@@:${SLOT}:g" \
               -e "s:@@EXHERBO_TARGET@@:$(exhost --target):g" \
               -e "s:@@EXHERBO_TOOL_PREFIX@@:$(exhost --tool-prefix):g" \
        "${PN}"-config.py

    eautoreconf
}

python-build_src_configure() {
    # dbm module can link to berkdb or gdbm.
    # default to gdbm when both are enabled.
    local disable="ndbm" # not available

    option berkdb   || disable+=" _bsddb"
    if ever at_least 3 ; then
        option dbm  || disable+=" _dbm"
        option gdbm || disable+=" _gdbm"
    else
        option dbm  || disable+=" dbm"
        option gdbm || disable+=" gdbm"
    fi
    option readline || disable+=" readline"
    option sqlite   || disable+=" _sqlite3"
    option tk       || disable+=" _tkinter"
    export PYTHON_DISABLE_MODULES="${disable}"

    # -fwrapv: http://bugs.python.org/issue11149
    export OPT="-fwrapv"
    export CPPFLAGS="$($(exhost --tool-prefix)pkg-config --cflags-only-I libffi) ${CPPFLAGS}"
    export LDFLAGS="${LDFLAGS} -L/usr/$(exhost --target)/lib"

    default
}

python-build_src_test() {
    unset DISPLAY

    python_enable_pyc

    # needed for 32bit tests
    esandbox allow_net --connect "inet:127.0.0.1@1024-65535"
    esandbox allow_net --connect "inet6:::1@1024-65535"

    # for test_multiprocessing
    esandbox allow_net "unix:${TEMP%/}/pymp-*/listener-*"

    # rerun failed tests in verbose mode (regrtest -w)
    # disable tests (regrtest -x)
    EXTRATESTOPTS="-w -x ${DISABLE_TESTS}" emake test

    esandbox disallow_net "unix:${TEMP%/}/pymp-*/listener-*"
    esandbox disallow_net --connect "inet:127.0.0.1@1024-65535"
    esandbox disallow_net --connect "inet6:::1@1024-65535"

    python_disable_pyc
}

python-build_src_install() {
    default

    # alternatives handling
    local PYTHON_MAJOR="$(ever at_least 3 && echo 3)"
    alternatives=("${PN}$(ever major)" "${SLOT}" "${SLOT}")

    # for backward compatibility, have plat-linux3 and plat-linux2 folders
    # as long as they are identical, this shouldn't be a problem
    pushd "${IMAGE}"/usr/$(exhost --target)/lib/python${SLOT}/
    if [[ -d plat-linux2 ]]; then
        edo cp -r plat-linux2 plat-linux3
    elif [[ -d plat-linux3 ]]; then
        edo cp -r plat-linux3 plat-linux2
    fi
    popd

    ! ever at_least 3.1 && edo rm "${IMAGE}"/usr/$(exhost --target)/bin/smtpd.py

    [ "${SLOT}" == "3.1" ] && edo mv "${IMAGE}"/usr/$(exhost --target)/bin/2to3 "${IMAGE}"/usr/$(exhost --target)/bin/2to3-3

    if ever at_least 3.2; then
        edo mv "${IMAGE}"/usr/$(exhost --target)/lib/{python${SLOT}/config-${SLOT}m,}/libpython${SLOT}m.a
        edo rm "${IMAGE}"/usr/$(exhost --target)/bin/{2to3,idle3,pydoc3,python3-config,python${SLOT}m}
    else
        edo mv "${IMAGE}"/usr/$(exhost --target)/lib/{python${SLOT}/config,}/libpython${SLOT}.a
    fi

    # alternatives handling
    local PYTHON_MAJOR="$(ever at_least 3 && echo 3)"
    [ "${SLOT}" == "2.7" ] && edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python \
                           && edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python$(ever major) \
                           && edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python$(ever major)-config \
                           && edo cp "${IMAGE}"/usr/$(exhost --target)/bin/python${SLOT} "${IMAGE}"/usr/$(exhost --target)/bin/python
    # they switched from python3 being the executable and python3.x being the symlink to python3
    # to python3.x being the executable and python3 being the symlink
    ever at_least 3.3 && edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python${PYTHON_MAJOR} \
                      && edo cp "${IMAGE}"/usr/$(exhost --target)/bin/python{${SLOT},${PYTHON_MAJOR}}
    edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python${SLOT}
    edo rm "${IMAGE}"/usr/$(exhost --target)/bin/python${SLOT}-config
    edo rm "${IMAGE}"/usr/$(exhost --target)/lib/pkgconfig/python${PYTHON_MAJOR}.pc

    if ever at_least 3.2; then
        edo mv "${IMAGE}"/usr/$(exhost --target)/bin/python{${SLOT}m,${PYTHON_MAJOR}}-config
        edo mv "${IMAGE}"/usr/$(exhost --target)/lib/libpython${PYTHON_MAJOR}{,-${SLOT}}.so
        alternatives+=( /usr/$(exhost --target)/lib/libpython${PYTHON_MAJOR}.so libpython${PYTHON_MAJOR}-${SLOT}.so )
    else
        into /usr/$(exhost --target)
        newbin "${WORKBASE}"/${MY_PNV}/python-config.py python${PYTHON_MAJOR}-config
    fi

    alternatives+=( /usr/$(exhost --target)/lib/pkgconfig/python${PYTHON_MAJOR}.pc python-${SLOT}.pc )

    [ "$(ever major)" == 2 ] && \
        alternatives+=(
            /usr/$(exhost --target)/bin/python python$(ever major)
            /usr/$(exhost --target)/bin/python-config python$(ever major)-config
        )

    alternatives+=(
        /usr/$(exhost --target)/bin/2to3$(ever at_least 3 && echo "-")${PYTHON_MAJOR} 2to3-${SLOT}
        /usr/$(exhost --target)/bin/idle${PYTHON_MAJOR} idle${SLOT}
        /usr/$(exhost --target)/bin/pydoc${PYTHON_MAJOR} pydoc${SLOT}
        /usr/$(exhost --target)/bin/python$(ever major) python${SLOT}
        /usr/$(exhost --target)/bin/python$(ever major)-config python${SLOT}-config
    )

    alternatives_for "${alternatives[@]}"

    if ever at_least 3.2; then
        edo pushd "${IMAGE}"/usr/$(exhost --target)/bin
        edo ln -s python${SLOT} python${SLOT}m
        edo ln -s python${SLOT}-config python${SLOT}m-config
        edo popd
    fi
}

