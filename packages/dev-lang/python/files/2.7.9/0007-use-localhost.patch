From 3ecd7ac659d56f8522009b7ae017095ffb7403c1 Mon Sep 17 00:00:00 2001
From: Paul Seidler <pl.seidler@gmail.com>
Date: Sun, 26 Jun 2011 01:57:45 +0000
Subject: [PATCH] use localhost for tests where possible
Upstream: no

diff -Naur Python-2.7.9.orig/Lib/test/test_httplib.py Python-2.7.9/Lib/test/test_httplib.py
--- Python-2.7.9.orig/Lib/test/test_httplib.py	2014-12-10 16:59:44.000000000 +0100
+++ Python-2.7.9/Lib/test/test_httplib.py	2014-12-15 18:05:04.315923086 +0100
@@ -455,7 +455,7 @@
 
     def testHTTPConnectionSourceAddress(self):
         self.conn = httplib.HTTPConnection(HOST, self.port,
-                source_address=('', self.source_port))
+                source_address=('localhost', self.source_port))
         self.conn.connect()
         self.assertEqual(self.conn.sock.getsockname()[1], self.source_port)
 
@@ -463,7 +463,7 @@
                      'httplib.HTTPSConnection not defined')
     def testHTTPSConnectionSourceAddress(self):
         self.conn = httplib.HTTPSConnection(HOST, self.port,
-                source_address=('', self.source_port))
+                source_address=('localhost', self.source_port))
         # We don't test anything here other the constructor not barfing as
         # this code doesn't deal with setting up an active running SSL server
         # for an ssl_wrapped connect() to actually return from.
diff -Naur Python-2.7.9.orig/Lib/test/test_httpservers.py Python-2.7.9/Lib/test/test_httpservers.py
--- Python-2.7.9.orig/Lib/test/test_httpservers.py	2014-12-10 16:59:44.000000000 +0100
+++ Python-2.7.9/Lib/test/test_httpservers.py	2014-12-15 18:05:26.978211503 +0100
@@ -54,7 +54,7 @@
         self.test_object = test_object
 
     def run(self):
-        self.server = HTTPServer(('', 0), self.request_handler)
+        self.server = HTTPServer(('localhost', 0), self.request_handler)
         self.test_object.PORT = self.server.socket.getsockname()[1]
         self.test_object.server_started.set()
         self.test_object = None
diff -Naur Python-2.7.9.orig/Lib/test/test_socket.py Python-2.7.9/Lib/test/test_socket.py
--- Python-2.7.9.orig/Lib/test/test_socket.py	2014-12-10 16:59:47.000000000 +0100
+++ Python-2.7.9/Lib/test/test_socket.py	2014-12-15 18:09:33.384369325 +0100
@@ -302,7 +302,7 @@
         # Testing that sendto doens't masks failures. See #10169.
         s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
         self.addCleanup(s.close)
-        s.bind(('', 0))
+        s.bind(('localhost', 0))
         sockname = s.getsockname()
         # 2 args
         with self.assertRaises(UnicodeEncodeError):
@@ -563,7 +563,7 @@
 
     # XXX The following don't test module-level functionality...
 
-    def _get_unused_port(self, bind_address='0.0.0.0'):
+    def _get_unused_port(self, bind_address='localhost'):
         """Use a temporary socket to elicit an unused ephemeral port.
 
         Args:
@@ -694,7 +694,7 @@
         socket.getaddrinfo(HOST, None, 0, 0, 0, socket.AI_PASSIVE)
         # a server willing to support both IPv4 and IPv6 will
         # usually do this
-        socket.getaddrinfo(None, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0,
+        socket.getaddrinfo(HOST, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0,
                            socket.AI_PASSIVE)
 
         # Issue 17269: test workaround for OS X platform bug segfault
@@ -1396,7 +1396,7 @@
     testSourceAddress = _justAccept
     def _testSourceAddress(self):
         self.cli = socket.create_connection((HOST, self.port), timeout=30,
-                source_address=('', self.source_port))
+                source_address=('localhost', self.source_port))
         self.addCleanup(self.cli.close)
         self.assertEqual(self.cli.getsockname()[1], self.source_port)
         # The port number being used is sufficient to show that the bind()
diff -Naur Python-2.7.9.orig/Lib/test/test_ssl.py Python-2.7.9/Lib/test/test_ssl.py
--- Python-2.7.9.orig/Lib/test/test_ssl.py	2014-12-10 16:59:47.000000000 +0100
+++ Python-2.7.9/Lib/test/test_ssl.py	2014-12-15 18:10:08.705824681 +0100
@@ -305,7 +305,7 @@
             self.assertRaises(socket.error, ss.recvfrom, 1)
             self.assertRaises(socket.error, ss.recvfrom_into, bytearray(b'x'), 1)
             self.assertRaises(socket.error, ss.send, b'x')
-            self.assertRaises(socket.error, ss.sendto, b'x', ('0.0.0.0', 0))
+            self.assertRaises(socket.error, ss.sendto, b'x', ('127.0.0.1', 0))
 
     def test_timeout(self):
         # Issue #8524: when creating an SSL socket, the timeout of the
