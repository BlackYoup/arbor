From d999a55a8f59b268142083f8c80ffe9aee660698 Mon Sep 17 00:00:00 2001
From: Paul Seidler <bl4sph3my@online.de>
Date: Sun, 6 Mar 2011 16:07:15 +0100
Subject: [PATCH] use localhost for tests where possible
Upstream: no

---
 Lib/test/test_httplib.py     |    2 +-
 Lib/test/test_httpservers.py |    2 +-
 Lib/test/test_socket.py      |    8 ++++----
 Lib/test/test_ssl.py         |    2 +-
 4 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/Lib/test/test_httplib.py b/Lib/test/test_httplib.py
index 2708728..89eaf9e 100644
--- a/Lib/test/test_httplib.py
+++ b/Lib/test/test_httplib.py
@@ -370,7 +370,7 @@ class SourceAddressTest(TestCase):
 
     def testHTTPConnectionSourceAddress(self):
         self.conn = httplib.HTTPConnection(HOST, self.port,
-                source_address=('', self.source_port))
+                source_address=('localhost', self.source_port))
         self.conn.connect()
         self.assertEqual(self.conn.sock.getsockname()[1], self.source_port)
 
diff --git a/Lib/test/test_httpservers.py b/Lib/test/test_httpservers.py
index cc9b93c..10c58c0 100644
--- a/Lib/test/test_httpservers.py
+++ b/Lib/test/test_httpservers.py
@@ -54,7 +54,7 @@ class TestServerThread(threading.Thread):
         self.test_object = test_object
 
     def run(self):
-        self.server = HTTPServer(('', 0), self.request_handler)
+        self.server = HTTPServer(('localhost', 0), self.request_handler)
         self.test_object.PORT = self.server.socket.getsockname()[1]
         self.test_object.server_started.set()
         self.test_object = None
diff --git a/Lib/test/test_socket.py b/Lib/test/test_socket.py
index bd2da9b..7ae10ef 100644
--- a/Lib/test/test_socket.py
+++ b/Lib/test/test_socket.py
@@ -499,7 +499,7 @@ class GeneralModuleTests(unittest.TestCase):
 
     # XXX The following don't test module-level functionality...
 
-    def _get_unused_port(self, bind_address='0.0.0.0'):
+    def _get_unused_port(self, bind_address='localhost'):
         """Use a temporary socket to elicit an unused ephemeral port.
 
         Args:
@@ -563,7 +563,7 @@ class GeneralModuleTests(unittest.TestCase):
         sock.close()
 
     def test_getsockaddrarg(self):
-        host = '0.0.0.0'
+        host = 'localhost'
         port = self._get_unused_port(bind_address=host)
         big_port = port + 65536
         neg_port = port - 65536
@@ -621,7 +621,7 @@ class GeneralModuleTests(unittest.TestCase):
         socket.getaddrinfo(HOST, None, 0, 0, 0, socket.AI_PASSIVE)
         # a server willing to support both IPv4 and IPv6 will
         # usually do this
-        socket.getaddrinfo(None, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0,
+        socket.getaddrinfo(HOST, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0,
                            socket.AI_PASSIVE)
 
 
@@ -1179,7 +1179,7 @@ class NetworkConnectionAttributesTest(SocketTCPTest, ThreadableTest):
     testSourceAddress = _justAccept
     def _testSourceAddress(self):
         self.cli = socket.create_connection((HOST, self.port), timeout=30,
-                source_address=('', self.source_port))
+                source_address=('localhost', self.source_port))
         self.addCleanup(self.cli.close)
         self.assertEqual(self.cli.getsockname()[1], self.source_port)
         # The port number being used is sufficient to show that the bind()
diff --git a/Lib/test/test_ssl.py b/Lib/test/test_ssl.py
index 2567218..b24089a 100644
--- a/Lib/test/test_ssl.py
+++ b/Lib/test/test_ssl.py
@@ -191,7 +191,7 @@ class BasicSocketTests(unittest.TestCase):
         self.assertRaises(socket.error, ss.recvfrom, 1)
         self.assertRaises(socket.error, ss.recvfrom_into, bytearray(b'x'), 1)
         self.assertRaises(socket.error, ss.send, b'x')
-        self.assertRaises(socket.error, ss.sendto, b'x', ('0.0.0.0', 0))
+        self.assertRaises(socket.error, ss.sendto, b'x', ('127.0.0.1', 0))
 
 
 class NetworkedTests(unittest.TestCase):
-- 
1.7.4.1

