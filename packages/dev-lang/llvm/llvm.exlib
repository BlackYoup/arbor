# Copyright 2012 Elias Pipping <pipping@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

# Not checked against an older version of python
require cmake [ api=2 ] distutils [ has_lib=true has_bin=true python_dep=2.7 ] easy-multibuild

export_exlib_phases src_prepare src_compile src_install

SUMMARY="The LLVM Compiler Infrastructure"
HOMEPAGE="http://llvm.org/"

LICENCES="UoI-NCSA"
SLOT="0"
MYOPTIONS="
    asserts [[ description = [ Enable assertions ] ]]
    shared-libs [[ description = [ Build libraries dynamically ] ]]
    multibuild_c: 32 64
"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        dev-python/setuptools [[ description = [ For lit ] ]]
        sys-devel/flex
    test:
        dev-lang/python:*
"

llvm_src_prepare() {
    edo pushd "${CMAKE_SOURCE}"

    # Fix the use of dot
    edo sed -e 's/@DOT@//g' -i docs/doxygen.cfg.in

    if ! ever at_least 3.2; then
        expatch "${FILES}"/${PN}-tools.patch
        expatch "${FILES}"/${PN}-fix-multibuild-tests.patch
    fi

    if ever at_least 3.4 ; then
        expatch "${FILES}"/${PN}-fix-llvm-config.patch
        expatch "${FILES}"/llvm-config-path-v3.patch
    else
        expatch "${FILES}"/llvm-config-path.patch
    fi

    if ever at_least 3.4 && ! ever at_least 3.5; then
        expatch "${FILES}"/llvm-config-path-3.4.patch
    fi

    default
    edo popd
}

configure_one_multibuild() {
    # the jit tests segfault when a i686 build is built with the
    # wrong LLVM_DEFAULT_TARGET_TRIPLE which happens on x86_64
    local args=(
        -DLLVM_LIBDIR_SUFFIX:STRING=${LIBDIR#lib}
        -DLLVM_ENABLE_ASSERTIONS:BOOL=$(option asserts TRUE FALSE)
        -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=${CHOST}
        -DLLVM_BINUTILS_INCDIR:STRING=/usr/include
        -DBUILD_SHARED_LIBS:BOOL=$(option shared-libs TRUE FALSE)
    )
    if ever at_least 3.2; then
        args+=( -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING=R600 )
    fi
    if ever at_least 3.4 ; then
        # TODO(compnerd) hidden inline visibility causes test tools to fail to build as a required
        # method is hidden; move the definition out of line, and export the interface
        args+=( -DSUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG:BOOL=NO )
    fi

    ecmake "${args[@]}"
}

llvm_src_compile() {
    easy-multibuild_run_phase

    edo pushd "${CMAKE_SOURCE}"/utils/lit
    distutils_src_compile
    edo popd
}

install_one_multibuild() {
    cmake_src_install

    # remove gtest remains
    edo rm "${IMAGE}"/usr/${LIBDIR}/libgtest*

    # Keep one copy of llvm-config and the config include files for each target
    if ! multibuild_default_target C ; then
        dodir "/usr/${CHOST}"/{bin,include/llvm/Config}
        edo mv "${IMAGE}"/usr/bin/llvm-config "${IMAGE}"/usr/"${CHOST}"/bin
        edo mv "${IMAGE}"/usr/include/llvm/Config/*.h \
            "${IMAGE}"/usr/"${CHOST}"/include/llvm/Config
    fi

    # Required by the clang test suite
    exeinto /usr/libexec/llvm
    doexe bin/FileCheck bin/not bin/count
}

llvm_src_install() {
    easy-multibuild_run_phase

    edo pushd "${CMAKE_SOURCE}"/utils/lit
    distutils_src_install
    edo popd

    # Replace the automatically installed ugly version with the clean version from
    # utils/lit
    edo mv "${IMAGE}"/usr/bin/{lit,llvm-lit}

    # Make sure e.g. clang will not look for tools in the build directory
    edo sed \
        -e 's:^set(LLVM_TOOLS_BINARY_DIR .*)$:set(LLVM_TOOLS_BINARY_DIR /usr/bin):' \
        -i "${IMAGE}"/usr/share/llvm/cmake/LLVMConfig.cmake
}

