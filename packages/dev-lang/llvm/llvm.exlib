# Copyright 2015 Johannes Nixdorf <mixi@exherbo.org>
# Copyright 2012 Elias Pipping <pipping@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

if ever is_scm ; then
    SCM_REPOSITORY="http://llvm.org/git/llvm.git"

    require scm-git
else
    MY_PNV=${PNV}.src
    WORK=${WORKBASE}/${MY_PNV}

    if ever at_least 3.5 ; then
        SUFFIX=xz
    else
        SUFFIX=gz
    fi

    DOWNLOADS="http://llvm.org/releases/${PV}/${MY_PNV}.tar.${SUFFIX}"
fi

# Not checked against an older version of python
require cmake [ api=2 ] distutils [ has_lib=true has_bin=true python_dep=2.7 ] easy-multibuild

export_exlib_phases src_prepare src_compile src_install

SUMMARY="The LLVM Compiler Infrastructure"
HOMEPAGE="http://llvm.org/"

LICENCES="UoI-NCSA"
SLOT="0"
MYOPTIONS="
    asserts [[ description = [ Enable assertions ] ]]
    shared-libs [[ description = [ Build libraries dynamically ] ]]
    multibuild_c: 32 64
"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        dev-python/setuptools [[ description = [ For lit ] ]]
        sys-devel/flex
    test:
        dev-lang/python:*
"

llvm_src_prepare() {
    edo pushd "${CMAKE_SOURCE}"

    # Fix the use of dot
    edo sed -e 's/@DOT@//g' -i docs/doxygen.cfg.in

    if ever at_least scm ; then
        # expect some tests to fail for everything except the default class
        local xfail_line="" target
        for target in ${MULTIBUILD_C_TARGETS} ; do
            if ! multibuild_default_target C ${target}; then
                xfail_line+=",$(multibuild_get_var C ${target} CHOST)"
            fi
        done
        if [[ -n "${xfail_line}" ]]; then
            xfail_line="XFAIL: ${xfail_line#,}"
            local file
            # gold tests won't work since our system ld isn't multibuilt
            for file in test/tools/gold/*.ll ; do
                edo sed \
                    -e "1 i\\; ${xfail_line}" \
                    -i "${file}"
            done
        fi
    else
        expatch "${FILES}"/${PN}-fix-llvm-config.patch
        expatch "${FILES}"/llvm-config-path-v3.patch
    fi

    if ever at_least 3.4 && ! ever at_least 3.5; then
        expatch "${FILES}"/llvm-config-path-3.4.patch
    fi

    default
    edo popd
}

configure_one_multibuild() {
    # the jit tests segfault when a i686 build is built with the
    # wrong LLVM_DEFAULT_TARGET_TRIPLE which happens on x86_64

    # TODO(compnerd) hidden inline visibility causes test tools to fail to build as a required
    # method is hidden; move the definition out of line, and export the interface
    local args=(
        -DBUILD_SHARED_LIBS:BOOL=$(option shared-libs TRUE FALSE)
        -DLLVM_BINUTILS_INCDIR:STRING=/usr/include
        -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=${CHOST}
        -DLLVM_ENABLE_ASSERTIONS:BOOL=$(option asserts TRUE FALSE)
        -DLLVM_INCLUDE_TESTS:BOOL=$(expecting_tests TRUE FALSE)
        -DLLVM_LIBDIR_SUFFIX:STRING=${LIBDIR#lib}
        -DSUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG:BOOL=NO
    )

    ecmake "${args[@]}"
}

llvm_src_compile() {
    easy-multibuild_run_phase

    edo pushd "${CMAKE_SOURCE}"/utils/lit
    distutils_src_compile
    edo popd
}

install_one_multibuild() {
    cmake_src_install

    # Keep one copy of llvm-config and the config include files for each target
    edo mv "${IMAGE}"/usr/include/llvm/Config/llvm-config{,-${MULTIBUILD_TARGET}}.h
    edo mv "${IMAGE}"/usr/share/llvm/cmake/LLVMConfig{,-${MULTIBUILD_TARGET}}.cmake
    # rename with a leading _, as cmake insists on deleting LLVMExports-*.cmake when installing for
    # the next target
    edo mv "${IMAGE}"/usr/share/llvm/cmake/{LLVMExports-none,_LLVMExports-none-${MULTIBUILD_TARGET}}.cmake

    # remove llvm's copy of gtest; clang should use the system gtest library
    expecting_tests && edo rm "${IMAGE}"/usr/${LIBDIR}/libgtest*

    # Use our system copy of llvm-lit instead of expecting the llvm sources to be present in the
    # file system. This is currently needed for clang.
    # NOTE: patching this before this point breaks compilation, so don't try it
    edo sed \
        -e 's:set (LIT_COMMAND .*):find_program(LIT_COMMAND llvm-lit):' \
        -i "${IMAGE}"/usr/share/llvm/cmake/AddLLVM.cmake

    # this makes e.g. mesa automatically pick up the right llvm-config
    edo mv "${IMAGE}"/usr/bin/{,${CHOST}-}llvm-config
    multibuild_default_target C && dosym ${CHOST}-llvm-config /usr/bin/llvm-config

    # Make sure e.g. clang will not look for tools in the build directory
    edo sed \
        -e 's:^set(LLVM_TOOLS_BINARY_DIR .*)$:set(LLVM_TOOLS_BINARY_DIR /usr/bin):' \
        -i "${IMAGE}"/usr/share/llvm/cmake/LLVMConfig-${MULTIBUILD_TARGET}.cmake

    # Required by the clang test suite
    exeinto /usr/libexec/llvm
    doexe bin/FileCheck bin/not bin/count
}

llvm_src_install() {
    easy-multibuild_run_phase

    insinto /usr/include/llvm/Config
    doins "${FILES}"/llvm-config.h
    insinto /usr/share/llvm/cmake
    doins "${FILES}"/{LLVMConfig.cmake,LLVMExports-none.cmake}

    edo pushd "${CMAKE_SOURCE}"/utils/lit
    distutils_src_install
    edo popd

    # Replace the automatically installed ugly version with the clean version from
    # utils/lit
    edo mv "${IMAGE}"/usr/bin/{lit,llvm-lit}
}

