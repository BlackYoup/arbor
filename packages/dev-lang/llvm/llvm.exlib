# Copyright 2008, 2009, 2010, 2011 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require multilib toolchain-funcs

export_exlib_phases pkg_setup src_prepare src_configure src_test src_install

SUMMARY="Low Level Virtual Machine (LLVM)"
DESCRIPTION="
Low-Level Virtual Machine (LLVM) is a compiler infrastructure designed for
compile-time, link-time, run-time, and 'idle-time' optimization of programs
from arbitrary programming languages. It currently supports compilation of C,
Objective-C, and C++ programs, using front-ends derived from GCC 4.0, GCC 4.2,
and a custom new front-end, 'clang'. It supports x86, x86_64, ia64, PowerPC,
and SPARC, with support for Alpha and ARM under development.

Some of the goals of clang include the following:
- End-User Features
  Fast compiles and low memory use
  Expressive diagnostics (examples)
  GCC compatibility
- Utility and Applications
  Modular library based architecture
  Support diverse clients (refactoring, static analysis, code generation, etc)
  Allow tight integration with IDEs
  Use the LLVM 'BSD' License
- Internal Design and Implementation
  A real-world, production quality compiler
  A simple and hackable code base
  A single unified parser for C, Objective C, C++, and Objective C++
  Conformance with C/C++/ObjC and their variants
"
HOMEPAGE="http://llvm.org/"
DOWNLOADS="
    ${HOMEPAGE}/releases/${PV}/${PNV}.tgz
    clang? ( ${HOMEPAGE}/releases/${PV}/clang-${PV}.tgz )
"

LICENCES="UoI-NCSA"
SLOT="0"
MYOPTIONS="clang gold"

if ! ever is_scm; then
    MYOPTIONS+=" doc"
fi

GCC_VERSION="4.4.5"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-devel/flex
    build+run:
        clang? ( sys-devel/gcc[~${GCC_VERSION}] )
        gold? ( sys-devel/binutils[>=2.21][gold(+)] )
"

if ! ever is_scm; then
    DEPENDENCIES+="
    build:
        doc? (
            app-doc/doxygen
            media-gfx/graphviz
        )
"
fi

BUGS_TO="ingmar@exherbo.org"

REMOTE_IDS="freshmeat:${PN}"

UPSTREAM_DOCUMENTATION="http://llvm.org/docs [[ lang = en ]]"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}/releases/${PV}/docs/ReleaseNotes.html"

DEFAULT_SRC_COMPILE_PARAMS=( VERBOSE=1 )

llvm_pkg_setup() {
    eval "$(ROOT=/ eclectic gcc script 4.4)"
}

llvm_src_prepare() {
    if option clang; then
        ever is_scm || edo mv "${WORKBASE}/clang-${PV}" "${WORK}/tools/clang"
        edo sed \
            -e "/Exherbo/{N;N;N;s/4\.4\.3/${GCC_VERSION}/g}" \
            -i tools/clang/lib/Frontend/InitHeaderSearch.cpp
        edo sed \
            -e "/^PROJ_headers :=/s|/lib/|/$(get_libdir)/|" \
            -i tools/clang/lib/Headers/Makefile
    fi
    default
}

llvm_src_configure() {
    econf \
        --enable-shared \
        --enable-optimized \
        --hates=docdir \
        --with-cxx-include-arch="${CHOST}" \
        --with-cxx-include-root="/usr/include/c++/${GCC_VERSION}/" \
        $(option_with clang built-clang) \
        $(option gold && echo --with-binutils-include=/usr/include) \
        $(ever is_scm || option_enable doc doxygen)
}

llvm_src_test() {
    emake check
    option clang && emake test -C tools/clang
}

llvm_src_install() {
    emake install \
        DESTDIR="${IMAGE}" \
        KEEP_SYMBOLS=1 \
        PROJ_docsdir=/usr/share/doc/${PNVR} \
        PROJ_libdir=/usr/$(get_libdir) \
        VERBOSE=1

    if option gold ; then
        # Make sure nm and ar find the gold plugin
        dodir /usr/${CHOST}/lib/bfd-plugins
        dosym /usr/$(get_libdir)/libLLVMgold.so /usr/${CHOST}/lib/bfd-plugins
    fi
}

