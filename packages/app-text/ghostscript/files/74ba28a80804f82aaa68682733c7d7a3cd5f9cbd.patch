From 74ba28a80804f82aaa68682733c7d7a3cd5f9cbd Mon Sep 17 00:00:00 2001
From: Ken Sharp <ken.sharp@artifex.com>
Date: Wed, 14 Oct 2015 15:23:06 +0100
Subject: [PATCH] pdfwrite - guard against NULL pointer dereference and correct
 a loop

Bug #696275 "-dFastWebView parameter crashes Ghostscript"

This is a twofold fix. A Coverity static analysis fix added some return
checking, but this happened inside a faulty loop, the code should not have
been executed. Because the return value wasn't checked, this didn't cause a
problem......

Checking the return value meant that we returned an error to the caller, and
an oversight there could lead to us dereferencing a pointer which had not
been allocated.

This commit fixes both of these problems.

No differences expected.
---
 devices/vector/gdevpdf.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/devices/vector/gdevpdf.c b/devices/vector/gdevpdf.c
index aa98061..478c1f6 100644
--- a/devices/vector/gdevpdf.c
+++ b/devices/vector/gdevpdf.c
@@ -1547,7 +1547,7 @@ rewrite_object(gx_device_pdf *const pdev, pdf_linearisation_t *linear_params, in
         }
     } while (target);
 
-    do {
+    while (Size) {
         if (Size > ScratchSize) {
             code = fread(Scratch, ScratchSize, 1, linear_params->sfile);
             if (code != 1)
@@ -1561,7 +1561,7 @@ rewrite_object(gx_device_pdf *const pdev, pdf_linearisation_t *linear_params, in
             fwrite(Scratch, Size, 1, linear_params->Lin_File.file);
             Size = 0;
         }
-    } while (Size);
+    };
 
     gs_free_object(pdev->pdf_memory, Scratch, "Free working memory for object rewriting");
     return 0;
@@ -2313,7 +2313,7 @@ error:
     for (i=0;i<pdev->next_page;i++) {
         page_hint_stream_t *pagehint = &linear_params->PageHints[i];
 
-        if (pagehint->SharedObjectRef)
+        if (pagehint && pagehint->SharedObjectRef)
             gs_free_object(pdev->pdf_memory, pagehint->SharedObjectRef, "Free Shared object references");
     }
 
-- 
2.5.1

