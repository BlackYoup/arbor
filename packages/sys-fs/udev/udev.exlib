# Copyright 2010-2012 Wulf C. Krueger <philanthrop@exherbo.org>
# Copyright 2008 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

if ever is_scm ; then
    SCM_REPOSITORY="git://git.kernel.org/pub/scm/linux/hotplug/udev.git"
    require scm-git
elif ever at_least 177; then
    DOWNLOADS="mirror://kernel/linux/utils/kernel/hotplug/${PNV}.tar.xz"
else
    DOWNLOADS="mirror://kernel/linux/utils/kernel/hotplug/${PNV}.tar.bz2"
fi

require autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.12 1.11 ] ]
require easy-multibuild systemd-service

export_exlib_phases pkg_pretend src_prepare src_configure src_install pkg_postinst

SUMMARY="Dynamic userspace /dev manager for Linux"
DESCRIPTION="
udev provides Linux systems with a dynamic /dev directory and features the ability
to have persistent device names. It uses sysfs and runs entirely in userspace.
"
HOMEPAGE="http://git.kernel.org/?p=linux/hotplug/udev.git;a=summary"
BUGS_TO="philantrop@exherbo.org"
REMOTE_IDS="freshmeat:${PN}"
LICENCES="( GPL-2 LGPL-2 )"
SLOT="0"

MYOPTIONS="
    baselayout
    glib [[ description = [ build gudev to integrate with glib main-loop ] ]]
    gobject-introspection [[ requires = [ glib ] ]]
    systemd [[ description = [ install systemd service files ] ]]
"

if ! ever at_least 182 ; then
    MYOPTIONS+="
        acl [[ requires = [ glib -systemd ] ]]
    "
fi

MYOPTIONS+="
    multibuild_c: 32 64
    platform: ia64
" # ppc s390

DEPENDENCIES="
    build:
        dev-libs/libxslt
        app-doc/gtk-doc-autotools[>=1.15-r1]
    build+run:
        dev-util/gperf[>=3.0.4]
        sys-apps/pciutils
        sys-apps/usbutils[>=0.82]
        sys-apps/util-linux[>=2.20][multibuild_c:*(-)?]
        glib? ( dev-libs/glib:2[>=2.22.0][multibuild_c:*(-)?] )
        gobject-introspection? ( gnome-desktop/gobject-introspection:1[>=0.6.2] )
    run:
        group/dialout
    suggestion:
        glib? ( sys-auth/ConsoleKit[>=0.4.1] )
"

if ever at_least 177; then
    DEPENDENCIES+="
        build:
            app-arch/xz[multibuild_c:*(-)?]
        build+run:
            sys-apps/kmod[>=3][multibuild_c:*(-)?]
    "
fi

if ever at_least 181; then
    DEPENDENCIES+="
        build+run:
            sys-apps/kmod[>=5][multibuild_c:*(-)?]
    "
fi

if ! ever at_least 182 ; then
    DEPENDENCIES+="
        build+run:
            acl? ( sys-apps/acl[>=2.2.49][multibuild_c:*(-)?] )
    "
fi

AT_M4DIR=( m4 )

udev_pkg_pretend() {
    local f nuke_f=()
    for f in "${ROOT%%/}"/etc/init.d/udev{,-mount,-dev-tarball}; do
        [[ -e ${f} ]] && nuke_f+=( "${f}" )
    done

    if [[ -n ${nuke_f[@]} ]]; then
        echo >&2
        ewarn "The following Exherbo provided init scripts have been removed as of udev[=160]."
        for f in "${nuke_f[@]}"; do
            ewarn "    ${f}"
        done
        ewarn "Since they are under config protection you need to remove them manually."
    fi
}

udev_src_prepare() {
    edo gtkdocize --copy
    autotools_src_prepare
}

configure_one_multibuild() {
    local myconf=()

    if ever at_least 177; then
        myconf+=(
            --libexecdir=/${LIBDIR}
            --with-rootprefix=
        )
    else
        myconf+=(
            --libexecdir=/${LIBDIR}/udev
        )
    fi

    myconf+=(
        --bindir=/sbin
        --sbindir=/sbin
        --enable-static
        --with-rootlibdir=/${LIBDIR}
        --without-selinux
        $(option_enable glib gudev)
        $(option_enable gobject-introspection introspection)
        $(option_with systemd systemdsystemunitdir ${SYSTEMDSYSTEMUNITDIR})
    )

    if ! ever at_least 182 ; then
        myconf+=(
            --enable-edd
            $(option_enable acl udev_acl)
        )
    fi

    if ! ever at_least 177 ; then
        myconf+=(
            --enable-hwdb
        )
    fi

    econf "${myconf[@]}"
}

udev_src_configure() {
    easy-multibuild_src_configure
}

install_one_multibuild() {
    default
    keepdir /${LIBDIR}/udev/{devices,state}
}

udev_src_install() {
    easy-multibuild_src_install

    keepdir /etc/udev/rules.d

    # platform rules {{{
    insinto /${LIBDIR}/udev/rules.d

    option platform:ia64 && doins "rules/arch/40-ia64.rules"
    # }}}

    # module loading configuration {{{
    insinto /etc/modprobe.d

    doins "${FILES}"/blacklist.conf
    doins "${FILES}"/pnp-aliases.conf
    # }}}

    # config protect {{{
    hereenvd 20udev <<EOT
CONFIG_PROTECT_MASK="/${LIBDIR}/udev/rules.d"
EOT
    # }}}

    # fix lib paths {{{
    if [[ ${LIBDIR} != lib ]] ; then
        if option glib && [[ -d ${IMAGE}/usr/lib/ConsoleKit ]] ; then
            edo mv "${IMAGE}"/usr/{lib,${LIBDIR}}/ConsoleKit
        fi
        [[ -d ${IMAGE}/usr/lib ]] && edo rmdir "${IMAGE}"/usr/lib
    fi
    # }}}

    # baselayout init scripts {{{
    if option baselayout; then
        doinitd "${FILES}"/udev-postmount

        insinto /${LIBDIR}/rcscripts/addons

        doins "${FILES}"/udev-start.sh
        doins "${FILES}"/udev-stop.sh

        edo sed -e "s,@@libdir@@,${LIBDIR},g"                          \
                -i "${IMAGE}"/${LIBDIR}/rcscripts/addons/udev-start.sh \
                -i "${IMAGE}"/${LIBDIR}/rcscripts/addons/udev-stop.sh
    fi
    # }}}

    # Create a compatibility symlink from /${LIBDIR}/udev/udevd to /sbin/udevd.
    dosym /${LIBDIR}/udev/udevd /sbin/udevd
}

udev_pkg_postinst() {
    # If root is not the root of the filesystem, we are not merging to the system image, and we
    # should not restart the udev process
    [[ "${ROOT}" == "/" ]] || return

    # if the root of init does not match our root, we are in a chroot and should not perform the
    # restart of the udev process
    [[ -r /proc/1/root && /proc/1/root -ef /proc/self/root/ ]] || return

    # No need to ewarn or something because udevd might not be running.
    nonfatal edo pkill -TERM udevd
    nonfatal edo sleep 1
    nonfatal edo pkill -KILL udevd

    # Change the wait mode to wait/eldest so
    # sydbox doesn't wait for udevd to exit.
    esandbox wait_eldest

    # Allow access to /run/udev/control for udevd
    esandbox allow_net unix:/run/udev/control

    nonfatal edo /sbin/udevd --daemon || ewarn "udevd couldn't be restarted."
}

