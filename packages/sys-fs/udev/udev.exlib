# Copyright 2010 Wulf C. Krueger <philanthrop@exherbo.org>
# Copyright 2008 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

if ever is_scm ; then
    SCM_REPOSITORY="git://git.kernel.org/pub/scm/linux/hotplug/udev.git"
    require scm-git
else
    DOWNLOADS="mirror://kernel/linux/utils/kernel/hotplug/${PNV}.tar.bz2"
fi

require multilib autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.11 ] ]

export_exlib_phases pkg_pretend src_prepare src_install pkg_postinst

SUMMARY="Dynamic userspace /dev manager for Linux"
DESCRIPTION="
udev provides Linux systems with a dynamic /dev directory and features the ability
to have persistent device names. It uses sysfs and runs entirely in userspace.
"
HOMEPAGE="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"
BUGS_TO="philantrop@exherbo.org"
REMOTE_IDS="freshmeat:${PN}"
LICENCES="( GPL-2 LGPL-2 )"
SLOT="0"

MYOPTIONS="
    baselayout
    extras [[ description = [ Extras for mobile devices (and then some), e. g. special keymaps ] ]]
    glib [[ description = [ build gudev to integrate with glib main-loop ] ]]
    gobject-introspection [[ requires = [ glib ] ]]
    sound [[ description = [ install extra rules for sound cards ] ]]
    systemd [[ description = [ install systemd service files ] ]]
    platform: ia64
" # ppc s390

DEPENDENCIES="
    build:
        dev-libs/libxslt
        app-doc/gtk-doc-autotools[>=1.15-r1]
    build+run:
        extras? (
            dev-libs/libusb:0.1[>=0.1.12]
            dev-util/gperf[>=3.0.4]
            sys-apps/acl[>=2.2.49]
            sys-apps/usbutils[>=0.82]
        )
        glib? ( dev-libs/glib:2[>=2.22.0] )
        gobject-introspection? ( gnome-desktop/gobject-introspection:1[>=0.6.2] )
        sound? (
            sys-apps/pciutils
            sys-apps/usbutils
        )
    suggestion:
        glib? ( sys-auth/ConsoleKit[>=0.4.1] )
"

DEFAULT_SRC_CONFIGURE_PARAMS=(
    --libexecdir=/$(get_libdir)/udev
    --sbindir=/sbin
    --enable-static
    --with-rootlibdir=/$(get_libdir)
    --without-selinux
)

DEFAULT_SRC_CONFIGURE_OPTION_ENABLES=(
    extras
    "glib gudev"
    "gobject-introspection introspection"
    "sound pci-db"
    "sound sound-rules"
    "sound usb-db"
)

DEFAULT_SRC_CONFIGURE_OPTION_WITHS=( "systemd systemdsystemunitdir /$(get_libdir)/systemd/system" )

AT_M4DIR=( m4 )

udev_pkg_pretend() {
    local f nuke_f=()
    for f in "${ROOT%%/}"/etc/init.d/udev{,-mount,-dev-tarball}; do
        [[ -e ${f} ]] && nuke_f+=( "${f}" )
    done

    if [[ -n ${nuke_f[@]} ]]; then
        echo >&2
        ewarn "The following Exherbo provided init scripts have been removed as of udev[=160]."
        for f in "${nuke_f[@]}"; do
            ewarn "    ${f}"
        done
        ewarn "Since they are under config protection you need to remove them manually."
    fi
}

udev_src_prepare() {
    edo gtkdocize --copy
    autotools_src_prepare
}

udev_src_install() {
    default

    keepdir /etc/udev/rules.d /$(get_libdir)/udev/{devices,state}

    # platform rules {{{
    insinto /$(get_libdir)/udev/rules.d

    option platform:ia64 && doins "rules/arch/40-ia64.rules"
    # }}}

    # module loading configuration {{{
    insinto /etc/modprobe.d

    doins "${FILES}"/blacklist.conf
    doins "${FILES}"/pnp-aliases.conf
    # }}}

    # config protect {{{
    hereenvd 20udev <<EOT
CONFIG_PROTECT_MASK=\"/$(get_libdir)/udev/rules.d\"
EOT
    # }}}

    # fix lib paths {{{
    if [[ $(get_libdir) != lib ]] ; then
        if option glib && [[ -d ${IMAGE}/usr/lib/ConsoleKit ]] ; then
            edo mv "${IMAGE}"/usr/{lib,$(get_libdir)}/ConsoleKit
        fi
        [[ -d ${IMAGE}/usr/lib ]] && edo rmdir "${IMAGE}"/usr/lib
    fi
    # }}}

    # baselayout init scripts {{{
    if option baselayout; then
        doinitd "${FILES}"/udev-postmount

        insinto /$(get_libdir)/rcscripts/addons

        doins "${FILES}"/udev-start.sh
        doins "${FILES}"/udev-stop.sh

        edo sed -e "s,@@libdir@@,$(get_libdir),g"                           \
                -i "${IMAGE}"/$(get_libdir)/rcscripts/addons/udev-start.sh  \
                -i "${IMAGE}"/$(get_libdir)/rcscripts/addons/udev-stop.sh
    fi
    # }}}
}

udev_pkg_postinst() {
    [[ "${ROOT}" == "/" ]] || return

    pkill -TERM udevd &> /dev/null
    sleep 1
    pkill -KILL udevd &> /dev/null

    # Change the wait mode to wait/eldest so
    # sydbox doesn't wait for udevd to exit.
    sydboxcmd wait/eldest

    # Allow network access for udevd
    sydboxcmd net/whitelist/bind/unix-abstract:///org/kernel/udev/udevd
    sydboxcmd net/whitelist/connect/unix:///dev/log

    /sbin/udevd --daemon
    /sbin/udevadm info --convert-db
}

