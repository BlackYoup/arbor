# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2010, 2012 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases pkg_pretend pkg_setup src_unpack src_prepare src_configure src_install pkg_preinst pkg_postinst

myexparam source_uri="mirror://gnu/${PN}/${PNV}.tar.bz2"
if ! ever at_least 2.17; then
    myexparam ports_uri="mirror://gnu/${PN}/${PN}-ports-${PV}.tar.bz2"
else
    myexparam ports_uri=""
fi

require multibuild flag-o-matic systemd-service [ systemd_files=[ nscd.service ] ] kernel
# TODO(compnerd) add exparam to run eautoconf

SUMMARY="GNU C library"
HOMEPAGE="http://www.gnu.org/software/libc"

exparam -v source_uri source_uri
exparam -v ports_uri ports_uri

myexparam minimum_kernel_version="2.6.22"
exparam -v MINIMUM_KERNEL_VERSION minimum_kernel_version

DOWNLOADS="${source_uri} ${ports_uri}"

LICENCES="|| ( GPL-3 GPL-2 ) || ( LGPL-3 LGPL-2.1 )"
SLOT="0"
MYOPTIONS="
    systemd [[
        description = [ Install systemd service file for name service cache daemon (nscd) ]
    ]]
"

# TODO(compnerd): we need a way to handle this sort of dependency
#        $(for host in arm-exherbo-linux-gnueabi i686-pc-linux-gnu x86_64-pc-linux-gnu ; do
#            echo "hosts:${host}? ( sys-devel/static-gcc[targets:${host}] )"
#          done)
DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-apps/gawk
        sys-apps/sed
        sys-apps/texinfo
        sys-kernel/linux-headers
    run:
        sys-libs/timezone-data
"

# tests are expensive
RESTRICT=test

ECONF_SOURCE="${WORK}"
WORK="${WORKBASE}/build"

DEFAULT_SRC_INSTALL_PARAMS=( install_root="${IMAGE}" )

glibc_pkg_pretend() {
    if ! kernel_version_at_least $MINIMUM_KERNEL_VERSION ; then
        ewarn "Your currently booted kernel-version is to old ($(uname -r))."
        ewarn "If you continue you will probably break your system."
        ewarn "Please upgrade your kernel to a version >=$MINIMUM_KERNEL_VERSION"
    fi

    if [[ -f "${ROOT}etc/tmpfiles.d/nscd.conf" ]] ; then
        ewarn "The configuration file /etc/tmpfiles.d/nscd.conf has been moved to"
        ewarn "/usr/${CHOST}/lib/tmpfiles.d/nscd.conf and can be safely removed after upgrade"
        ewarn "if you did not make any changes to it."
    fi

    # TODO(compnerd) consider using filter-flags rather than dying here
    if [[ $(get-flag -ggdb3) == '-ggdb3' ]]; then
        die "Building glibc with CFLAGS=-ggdb3 is broken. Aborting."
    fi
}

glibc_pkg_setup() {
    # NOTE(compnerd) glibc doesn't compile with -Os. See bug:
    # http://sourceware.org/bugzilla/show_bug.cgi?id=5203 for details
    filter-flags -O*
    append-flags -O2

    # NOTE(compnerd) glibc doesnt build with LTO (bug 52489/51255)
    # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51255
    # reproducible with BFD ld and gold (.init_array/.fini_array is discarded by linker)
    filter-flags -flto

    # NOTE(compnerd) use -fuse-ld to specify the linker if available
    if ever at_least 4.8 $(eclectic gcc show) ; then
        filter-flags -fuse-ld*
        append-flags '-fuse-ld=bfd'
    fi
}

glibc_src_unpack() {
    default

    # TODO(compnerd) remove the ports handling once glibc[>=2.17] is the oldest version supported on
    # exherbo
    if [[ ${PV} =~ *_p* ]] ; then
        edo mv glibc-${PV/_p*}-2* glibc-${PV}
        edo mv ${PNV%%_p*}-ports-${PV##*_p} glibc-ports-${PV}
    fi

    [[ -z ${ports_uri} ]] || edo mv ${PN}-ports-${PV} "${WORKBASE}"/${PNV}/ports

    edo mkdir "${WORK}"
}

glibc_src_prepare() {
    edo cd "${ECONF_SOURCE}"
    # TODO(compnerd) convert to an exparam
    ever at_least 2.14.1-r2 && ! ever at_least 2.16 && eautoconf
    default
}

# TODO(compnerd) convert this to use multiarch.exlib
glibc_src_configure() {
    local target=$(exhost --target) build=$(exhost --build)

    if ! ever at_least 2.17 ; then
        # NOTE(compnerd) explicitly specify that the toolchain is able to emit debug
        # information for assembly routines.  This is really important as the stabs
        # fallback stabs information leaves gas unable to actually resolve symbol sizes
        # and thus breaks compilation
        cat >> "${WORKBASE}/build/config.cache" <<- EOF
libc_cv_cpp_asm_debuginfo=yes
EOF
    fi

    # NOTE(compnerd) explicitly use the BFD linker as suggested by upstream, preferring to use
    # -fuse-ld if available
    if ! ever at_least 4.8 $(eclectic gcc show) ; then
        cat >> "${WORKBASE}/build/config.cache" <<- EOF
ac_cv_prog_LD=/usr/${build}/${target}/bin/ld.bfd
libc_cv_prog_ld_gnu=yes
EOF
    fi

    # TODO(compnerd) determine how to handle non-gcc compilers
    # NOTE(compnerd) export readelf and NM explicitly because the immensely dumb configure
    # script does not bother to check for the prefixed tools!
    edo env                                                         \
    READELF="${target}-readelf"                                     \
    NM="${target}-nm"                                               \
    BUILD_CC="${build}-gcc -B/usr/${build}/${build}/bin"            \
    CC="/usr/${build}/bin/${target}-static-gcc"                     \
    CPP=/usr/${build}/bin/${target}-static-cpp                      \
    CXX="/usr/${build}/bin/${target}-static-g++"                    \
        "${WORKBASE}/${PNV}/configure"                              \
            --cache-file=config.cache                               \
            --build=${build}                                        \
            --host=${target}                                        \
            --prefix=/usr/${target}                                 \
            --datarootdir=/usr/share                                \
            --libdir=/usr/${target}/lib                             \
            --localedir=/usr/share/locale                           \
            --localstatedir=/var/$(exhost --target)                 \
            --sysconfdir=/etc                                       \
            --enable-addons                                         \
            --enable-kernel=${MINIMUM_KERNEL_VERSION}               \
            --enable-obsolete-rpc                                   \
            $(ever at_least 2.18  && echo --enable-lock-elision)    \
            $(ever at_least 2.18  && echo --enable-pt_chown)        \
            --enable-stackguard-randomization                       \
            --with-headers=/usr/${target}/include
}

glibc_src_install() {
    local conf_files=(
        "${WORKBASE}/${PNV}/nscd/nscd.conf"
        "${WORKBASE}/${PNV}/nss/nsswitch.conf"
        "${WORKBASE}/${PNV}/posix/gai.conf"
    )
    local noins_files=(
        "${IMAGE}/etc/ld.so.cache"
        "${IMAGE}/etc/localtime"
    )

    export LANGUAGE=C

    default

    ! ever at_least 2.17 && ! exhost --is-native -q && edo rmdir "${IMAGE}/usr/$(exhost --target)/libexec/getconf"

    # don't install bundled timezone info
    ever at_least 2.16.0 || edo rm -r "${IMAGE}/usr/share/zoneinfo"

    # don't install /etc/{ld.so.cache,localtime}
    edo rm -f "${noins_files[@]}"

    # install additional base configuration files
    insinto /etc
    doins "${conf_files[@]}"

    # systemd units
    if option systemd ; then
        insinto "/usr/${CHOST}/lib/tmpfiles.d"
        doins "${FILES}/systemd/nscd.conf"
        install_systemd_files
    fi

    # configure default locale
    hereenvd 02locale <<-EOF
LANG=en_GB.utf8
EOF

    # remove empty locale dirs
    edo find "${IMAGE}"/usr/share/locale/ -type d -empty -delete
}

glibc_pkg_preinst() {
    if exhost --is-native -q && [[ $(readlink -f "${ROOT##/}"/lib) == ${ROOT##/}/lib*([^/]) ]] ; then
        # NOTE(compnerd) maintain compatibility with pre-existing binaries by symlinking the loaders
        # into the legacy paths
        # TODO(compnerd) workout the set of multilib directories and symlink those across each other
        # e.g. i686-pc-linux-gnu, x86_64-pc-linux-gnu under i686-pc-linux-gnu, and x86_64-pc-linux-gnu
        local loader= cp=$(type -P cp)
        for loader in "${IMAGE}"/usr/$(exhost --target)/lib/ld-linux* ; do
            local loader_bn=$(basename "${loader}")
            if [[ -e ${ROOT}/lib/${loader_bn} ]] ; then
                nonfatal edo rm "${ROOT}/lib/${loader_bn}"
            fi &&
            nonfatal edo "${IMAGE}"/usr/${CHOST}/lib/ld-linux*.so* ${cp} "${loader}" "${ROOT}/lib/${loader_bn}" ||
                eerror cp "${loader}" "${ROOT}/lib/${loader_bn}" failed
        done

        # HACK(compnerd) preserve legacy paths for paludis
        nonfatal edo rm "${ROOT}"/sbin/ldconfig &&
        nonfatal edo cp "${IMAGE}"/usr/${CHOST}/sbin/ldconfig "${ROOT}"/sbin/ldconfig ||
            eerror cp "${IMAGE}"/usr/${CHOST}/sbin/ldconfig "${ROOT}"/sbin/ldconfig failed
    fi
}

glibc_pkg_postinst() {
    local locales=( en_US.UTF-8 en_GB.UTF-8 )
    local localedef="${ROOT}usr/${CHOST}/bin/localedef"
    local locale=

    # localedef fails if /usr/${CHOST}/lib/locale does not exist
    edo mkdir -p "${ROOT}usr/${CHOST}/lib/locale"

    for locale in "${locales[@]}" ; do
        I18NPATH="${ROOT}usr/share/i18n" nonfatal edo \
            "${localedef}" --prefix="${ROOT}" -i ${locale%.*} -f ${locale#*.} ${locale}
    done
}

