# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases pkg_pretend pkg_setup src_unpack src_prepare src_configure src_compile src_install

myexparam source_uri="mirror://gnu/${PN}/${PNV}.tar.bz2"
myexparam ports_uri="mirror://gnu/${PN}/${PN}-ports-${PV}.tar.bz2"

require multibuild flag-o-matic systemd-service [ systemd_files=[ nscd.service ] ] kernel

SUMMARY="GNU C library"
HOMEPAGE="http://www.gnu.org/software/libc"

exparam -v source_uri source_uri
exparam -v ports_uri ports_uri

myexparam minimum_kernel_version="2.6.22"
exparam -v MINIMUM_KERNEL_VERSION minimum_kernel_version

DOWNLOADS="${source_uri} ${ports_uri}"

LICENCES="|| ( GPL-3 GPL-2 ) || ( LGPL-3 LGPL-2.1 )"
SLOT="0"
MYOPTIONS="
    bootstrap
    systemd [[
        description = [ Install systemd service file for name service cache daemon (nscd) ]
    ]]
"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-apps/gawk
        sys-apps/sed
        sys-apps/texinfo
        sys-kernel/linux-headers
        bootstrap? ( sys-devel/bootstrap-gcc )
    run:
        sys-libs/timezone-data"

WORK="${WORKBASE}/build"
ECONF_SOURCE="${WORKBASE}/${PNV}"

DEFAULT_SRC_INSTALL_PARAMS=( install_root="${IMAGE}" )

glibc_pkg_pretend() {
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        if ! echo ${CFLAGS} | grep -q -- -march ; then
            ewarn "-march setting not specified for target MULTIBUILD_C: ${multibuild_c_target}; defaulting to native"
        fi
    done
    if [[ $(get-flag -ggdb3) == '-ggdb3' ]]; then
        die "Building glibc with CFLAGS=-ggdb3 is broken. Aborting."
    fi

    kernel_check_version_string

    local normalized_kernel_version=${BASH_REMATCH[1]}.${BASH_REMATCH[2]}${BASH_REMATCH[3]}${BASH_REMATCH[4]:-}

    if ! ever at_least $MINIMUM_KERNEL_VERSION ${normalized_kernel_version} ; then
        ewarn "Your currently booted kernel-version is to old ($(uname -r))."
        ewarn "If you continue you will probably break your system."
        ewarn "Please upgrade your kernel to a version >=$MINIMUM_KERNEL_VERSION"
    fi

    if [[ -f "${ROOT}"/etc/tmpfiles.d/nscd.conf ]] ; then
        ewarn "The configuration file /etc/tmpfiles.d/nscd.conf has been moved to"
        ewarn "/usr/${LIBDIR}/tmpfiles.d/nscd.conf and can be safely removed after upgrade"
        ewarn "if you did not make any changes to it."
    fi
}

glibc_pkg_setup() {
    # glibc doesn't compile with -Os. See bug:
    # http://sourceware.org/bugzilla/show_bug.cgi?id=5203 for details
    replace-flags -Os -O2
}

glibc_src_unpack() {
    default

    if [[ ${PV/_p*} != ${PV} ]] ; then
        edo mv glibc-${PV/_p*}-2* glibc-${PV}
        edo mv ${PNV%%_p*}-ports-${PV##*_p} glibc-ports-${PV}
    fi

    if [[ -n ${ports_uri} ]] ; then
        edo mv ${PN}-ports-${PV} "${WORKBASE}"/${PNV}/ports
    fi

    edo mkdir "${WORK}"
}

glibc_src_prepare() {
    if option bootstrap ; then
        sed -i -e 's:-lgcc_eh::g' "${WORKBASE}/${PNV}/Makeconfig" || die "failed to remove gcc_eh linkage"
        export PATH="/usr/bootstrap-gcc/bin:$PATH"
        export GCC="bootstrap-gcc"
    else
        export GCC="${CC}"
    fi

    default
}

glibc_src_configure() {
    if [[ $(eclectic ld show) == gold ]]; then
        edo mkdir "${TEMP}"/bin
        edo ln -sf /usr/${CHOST}/bin/ld.bfd "${TEMP}"/bin/ld
        CC="${CC} -B${TEMP}/bin/"
    fi

    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        edo mkdir "${WORK}/${multibuild_c_target}" || die "mkdir ${multibuild_c_target} failed"
        edo cd "${WORK}/${multibuild_c_target}" || die "entering ${multibuild_c_target} failed"

        echo "libc_cv_forced_unwind=yes" > config.cache
        echo "libc_cv_c_cleanup=yes" >> config.cache
        echo "libc_cv_slibdir=/${LIBDIR}" >> config.cache

        if ! echo ${CFLAGS} | grep -q -- -march ; then
            append-flags -march=native
        fi
        append-flags -O2
        # --enable-stackguard-randomization could also be enabled for <2.12.2 but needs testing
        CC="${GCC} -m${multibuild_c_target}" econf \
            --libdir="/usr/${LIBDIR}" \
            --cache-file=config.cache \
            "--enable-kernel=$MINIMUM_KERNEL_VERSION" \
            --with-headers=/usr/include \
            --with-add-ons --with-crypt \
            $(ever at_least 2.12.2 && echo "--enable-stackguard-randomization") \
            --without-gd --without-cvs
        echo "libc_cv_gnu89_inline=yes" >> config.cache
    done
}

glibc_src_compile() {
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        edo cd "${WORK}/${multibuild_c_target}" || die "entering ${multibuild_c_target} failed"

        default
    done
}

glibc_src_install() {
    export LANGUAGE=C

    # Note: the default abi must always be staged last.  We do this as the last
    # one to get staged will clobber all collisions.  In particular, this will
    # be all of the executables.  The supporting libraries (libc, nss, etc), are
    # installed into architecutre specific directories.
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        edo cd "${WORK}/${multibuild_c_target}" || die "entering ${multibuild_c_target} failed"

        default
    done

    # make ld-linux.so.2 accessible to everything that expects to find things in /lib
    local supported_c_targets=( ${MULTIBUILD_C_TARGETS} )
    if [[ ${#supported_c_targets[@]} -gt 1 ]]; then
        dosym ../lib32/ld-linux.so.2 /lib64/ld-linux.so.2
    fi

    # link every non default locale dir to the default one which is created below
    local final_libdir=${LIBDIR}
    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        if [[ "${multibuild_c_target}" != "${MULTIBUILD_C_DEFAULT_TARGET}" ]] ; then
            dosym /usr/{${final_libdir},${LIBDIR}}/locale
        fi
    done

    # localedef fails if /usr/lib/locale does not exist
    keepdir /usr/${LIBDIR}/locale

    # don't install /etc/{ld.so.cache,localtime}
    for file in "${IMAGE}/etc/ld.so.cache" "${IMAGE}/etc/localtime" ; do
        if [[ -f ${file} ]] ; then
            edo rm "${file}"
        fi
    done

    # don't install bundled timezone info
    edo rm -r "${IMAGE}/usr/share/zoneinfo"

    cd "${WORKBASE}/${PNV}"

    insinto /etc
    doins nscd/nscd.conf nss/nsswitch.conf posix/gai.conf

    # Move librt.a to /lib and link it to /usr/lib.
    edo cp -a "${IMAGE}"/usr/${LIBDIR}/librt.a "${IMAGE}"/${LIBDIR}/
    edo rm "${IMAGE}"/usr/${LIBDIR}/librt.a
    dosym /${LIBDIR}/librt.a /usr/${LIBDIR}/
    dosym /${LIBDIR}/librt.so.1 /${LIBDIR}/librt.so

    hereenvd 02locale <<EOF
LANG=en_GB.utf8
EOF

    if option systemd; then
        insinto /usr/${LIBDIR}/tmpfiles.d
        doins "${FILES}"/systemd/nscd.conf
        install_systemd_files
    fi
}

pkg_postinst() {
    mkdir -p "${ROOT}usr/${LIBDIR}/locale" || eerror "failed to create /usr/${LIBDIR}/locale"

    for lang in en_US en_GB ; do
        I18NPATH="${ROOT}usr/share/i18n" \
            nonfatal edo "${ROOT}usr/bin/localedef" --prefix="${ROOT}" -i ${lang} -f UTF-8 ${lang}.UTF-8
    done
}

