# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2010, 2012 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases pkg_pretend pkg_setup src_unpack src_prepare src_configure src_compile src_install pkg_postinst

myexparam source_uri="mirror://gnu/${PN}/${PNV}.tar.bz2"
if ! ever at_least 2.17; then
    myexparam ports_uri="mirror://gnu/${PN}/${PN}-ports-${PV}.tar.bz2"
else
    myexparam ports_uri=""
fi

require multibuild flag-o-matic systemd-service [ systemd_files=[ nscd.service ] ] kernel
require autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ none ] ]

SUMMARY="GNU C library"
HOMEPAGE="http://www.gnu.org/software/libc"

exparam -v source_uri source_uri
exparam -v ports_uri ports_uri

myexparam minimum_kernel_version="2.6.22"
exparam -v MINIMUM_KERNEL_VERSION minimum_kernel_version

DOWNLOADS="${source_uri} ${ports_uri}"

LICENCES="|| ( GPL-3 GPL-2 ) || ( LGPL-3 LGPL-2.1 )"
SLOT="0"
MYOPTIONS="
    bootstrap
    systemd [[
        description = [ Install systemd service file for name service cache daemon (nscd) ]
    ]]

    hosts:
        arm-exherbo-linux-gnueabi
        i686-pc-linux-gnu
        x86_64-pc-linux-gnu
"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-apps/gawk
        sys-apps/sed
        sys-apps/texinfo
        sys-kernel/linux-headers[hosts:*?]
        bootstrap? ( sys-devel/static-gcc )
    run:
        sys-libs/timezone-data
"

# tests are expensive
RESTRICT=test

DEFAULT_SRC_PREPARE_PATCHES=(
    "${FILES}/glibc-95f5a9a866695da4e038aa4e6ccbbfd5d9cf63b7.patch"
    "${FILES}/glibc-c57a67e03368687fc0d2ae8354cd1b347a61ea44.patch"
)
#    "${FILES}/glibc-e057a1b5930ec538c2b8abbba700a436ef2c81d5.patch"

DEFAULT_SRC_INSTALL_PARAMS=( install_root="${IMAGE}" )

glibc_pkg_pretend() {
    kernel_check_version_string
    local normalized_kernel_version=${BASH_REMATCH[1]}.${BASH_REMATCH[2]}${BASH_REMATCH[3]}${BASH_REMATCH[4]:-}
    if ! ever at_least $MINIMUM_KERNEL_VERSION ${normalized_kernel_version} ; then
        ewarn "Your currently booted kernel-version is to old ($(uname -r))."
        ewarn "If you continue you will probably break your system."
        ewarn "Please upgrade your kernel to a version >=$MINIMUM_KERNEL_VERSION"
    fi

    if [[ -f "${ROOT}/etc/tmpfiles.d/nscd.conf" ]] ; then
        ewarn "The configuration file /etc/tmpfiles.d/nscd.conf has been moved to"
        ewarn "/usr/${LIBDIR}/tmpfiles.d/nscd.conf and can be safely removed after upgrade"
        ewarn "if you did not make any changes to it."
    fi

    # TODO(compnerd) consider using filter-flags rather than dying here
    if [[ $(get-flag -ggdb3) == '-ggdb3' ]]; then
        die "Building glibc with CFLAGS=-ggdb3 is broken. Aborting."
    fi
}

glibc_pkg_setup() {
    # glibc doesn't compile with -Os. See bug:
    # http://sourceware.org/bugzilla/show_bug.cgi?id=5203 for details
    replace-flags -Os -O2

    # glibc doesnt build with LTO (bug 52489/51255)
    # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52489
    # reproducible with BFD ld and gold (.init_array/.fini_array is discarded by linker)
    filter-flags -flto
}

glibc_src_unpack() {
    default

    if [[ ${PV} =~ *_p* ]] ; then
        edo mv glibc-${PV/_p*}-2* glibc-${PV}
        edo mv ${PNV%%_p*}-ports-${PV##*_p} glibc-ports-${PV}
    fi

    if [[ -n ${ports_uri} ]] ; then
        edo mv ${PN}-ports-${PV} "${WORKBASE}"/${PNV}/ports
    fi
}

glibc_src_prepare() {
    if [[ $(eclectic ld show) == gold ]]; then
        edo mkdir "${TEMP}/bin"
        edo ln -sf /usr/${CHOST}/bin/ld.bfd "${TEMP}/bin/ld"
    fi

    # TODO(compnerd) convert to an exparam
    ever at_least 2.14.1-r2 && ! ever at_least 2.16 && eautoconf

    filter-flags -O*
    append-flags -O2

    default
}

glibc_src_configure() {
    local host=

    for host in ${CROSS_COMPILE_TARGETS} ; do
        local _CC _CXX _CFLAGS _ASFLAGS _LDFLAGS _CXXFLAGS _VAR

        if option !hosts:${host} ; then
            echo "    Cross-Compile Host: ${host} (disabled)"
            continue
        fi

        echo "    Cross-Compile Host: ${host}"

        edo mkdir -p "${WORKBASE}/build/${host}"
        edo cd "${WORKBASE}/build/${host}"

        # NOTE(compnerd) architectures which do not store the SSP canary on the
        # stack cannot have SSP enabled when bootstrapping.  The storage of the
        # canary in a TLS slot seems to require the use of libssp which can not
        # be built during a build of a standalone compiler.
        if option bootstrap ; then
            if [[ "${host}" == "powerpc64-exherbo-linux-gnueabi" ]] ; then
                cat > "${WORKBASE}/build/${host}/config.cache" <<- EOF
    libc_cv_ssp=no
EOF
            elif [[ "${host}" == "i686-pc-linux-gnu" ]] ; then
                cat > "${WORKBASE}/build/${host}/config.cache" <<- EOF
    libc_cv_ssp=no
EOF
            elif [[ "${host}" == "x86_64-pc-linux-gnu" ]] ; then
                cat > "${WORKBASE}/build/${host}/config.cache" <<- EOF
    libc_cv_ssp=no
EOF
            fi
        fi

        if ! ever at_least 2.17 ; then
            # NOTE(compnerd) explicitly specify that the toolchain is able to emit debug
            # information for assembly routines.  This is really important as the stabs
            # fallback stabs information leaves gas unable to actually resolve symbol sizes
            # and thus breaks compilation
            cat >> "${WORKBASE}/build/${host}/config.cache" <<- EOF
    libc_cv_cpp_asm_debuginfo=yes
EOF
        fi

        # TODO(compnerd) append the ld search path
        if option bootstrap ; then
            _CC=/usr/${CHOST}/bin/${host}-static-gcc
            _CXX=/usr/${CHOST}/bin/${host}-static-g++
        else
            _CC=/usr/${CHOST}/bin/${host}-gcc
            _CXX=/usr/${CHOST}/bin/${host}-g++
        fi

        _VAR=${host//-/_}_CFLAGS
        _CFLAGS="${!_VAR}"

        _VAR=${host//-/_}_ASFLAGS
        _ASFLAGS="${!_VAR}"

        _VAR=${host//-/_}_LDFLAGS
        _LDFLAGS="${!_VAR}"

        _VAR=${host//-/_}_CXXFLAGS
        _CXXFLAGS="${!_VAR}"

        # NOTE(compnerd) export readelf and NM explicitly because the immensely dumb configure
        # script does not bother to check for the prefixed tools!
        READELF=${host}-readelf                             \
        NM=${host}-nm                                       \
        BUILD_CC="cc -B/usr/${CHOST}/${CHOST}/bin"          \
        CC=${_CC}                                           \
        CXX=${_CXX}                                         \
        CFLAGS="${_CFLAGS}"                                 \
        ASFLAGS="${_ASFLAGS}"                               \
        LDFLAGS="${_LDFLAGS}"                               \
        CXXFLAGS="${_CXXFLAGS}"                             \
            "${WORKBASE}/${PNV}/configure"                  \
                --cache-file=config.cache                   \
                --build=${CHOST}                            \
                --host=${host}                              \
                --prefix=/usr/${host}                       \
                --datarootdir=/usr/share                    \
                --libdir=/usr/${host}/lib                   \
                --localedir=/usr/share/locale               \
                --localstatedir=/var                        \
                --sysconfdir=/etc                           \
                --enable-addons                             \
                --enable-kernel=${MINIMUM_KERNEL_VERSION}   \
                --enable-obsolete-rpc                       \
                --enable-stackguard-randomization           \
                --with-headers=/usr/${host}/include || die
    done
}

glibc_src_compile() {
    local host=

    for host in ${CROSS_COMPILE_TARGETS} ; do
        if option !hosts:${host} ; then
            echo "    Cross-Compile Host: ${host} (disabled)"
            continue
        fi

        echo "    Cross-Compile Host: ${host}"

        edo cd "${WORKBASE}/build/${host}"
        default
    done
}

glibc_src_install() {
    local conf_files=(
        "${WORKBASE}/${PNV}/nscd/nscd.conf"
        "${WORKBASE}/${PNV}/nss/nsswitch.conf"
        "${WORKBASE}/${PNV}/posix/gai.conf"
    )
    local noins_files=(
        "${IMAGE}/etc/ld.so.cache"
        "${IMAGE}/etc/localtime"
    )
    local host=

    export LANGUAGE=C

    for host in ${CROSS_COMPILE_TARGETS} ; do
        local loader=

        if option !hosts:${host} ; then
            echo "    Cross-Compile Host: ${host} (disabled)"
            continue
        fi

        echo "    Cross-Compile Host: ${host}"

        edo cd "${WORKBASE}/build/${host}"
        default

        # NOTE(compnerd) maintain compatibility with pre-existing binaries by symlinking the loaders
        # into the legacy paths
        for loader in "${IMAGE}"/usr/${host}/lib/ld* ; do
            edo mkdir -p "${IMAGE}/${LIBDIR}"
            edo ln -s "${loader##${IMAGE}}" "${IMAGE}/${LIBDIR}/${loader##*/}"
        done
    done

    # NOTE(compnerd) preserve legacy paths for paludis
    edo dosym /usr/${CHOST}/sbin/ldconfig /sbin/ldconfig

    # don't install bundled timezone info
    ever at_least 2.16.0 || edo rm -r "${IMAGE}/usr/share/zoneinfo"

    # don't install /etc/{ld.so.cache,localtime}
    edo rm -f "${noins_files[@]}"

    # install additional base configuration files
    insinto /etc
    doins "${conf_files[@]}"

    # systemd units
    if option systemd ; then
        insinto "/usr/${LIBDIR}/tmpfiles.d"
        doins "${FILES}/systemd/nscd.conf"
        install_systemd_files
    fi

    # configure default locale
    hereenvd 02locale <<-EOF
LANG=en_GB.utf8
EOF
}

glibc_pkg_postinst() {
    local locales=( en_US.UTF-8 en_GB.UTF-8 )
    local localedef="${ROOT}usr/${CHOST}/bin/localedef"
    local locale=

    # localedef fails if /usr/${CHOST}/lib/locale does not exist
    edo mkdir -p "${ROOT}usr/${CHOST}/lib/locale"

    for locale in "${locales[@]}" ; do
        I18NPATH="${ROOT}usr/share/i18n" nonfatal edo \
            "${localedef}" --prefix="${ROOT}" -i ${locale%.*} -f ${locale#*.} ${locale}
    done
}

