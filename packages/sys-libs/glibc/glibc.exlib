# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases pkg_pretend src_unpack src_prepare src_configure src_compile src_install

myexparam source_uri="mirror://gnu/${PN}/${PNV}.tar.bz2"
if ! ever at_least 2.17; then
    myexparam ports_uri="mirror://gnu/${PN}/${PN}-ports-${PV}.tar.bz2"
else
    myexparam ports_uri=""
fi

require multibuild flag-o-matic systemd-service [ systemd_files=[ nscd.service ] ] kernel
require autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ none ] ]

SUMMARY="GNU C library"
HOMEPAGE="http://www.gnu.org/software/libc"

exparam -v source_uri source_uri
exparam -v ports_uri ports_uri

myexparam minimum_kernel_version="2.6.22"
exparam -v MINIMUM_KERNEL_VERSION minimum_kernel_version

DOWNLOADS="${source_uri} ${ports_uri}"

LICENCES="|| ( GPL-3 GPL-2 ) || ( LGPL-3 LGPL-2.1 )"
SLOT="0"
MYOPTIONS="
    bootstrap
    systemd [[
        description = [ Install systemd service file for name service cache daemon (nscd) ]
    ]]
"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-apps/gawk
        sys-apps/sed
        sys-apps/texinfo
        sys-kernel/linux-headers
        bootstrap? ( sys-devel/bootstrap-gcc )
    run:
        sys-libs/timezone-data"

# tests are expensive
RESTRICT=test

WORK="${WORKBASE}/build"
ECONF_SOURCE="${WORKBASE}/${PNV}"

DEFAULT_SRC_INSTALL_PARAMS=( install_root="${IMAGE}" )

glibc_pkg_pretend() {
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        if ! [[ ${CFLAGS} =~ -march|-mcpu ]]; then
            ewarn "-march or -mcpu setting not specified for target MULTIBUILD_C: ${multibuild_c_target}; defaulting to -march=native"
        fi
    done

    # TODO(compnerd) consider using filter-flags rather than dying here
    if [[ $(get-flag -ggdb3) == '-ggdb3' ]]; then
        die "Building glibc with CFLAGS=-ggdb3 is broken. Aborting."
    fi

    kernel_check_version_string

    local normalized_kernel_version=${BASH_REMATCH[1]}.${BASH_REMATCH[2]}${BASH_REMATCH[3]}${BASH_REMATCH[4]:-}

    if ! ever at_least $MINIMUM_KERNEL_VERSION ${normalized_kernel_version} ; then
        ewarn "Your currently booted kernel-version is to old ($(uname -r))."
        ewarn "If you continue you will probably break your system."
        ewarn "Please upgrade your kernel to a version >=$MINIMUM_KERNEL_VERSION"
    fi

    if [[ -f "${ROOT}etc/tmpfiles.d/nscd.conf" ]] ; then
        ewarn "The configuration file /etc/tmpfiles.d/nscd.conf has been moved to"
        ewarn "/usr/${LIBDIR}/tmpfiles.d/nscd.conf and can be safely removed after upgrade"
        ewarn "if you did not make any changes to it."
    fi
}

glibc_src_unpack() {
    default

    # TODO(compnerd) remove ports handling once glibc[>=2.17] is the oldest version supported
    if [[ ${PV/_p*} != ${PV} ]] ; then
        edo mv glibc-${PV/_p*}-2* glibc-${PV}
        edo mv ${PNV%%_p*}-ports-${PV##*_p} glibc-ports-${PV}
    fi
    [[ -z ${ports_uri} ]] || edo mv ${PN}-ports-${PV} "${WORKBASE}"/${PNV}/ports

    edo mkdir "${WORK}"
}

glibc_src_prepare() {
    if option bootstrap ; then
        edo sed -i -e 's:-lgcc_eh::g' "${WORKBASE}/${PNV}/Makeconfig"
        export PATH="/usr/bootstrap-gcc/bin:${PATH}"
        export GCC="bootstrap-gcc"
    else
        export GCC="${CC}"
    fi

    # TODO(compnerd) make this an exparam
    ever at_least 2.14.1-r2 && ! ever at_least 2.16 && eautoconf
    default
}

glibc_src_configure() {
    local multibuild_c_target

    # NOTE(compnerd) explicitly use the BFD linker as suggested by upstream; prefer to use -fuse-ld
    # if available
    if ! ever at_least 4.8 $(eclectic gcc show) ; then
        if [[ $(eclectic ld show) == gold ]]; then
            edo mkdir -p "${TEMP}/bin"
            edo ln -sf "/usr/${CHOST}/bin/ld.bfd" "${TEMP}/bin/ld"
            edo ln -sf "/usr/${CHOST}/bin/ld.bfd" "${TEMP}/bin/${CHOST}-ld"
            GCC="${GCC} -B${TEMP}/bin/"
        fi
    fi

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        # NOTE(compnerd) glibc doesn't compile with -Os. See bug:
        # http://sourceware.org/bugzilla/show_bug.cgi?id=5203 for details
        # Upstream recommends (read: requires) always building with -O2
        filter-flags -O*
        append-flags -O2

        # NOTE(compnerd) glibc doesnt build with LTO (bug 52489/51255)
        # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52489
        # reproducible with BFD ld and gold (.init_array/.fini_array is discarded by linker)
        filter-flags -flto

        # NOTE(compnerd) use -fuse-ld to specify the linker (available in GCC 4.8+)
        if ever at_least 4.8 $(eclectic gcc show) ; then
            filter-flags -fuse-ld*
            append-flags '-fuse-ld=bfd'
        fi

        [[ ${CFLAGS} =~ -march|-mcpu ]] || append-flags -march=native

        edo mkdir "${WORK}/${multibuild_c_target}"
        edo cd "${WORK}/${multibuild_c_target}"

        cat > config.cache <<- EOF
libc_cv_forced_unwind=yes
libc_cv_c_cleanup=yes
libc_cv_gnu89_inline=yes
libc_cv_ssp=no
libc_cv_slibdir=/${LIBDIR}
EOF

        if ! ever at_least 2.17 ; then
            # NOTE(compnerd) explicitly specify that the toolchain is capable of emitting debug
            # information for assembly routines.  This is important as the fallback STABS does not
            # match exactly, and leaves GAS unable to actually resolve symbol sizes
            cat >> config.cache <<- EOF
ac_cv_cpp_asm_debuginfo=yes
EOF
        fi

        BUILD_CC=${CC} CC="${GCC} -m${multibuild_c_target}"                 \
            econf --cache-file=config.cache                                 \
                  --libdir="/usr/${LIBDIR}"                                 \
                  --with-add-ons                                            \
                  --enable-kernel=${MINIMUM_KERNEL_VERSION}                 \
                  $(ever at_least 2.14.1-r2 && echo --enable-obsolete-rpc)  \
                  --enable-stackguard-randomization                         \
                  --with-headers=/usr/include                               \
                  --with-crypt                                              \
                  --without-gd                                              \
                  --without-cvs
    done
}

glibc_src_compile() {
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        edo cd "${WORK}/${multibuild_c_target}"
        default
    done
}

glibc_src_install() {
    local conf_files=(
        "${WORKBASE}/${PNV}/nscd/nscd.conf"
        "${WORKBASE}/${PNV}/nss/nsswitch.conf"
        "${WORKBASE}/${PNV}/posix/gai.conf"
    )
    local noinst_files=(
        "${IMAGE}/etc/ld.so.cache"
        "${IMAGE}/etc/localtime"
    )

    export LANGUAGE=C

    # Note: the default abi must always be staged last.  We do this as the last
    # one to get staged will clobber all collisions.  In particular, this will
    # be all of the executables.  The supporting libraries (libc, nss, etc), are
    # installed into architecutre specific directories.
    local multibuild_c_target

    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        edo cd "${WORK}/${multibuild_c_target}"
        default
    done

    # make ld-linux.so.2 accessible to everything that expects to find things in /lib
    local supported_c_targets=( ${MULTIBUILD_C_TARGETS} )
    if [[ ${#supported_c_targets[@]} -gt 1 ]]; then
        dosym ../lib32/ld-linux.so.2 /lib64/ld-linux.so.2
    fi

    # link every non default locale dir to the default one which is created below
    local final_libdir=${LIBDIR}
    for multibuild_c_target in ${MULTIBUILD_C_TARGETS} ; do
        multibuild_switch_build_target C ${multibuild_c_target}

        if [[ "${multibuild_c_target}" != "${MULTIBUILD_C_DEFAULT_TARGET}" ]] ; then
            dosym /usr/{${final_libdir},${LIBDIR}}/locale
        fi
    done

    # localedef fails if /usr/lib/locale does not exist
    keepdir /usr/${LIBDIR}/locale

    # don't install /etc/{ld.so.cache,localtime}
    nonfatal edo rm "${noinst_files[@]}"

    # don't install bundled timezone info
    ever at_least 2.16.0 || edo rm -r "${IMAGE}/usr/share/zoneinfo"

    cd "${WORKBASE}/${PNV}"

    insinto /etc
    doins "${conf_files[@]}"

    # Move librt.a to /lib and link it to /usr/lib.
    edo cp -a "${IMAGE}/usr/${LIBDIR}/librt.a" "${IMAGE}/${LIBDIR}/"
    edo rm "${IMAGE}/usr/${LIBDIR}/librt.a"
    dosym "/${LIBDIR}/librt.a" "/usr/${LIBDIR}/"
    dosym "/${LIBDIR}/librt.so.1" "/${LIBDIR}/librt.so"

    hereenvd 02locale <<EOF
LANG=en_GB.utf8
EOF

    if option systemd; then
        insinto /usr/${LIBDIR}/tmpfiles.d
        doins "${FILES}"/systemd/nscd.conf
        install_systemd_files
    fi
}

pkg_postinst() {
    local locales=( en_US.UTF-8 en_GB.UTF-8 )
    local localedef="${ROOT}usr/bin/localedef"
    local locale=

    # NOTE(?) localedef fails if /usr/${LIBDIR}/locale does not exist
    edo mkdir -p "${ROOT}usr/${LIBDIR}/locale"

    for locale in "${locales[@]}" ; do
        I18NPATH="${ROOT}usr/share/i18n" nonfatal edo \
            "${localedef}" --prefix="${ROOT}" -i ${locale%.*} -f ${locale#*.} ${locale}
    done
}

