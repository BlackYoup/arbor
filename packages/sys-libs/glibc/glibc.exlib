# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008, 2009 Ingmar Vanhassel <ingmar@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases pkg_pretend src_unpack src_prepare src_configure src_compile src_install

myexparam source_uri="mirror://gnu/${PN}/${PNV}.tar.bz2"
myexparam ports_uri="mirror://gnu/${PN}/${PN}-ports-${PV}.tar.bz2"
myexparam libidn_uri="mirror://gnu/${PN}/${PN}-libidn-${PV}.tar.bz2"

require flag-o-matic multilib

SUMMARY="GNU C library"
HOMEPAGE="http://www.gnu.org/software/libc"

exparam -v source_uri source_uri
exparam -v ports_uri ports_uri
exparam -v libidn_uri libidn_uri

DOWNLOADS="${source_uri} ${ports_uri} ${libidn_uri}"

LICENCES="LGPL-2"
SLOT="0"
MYOPTIONS="bootstrap"

DEPENDENCIES="
    build:
        dev-lang/perl:*
        sys-apps/gawk
        sys-apps/sed
        sys-apps/texinfo
        sys-kernel/linux-headers
        bootstrap? ( sys-devel/bootstrap-gcc )
    run:
        sys-libs/timezone-data"

WORK="${WORKBASE}/build"
ECONF_SOURCE="${WORKBASE}/${PNV}"

DEFAULT_SRC_INSTALL_PARAMS=( install_root="${IMAGE}" )

glibc_pkg_pretend() {
    local abi supported_abis=( ${ABIS_C} )

    if option bootstrap && [[ ${#supported_abis[@]} -lt 2 ]]; then
        die "glibc[bootstrap] is for switching to a multilib profile. You have not selected a multilib profile."
    fi

    for abi in ${ABIS_C} ; do
        switch_abi_env C ${abi}

        if ! echo ${CFLAGS} | grep -q -- -march ; then
            ewarn "-march setting not specified for target ABI: ${abi}; defaulting to native"
        fi
    done
}

glibc_src_unpack() {
    default

    if [[ ${PV/_p*} != ${PV} ]] ; then
        mv glibc-${PV/_p*}-2* glibc-${PV}
        mv ${PNV%%_p*}-ports-${PV##*_p} glibc-ports-${PV}
    fi

    if [[ -n ${libidn_uri} ]] ; then
        mv ${PN}-libidn-${PV} "${WORKBASE}"/${PNV}/libidn || die "Moving glibc-libidn-${PV} failed"
    fi

    if [[ -n ${ports_uri} ]] ; then
        mv ${PN}-ports-${PV} "${WORKBASE}"/${PNV}/ports || die "Moving glibc-ports-${PV} failed"
    fi

    mkdir "${WORK}" || die "mkdir ${WORK} failed"
}

glibc_src_prepare() {
    if option bootstrap ; then
        sed -i -e 's:-lgcc_eh::g' "${WORKBASE}/${PNV}/Makeconfig" || die "failed to remove gcc_eh linkage"
        export PATH="/usr/bootstrap-gcc/bin:$PATH"
        export GCC="bootstrap-gcc"
    else
        export GCC="gcc"
    fi

    default
}

glibc_src_configure() {
    for ABI in ${ABIS_C} ; do
        switch_abi_env C ${ABI}

        mkdir "${WORK}/${ABI}" || die "mkdir ${ABI} failed"
        cd "${WORK}/${ABI}" || die "entering ${ABI} failed"

        echo "libc_cv_forced_unwind=yes" > config.cache
        echo "libc_cv_c_cleanup=yes" >> config.cache
        echo "libc_cv_slibdir=/${LIBDIR}" >> config.cache

        if ! echo ${CFLAGS} | grep -q -- -march ; then
            append-flags -march=native
        fi
        append-flags -O2
        CC="${GCC} -m${ABI}" \
        "${ECONF_SOURCE}/configure" --prefix=/usr \
                                    --sysconfdir=/etc \
                                    --localstatedir=/var/lib \
                                    --libdir="/usr/${LIBDIR}" \
                                    --mandir=/usr/share/man \
                                    --infodir=/usr/share/info \
                                    --datadir=/usr/share \
                                    --cache-file=config.cache \
                                    --enable-kernel=2.6.22 \
                                    --with-headers=/usr/include \
                                    --with-add-ons --with-crypt \
                                    --without-gd --without-cvs \
                                    ${CTARGET} || die "configure failed"
    done
}

glibc_src_compile() {
    for ABI in ${ABIS_C} ; do
        switch_abi_env C ${ABI}

        cd "${WORK}/${ABI}" || die "entering ${ABI} failed"

        default
    done
}

glibc_src_install() {
    export LANGUAGE=C

    # Note: the default abi must always be staged last.  We do this as the last
    # one to get staged will clobber all collisions.  In particular, this will
    # be all of the executables.  The supporting libraries (libc, nss, etc), are
    # installed into architecutre specific directories.
    for ABI in ${ABIS_C} ; do
        if [[ ${ABI} != ${DEFAULT_ABI_C} ]] ; then
            switch_abi_env C ${ABI}

            cd "${WORK}/${ABI}" || die "entering ${ABI} failed"

            default
        fi
    done

    switch_abi_env C ${DEFAULT_ABI_C}

    cd "${WORK}/${DEFAULT_ABI_C}" || die "entering ${DEFAULT_ABI_C} failed"

    default

    # localedef fails if /usr/lib/locale does not exist
    keepdir "/usr/${LIBDIR}/locale"

    # don't install /etc/{ld.so.cache,localtime}
    for file in "${IMAGE}/etc/ld.so.cache" "${IMAGE}/etc/localtime" ; do
        if [[ -f ${file} ]] ; then
            rm "${file}" || die "couldn't remove ${file##${IMAGE}}"
        fi
    done

    # don't install bundled timezone info
    rm -r "${IMAGE}/usr/share/zoneinfo" || die "couldn't remove bundled timezone info"

    cd "${WORKBASE}/${PNV}"

    insinto /etc
    doins nscd/nscd.conf nss/nsswitch.conf posix/gai.conf
}

