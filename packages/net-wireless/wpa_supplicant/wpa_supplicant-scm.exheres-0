# Copyright 2009 Daniel Mierswa <impulze@impulze.org>
# Distributed under the terms of the GNU General Public License v2


SCM_REPOSITORY="git://w1.fi/srv/git/hostap.git"

require common-metadata qmake4 [ no_qt_dependency=true ] multilib scm-git

DOWNLOADS=""
PLATFORMS="~amd64 ~x86"

#TODO:
# docbook2{pdf,man,html} in doc/docbook
# doxygen in doc
# pcsc support testing needed, once available

MYOPTIONS="
dbus debug gnutls nl80211 pcap pcsc qt4 readline ssl

dbus        [[ description = [ Enable the DBus control interface ] ]]
debug       [[ description = [ Support printing out debug message to stdout and a file ] ]]
nl80211     [[ description = [ Support the new 802.11 netlink interface ] ]]
pcap        [[ description = [ Use libdnet and libpcap for layer2 processing ] ]]
pcsc        [[ description = [ Include GSM SIM/USIM interface for GSM/UMTS authentication algorithm (for EAP-SIM/EAP-AKA) ] ]]
qt4         [[ description = [ Build the Qt4 based wpa_gui program ] ]]
readline    [[ description = [ Use readline for line processing in wpa_cli ] ]]

( gnutls ssl ) [[ number-selected = at-most-one ]]
"
RESTRICT="test"

DEPENDENCIES="
    build:
        dbus? ( dev-util/pkg-config )
    build+run:
        dbus? ( sys-apps/dbus )
        gnutls? ( dev-libs/gnutls )
        nl80211? ( net-libs/libnl )
        pcap? (
            dev-libs/libdnet
            dev-libs/libpcap
        )
        pcsc? ( sys-apps/pcsc-lite )
        readline? (
            sys-libs/ncurses
            sys-libs/readline
        )
        qt4? ( x11-libs/qt:4 )
        ssl? ( dev-libs/openssl )
        !gnutls? ( !ssl? ( dev-libs/libtommath ) )
"

WORK="${WORKBASE}/${PNV}/${PN}"

config() {
    local str="CONFIG_${1}"
    [[ $# -eq 2 ]] && str="${str}=${2}" || str="${str}=y"

    echo "${str}" >> .config || die "adding ${1} t configuration failed"
}

config_driver() {
    config "DRIVER_${1}"
}

config_eap() {
    config "EAP_${1}"
}

src_prepare() {
    default

    sed -i -e 's:/usr/local/sbin/:/usr/bin/:g' Makefile

    config_driver ATMEL
    config_driver HOSTAP
    config_driver IPW
    config_driver NDISWRAPPER
    config_driver PRISM54
    config_driver RALINK
    config_driver ROBOSWITCH
    config_driver WEXT
    config_driver WIRED
    #config_driver OSX
    #config_driver PS3
    #config_driver IPHONE
    #config_driver NDIS
    #config_driver HERMES
    #config_driver BROADCOM
    #config_driver BSD

    config AUTHENTICATOR
    config CLIENT_MLME
    config CTRL_IFACE unix
    config IEEE80211R
    config IPV6
    config PEERKEY
    config PKCS12
    config RADIUS_CLIENT
    config SIM_SIMULATOR
    config USIM_SIMULATOR
    config WPA_AUTHENTICATOR
    config WPS

    option dbus && config CTRL_IFACE_DBUS
    option debug && config DEBUG_FILE || config NO_STDOUT_DEBUG
    option nl80211 && config DRIVER_NL80211
    option pcap && config L2_PACKET pcap || config L2_PACKET linux
    option pcsc && config PCSC
    option readline && config READLINE


    ### EAP TLS ETC. ENCRYPTION STUFF
    # EAP_FAST only works with OpenSSL-0.9.9 or private implementation

    if option ssl ; then
        config TLS openssl
        config SMARTCARD
    elif option gnutls ; then
        config TLS gnutls
        config GNUTLS_EXTRA
    else
        config_eap FAST
        config TLS internal
    fi

    # EAP options PEAP, TTLS, TLS and FAST require TLS (which is always enabled)
    config_eap AKA
    config_eap AKA_PRIME
    config_eap GPSK
    config_eap GTC
    config_eap IKEV2
    config_eap LEAP
    config_eap MD5
    config_eap MSCHAPV2
    config_eap OTP
    config_eap PAX
    config_eap PEAP
    config_eap PSK
    config_eap SAKE
    config_eap SERVER
    config_eap SHA256
    config_eap SIM
    config_eap TNC
    config_eap TLS
    config_eap TTLS
    config_eap VENDOR_TEST
    config_eap WCS

    # Enable mitigation against certain attacks against TKIP by delaying Michael
    # MIC error reports by a random amount of time between 0 and 60 seconds
    #config DELAYED_MIC_ERROR_REPORT
}

src_configure() {
    option qt4 && eqmake4 -o wpa_gui-qt4/{Makefile,wpa_gui.pro}
}

DEFAULT_SRC_COMPILE_PARAMS+=( CC="${CC}" BINDIR=/usr/bin LIBDIR=/usr/$(get_libdir) )

src_compile() {
    default
    option qt4 && emake -C wpa_gui-qt4
}

src_test() {
    emake tests
}

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( eap_testing.txt wpa_supplicant.conf )

src_install() {
    default

    ### INTERFACES
    option qt4 && dobin wpa_gui-qt4/wpa_gui

    if option dbus ; then
        local service_file=dbus-wpa_supplicant.service
        local service_name=$(sed -n 's:^Name=::p' ${service_file})
        insinto /etc/dbus-1/system.d/
        newins {dbus-,}wpa_supplicant.conf

        edo sed -i -e 's:/sbin:/usr/sbin:' "${service_file}"

        # Will probably need to be moved to session services if privilege separation is implemented
        insinto /usr/share/dbus-1/system-services/
        newins "${service_file}" "${service_name}.service"
    fi

    ### CONFIGURATION FILES
    exeinto /etc/wpa_supplicant
    doexe "${FILES}/wpa_cli.sh"

    insinto /etc/wpa_supplicant
    hereins wpa_supplicant.conf <<EOF
# This is a network block that connects to any unsecured access point.
# We give it a low priority so any defined blocks are preferred.
network={
    key_mgmt=NONE
    priority=-9999999
}
EOF

    dodir /usr/sbin
    edo mv "${IMAGE}/usr"/{,s}bin/wpa_supplicant

    ### PRIVILEGE SEPARATION
    ### TODO once genesis handling is known
    ###
#    dosbin wpa_priv

    # also require the following
    # user/${PN}
    # group/${PN}
    # group/wpa_priv

    # members of the wpa_priv group can start wpa_supplicant, therefore they
    # need read access on wpa_priv created sockets
#    keepdir /var/run/wpa_priv
#    edo chown :wpa_priv "${IMAGE}"/var/run/wpa_priv
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_priv

    # users starting wpa_supplicant (who are in the wpa_priv group) need to
    # write their pids into a separate directory
#    keepdir /var/run/wpa_supplicant
#    edo chown wpa_supplicant "${IMAGE}"/var/run/wpa_supplicant
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_supplicant

#    local defaultdriver=wext
#    option nl80211 && defaultdriver=nl80211

#    newinitd "${FILES}/wpa_priv.init.d" wpa_priv
#    newconfd "${FILES}/wpa_priv.conf.d" wpa_priv

#    if option nl80211 ; then
#        echo WPA_PRIV_DEFAULT_DRIVER=nl80211 >> "${IMAGE}/etc/conf.d/wpa_priv"
#    else
#        echo WPA_PRIV_DEFAULT_DRIVER=wext >> "${IMAGE}/etc/conf.d/wpa_priv"
#    fi
}

#pkg_postinst() {
#    einfo "In order to use a control interface group with wpa_supplicant"
#    einfo "Please add the system-wide wpa_supplicant user to that group:"
#    einfo " usermod -a -G <control_interface_group> wpa_supplicant"
#}

