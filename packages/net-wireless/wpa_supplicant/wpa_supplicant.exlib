# Copyright 2009 Daniel Mierswa <impulze@impulze.org>
# Copyright 2010 Sterling X. Winter <replica@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require qmake4 [ no_qt_dependency=true ] multilib

SUMMARY="Linux WPA/WPA2/IEEE 802.1X Supplicant"
DESCRIPTION="
wpa_supplicant is a WPA Supplicant for Linux, BSD, Mac OS X, and Windows with
support for WPA and WPA2 (IEEE 802.11i / RSN). It is suitable for both
desktop/laptop computers and embedded systems. Supplicant is the IEEE
802.1X/WPA component that is used in the client stations. It implements key
negotiation with a WPA Authenticator and it controls the roaming and IEEE
802.11 authentication/association of the wlan driver.

wpa_supplicant is designed to be a daemon program that runs in the background
and acts as the backend component controlling the wireless connection.
wpa_supplicant supports separate frontend programs and a text-based frontend
(wpa_cli) and a GUI (wpa_gui) are included with wpa_supplicant.
"
HOMEPAGE="http://hostap.epitest.fi/${PN}/"

if ! ever is_scm ; then
    DOWNLOADS="http://hostap.epitest.fi/releases/${PNV}.tar.gz"
fi

LICENCES="|| ( BSD GPL-2 )"
SLOT="0"

#TODO:
# docbook2{pdf,man,html} in doc/docbook
# doxygen in doc
# pcsc support testing needed, once available
MYOPTIONS="
    dbus     [[ description = [ Enable the DBus control interface                       ] ]]
    debug    [[ description = [ Support printing out debug message to stdout and a file ] ]]
    nl80211  [[ description = [ Support the new 802.11 netlink interface                ] ]]
    pcap     [[ description = [ Use libdnet and libpcap for Layer 2 processing          ] ]]
    pcsc     [[ description = [
        Include GSM SIM/USIM interface for GSM/UMTS authentication algorithm (for EAP-SIM/EAP-AKA)
    ] ]]
    qt4      [[ description = [ Build the Qt4-based wpa_gui program                     ] ]]
    readline [[ description = [ Use readline for line processing in wpa_cli             ] ]]

    (
        gnutls [[ description = [ Use GnuTLS for TLS connections  ] ]]
        ssl    [[ description = [ Use OpenSSL for TLS connections ] ]]
    ) [[ number-selected = at-most-one ]]
"

DEPENDENCIES="
    build:
        dbus? ( dev-util/pkg-config )

    build+run:
        dbus?     ( sys-apps/dbus       )
        gnutls?   ( dev-libs/gnutls     )
        nl80211?  ( net-libs/libnl      )
        pcap?     (
            dev-libs/libdnet
            dev-libs/libpcap
        )
        pcsc?     ( sys-apps/pcsc-lite  )
        qt4?      ( x11-libs/qt:4       )
        readline? (
            sys-libs/ncurses
            sys-libs/readline
        )
        ssl?      ( dev-libs/openssl    )

        !gnutls?  (
            !ssl? ( dev-libs/libtommath )
        )
"

RESTRICT="test"

WORK=${WORKBASE}/${PNV}/${PN}

DEFAULT_SRC_COMPILE_PARAMS+=( CC="${CC}" BINDIR=/usr/bin LIBDIR=/usr/$(get_libdir) )

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( eap_testing.txt wpa_supplicant.conf )

config_enable() {
    for config in ${@} ; do
        local str="CONFIG_${config}"
        [[ ${str} =~ = ]] || str="${str}=y"

        edo echo "${str}" >> .config
    done
}

config_enable_driver() {
    for driver in ${@} ; do
        config_enable "DRIVER_${driver}"
    done
}

config_enable_eap() {
    for eap in ${@} ; do
        config_enable "EAP_${eap}"
    done
}

src_prepare() {
    default
    edo sed -i -e 's:/usr/local/sbin/:/usr/bin/:g' Makefile
}

src_configure() {
    config_enable \
        AUTHENTICATOR \
        CLIENT_MLME \
        CTRL_IFACE=unix \
        IEEE80211R \
        IPV6 \
        PEERKEY \
        PKCS12 \
        RADIUS_CLIENT \
        SIM_SIMULATOR \
        USIM_SIMULATOR \
        WPA_AUTHENTICATOR \
        WPS

    # Enable mitigation against certain attacks against TKIP by delaying Michael
    # MIC error reports by a random amount of time between 0 and 60 seconds
    #config_enable DELAYED_MIC_ERROR_REPORT

    option dbus     && config_enable CTRL_IFACE_DBUS
    option debug    && config_enable DEBUG_FILE ||
                       config_enable NO_STDOUT_DEBUG
    option pcap     && config_enable L2_PACKET=pcap ||
                       config_enable L2_PACKET=linux
    option pcsc     && config_enable PCSC
    option readline && config_enable READLINE

    # EAP_FAST only works with OpenSSL-0.9.9 or private implementation
    if option gnutls ; then
        config_enable TLS=gnutls
        config_enable GNUTLS_EXTRA
    elif option ssl ; then
        config_enable TLS=openssl
        config_enable SMARTCARD
    else
        config_enable TLS=internal
        config_enable_eap FAST
    fi

    config_enable_driver \
        ATMEL \
        HOSTAP \
        IPW \
        NDISWRAPPER \
        PRISM54 \
        RALINK \
        ROBOSWITCH \
        WEXT \
        WIRED
        #BROADCOM \
        #BSD \
        #HERMES \
        #IPHONE \
        #NDIS \
        #OSX \
        #PS3 \

    option nl80211 && config_enable_driver NL80211

    # EAP options PEAP, TTLS, TLS and FAST require TLS (which is always enabled)
    config_enable_eap \
        AKA \
        AKA_PRIME \
        GPSK \
        GTC \
        IKEV2 \
        LEAP \
        MD5 \
        MSCHAPV2 \
        OTP \
        PAX \
        PEAP \
        PSK \
        SAKE \
        SERVER \
        SHA256 \
        SIM \
        TLS \
        TNC \
        TTLS \
        VENDOR_TEST \
        WCS

    option qt4 && eqmake4 -o wpa_gui-qt4/{Makefile,wpa_gui.pro}
}

src_compile() {
    default
    option qt4 && emake -C wpa_gui-qt4
}

src_test() {
    emake tests
}

src_install() {
    default

    ### INTERFACES
    option qt4 && dobin wpa_gui-qt4/wpa_gui

    if option dbus ; then
        local service_file=dbus-wpa_supplicant.service
        local service_name=$(sed -n 's:^Name=::p' ${service_file})
        insinto /etc/dbus-1/system.d/
        newins {dbus-,}wpa_supplicant.conf

        edo sed -i -e 's:/sbin:/usr/sbin:' ${service_file}

        # Will probably need to be moved to session services if privilege separation is implemented
        insinto /usr/share/dbus-1/system-services/
        newins ${service_file} ${service_name}.service
    fi

    ### DOCUMENTATION
    if ! ever is_scm ; then
        doman doc/docbook/*.{5,8}
    fi

    ### CONFIGURATION FILES
    exeinto /etc/wpa_supplicant
    doexe "${FILES}"/wpa_cli.sh

    insinto /etc/wpa_supplicant
    hereins wpa_supplicant.conf <<EOF
# This is a network block that connects to any unsecured access point.
# We give it a low priority so any defined blocks are preferred.
network={
    key_mgmt=NONE
    priority=-9999999
}
EOF

    dodir /usr/sbin
    edo mv "${IMAGE}"/usr/{,s}bin/wpa_supplicant

    ### PRIVILEGE SEPARATION
    ### TODO once genesis handling is known
    ###
#    dosbin wpa_priv

    # also require the following
    # user/${PN}
    # group/${PN}
    # group/wpa_priv

    # members of the wpa_priv group can start wpa_supplicant, therefore they
    # need read access on wpa_priv created sockets
#    keepdir /var/run/wpa_priv
#    edo chown :wpa_priv "${IMAGE}"/var/run/wpa_priv
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_priv

    # users starting wpa_supplicant (who are in the wpa_priv group) need to
    # write their pids into a separate directory
#    keepdir /var/run/wpa_supplicant
#    edo chown wpa_supplicant "${IMAGE}"/var/run/wpa_supplicant
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_supplicant

#    local defaultdriver=wext
#    option nl80211 && defaultdriver=nl80211

#    newinitd "${FILES}"/wpa_priv.init.d wpa_priv
#    newconfd "${FILES}"/wpa_priv.conf.d wpa_priv

#    if option nl80211 ; then
#        edo echo WPA_PRIV_DEFAULT_DRIVER=nl80211 >> "${IMAGE}"/etc/conf.d/wpa_priv
#    else
#        edo echo WPA_PRIV_DEFAULT_DRIVER=wext >> "${IMAGE}"/etc/conf.d/wpa_priv
#    fi
}

#pkg_postinst() {
#    einfo "In order to use a control interface group with wpa_supplicant"
#    einfo "Please add the system-wide wpa_supplicant user to that group:"
#    einfo " usermod -a -G <control_interface_group> wpa_supplicant"
#}

