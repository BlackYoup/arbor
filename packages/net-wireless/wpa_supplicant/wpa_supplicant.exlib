# Copyright 2009 Daniel Mierswa <impulze@impulze.org>
# Distributed under the terms of the GNU General Public License v2

require qmake4 multilib toolchain-funcs

SUMMARY="Linux WPA/WPA2/IEEE 802.1X Supplicant"
DESCRIPTION="
A WPA Supplicant for Linux, BSD, Mac OS X, and Windows with support for WPA and
WPA2 (IEEE 802.11i / RSN). Supplicant is the IEEE 802.1X/WPA component that is
used in the client stations. It implements key negotiation with a WPA
Authenticator and it controls the roaming and IEEE 802.11
authentication/association of the wlan driver.
"
HOMEPAGE_BASE="http://hostap.epitest.fi/"
UPSTREAM_BASE="${HOMEPAGE_BASE}/gitweb/gitweb.cgi?p=hostap.git;a=blob_plain;f=wpa_supplicant/"
HOMEPAGE="${HOMEPAGE_BASE}/${PN}/"
DOWNLOADS="${HOMEPAGE_BASE}/releases/${PNV}.tar.gz"

UPSTREAM_DOCUMENTATION="${UPSTREAM_BASE}/README"
UPSTREAM_CHANGELOG="${UPSTREAM_BASE}/ChangeLog"

LICENCES="|| ( GPL-2 BSD )"

#TODO:
# ssl/gnutls description
# docbook2{pdf,man,html} in doc/docbook
# doxygen in doc
# TLS issues :( see FIXME
# pcsc support testing needed, once available
# dynamic-eap broken without gnutls
#   see http://lists.shmoo.com/pipermail/hostap/2009-February/019226.html
# enable privilege-separation once we have genesis

MYOPTIONS="
dbus debug dynamic-eap gnutls nl80211 pcap pcsc qt4 readline ssl

dbus        [[ description = [ Enable the DBus control interface ] ]]
debug       [[ description = [ Support printing out debug message to stdout and a file ] ]]
dynamic-eap [[
               description = [ Support for loading EAP methods dynamically ]
               requires = [ gnutls ]
            ]]
nl80211     [[
               description = [ Support the new 802.11 netlink interface ]
               url = [ http://wireless.kernel.org/en/developers/Documentation/nl80211 ]
            ]]
pcap        [[ description = [ Use libdnet and libpcap for layer2 processing ] ]]
pcsc        [[ description = [ Include GSM SIM/USIM interface for GSM/UMTS authentication algorithm (for EAP-SIM/EAP-AKA) ] ]]
qt4         [[ description = [ Build the Qt4 based wpa_gui program ] ]]
readline    [[ description = [ Use readline for line processing in wpa_cli ] ]]

( gnutls ssl ) [[ number-selected = at-most-one ]]
"

DEPENDENCIES="
    build+run:
        dbus? ( sys-apps/dbus )
        gnutls? ( dev-libs/gnutls )
        nl80211? ( net-libs/libnl )
        pcap? (
            dev-libs/libdnet
            dev-libs/libpcap
        )
        pcsc? ( sys-apps/pcsc-lite )
        readline? (
            sys-libs/ncurses
            sys-libs/readline
        )
        qt4? ( x11-libs/qt:4 )
        ssl? ( dev-libs/openssl )
        !gnutls? ( !ssl? ( dev-libs/libtommath ) )
    build:
        dbus? ( dev-util/pkg-config )
"
# also group/wpa_priv, once wpa_priv is used

WORK="${WORKBASE}/${PNV}/${PN}"

DEFAULT_SRC_TEST_PARAMS=( tests )

config() {
    local str="CONFIG_${1}"
    [[ $# -eq 2 ]] && str="${str}=${2}" || str="${str}=y"

    echo "${str}" >> .config || die "adding ${1} to configuration failed"
}

config_eap() {
    if option dynamic-eap ; then
        config "EAP_${1}" dyn
    else
        config "EAP_${1}"
    fi
}

src_prepare() {
    cd "${WORKBASE}/${PNV}" || die "cd ${WORKBASE}/${PNV} failed"
    default
    cd "${WORK}" || die "cd ${WORK} failed"

    sed -e 's:/usr/local/sbin/:/usr/bin/:g' \
        -i Makefile || die "sed Makefile failed"

    # OSX, PS3, IPHONE, NDIS, HERMES, MADWIFI, BROADCOM, BSD not working
    # FIXME: add when ready
    for drv in HOSTAP WEXT PRISM54 ATMEL NDISWRAPPER RALINK IPW WIRED \
               ROBOSWITCH ; do
        config "DRIVER_${drv}"
    done

    option nl80211 && config DRIVER_NL80211

    # layer 2 implementation
    if option pcap ; then
        config L2_PACKET pcap
    else
        config L2_PACKET linux
    fi

    if option ssl ; then
        # FIXME: IKEV2 broken without openssl for now
        # see http://lists.shmoo.com/pipermail/hostap/2009-February/019198.html
        config_eap IKEV2
        # FIXME: FAST broken (needs openssl-0.9.9)
        #config_eap FAST
    fi

    # PEAP, TTLS, TLS and FAST require TLS (which is always enabled)
    for eap in MD5 MSCHAPV2 GTC OTP SIM LEAP PSK AKA AKA_PRIME PAX SAKE GPSK \
               WSC VENDOR_TEST TLS PEAP TTLS; do
        config_eap "${eap}"
    done

    for opt in EAP_{GPSK_SHA256,TNC,SERVER} RADIUS_CLIENT \
                {,WPA_}AUTHENTICATOR IEEE80211R PEERKEY {,U}SIM_SIMULATOR \
                PKCS12 IEEE80211W IPV6 CLIENT_MLME ; do
        config "${opt}"
    done

    # FIXME: should work with gnutls (dh_groups.c: un ref to `crypto_mod_exp')
    # see http://lists.shmoo.com/pipermail/hostap/2009-February/019213.html
    option gnutls || config WPS
    #config PRIVSEP

    # TLS implementation
    if option ssl ; then
        config TLS openssl
        config SMARTCARD
    elif option gnutls ; then
        config TLS gnutls
        config GNUTLS_EXTRA
    else
        config TLS internal
    fi

    config CTRL_IFACE unix
    option dbus && config CTRL_IFACE_DBUS
    option dynamic-eap && config DYNAMIC_EAP_METHODS
    option readline && config READLINE
    if option debug ; then
        config DEBUG_FILE
    else
        config NO_STDOUT_DEBUG
    fi
    option pcsc && config PCSC


    # Enable mitigation against certain attacks against TKIP by delaying Michael
    # MIC error reports by a random amount of time between 0 and 60 seconds
    #config DELAYED_MIC_ERROR_REPORT
}

src_configure() {
    if option qt4 ; then
        cd "${WORK}/wpa_gui-qt4" || die "cd wpa_gui-qt4-failed"
        eqmake4 wpa_gui.pro
    fi
}

src_compile() {
    option qt4 && emake -C wpa_gui-qt4

    tc-export CC
    emake -j1
}

src_install() {
    default

    # FIXME: once genesis is there we want wpa_priv
    #exeinto /sbin
    #doexe wpa_priv
    option qt4 && dobin wpa_gui-qt4/wpa_gui

    if option dbus ; then
        local service_file=dbus-wpa_supplicant.service
        local service_name=$(sed -n 's:^Name=::p' ${service_file})
        insinto /etc/dbus-1/system.d/
        newins {dbus-,}wpa_supplicant.conf

        insinto /usr/share/dbus-1/services/
        newins "${service_file}" "${service_name}.service"
    fi

    if option dynamic-eap ; then
        insinto /usr/$(get_libdir)/wpa_supplicant
        ( insopts -m0755 ; doins ../src/eap_peer/*.so )
    fi

    dodoc eap_testing.txt wpa_supplicant.conf
    doman doc/docbook/*.{5,8}

    # baselayout-1 needs that
    insinto /etc/wpa_supplicant
    exeinto /etc/wpa_supplicant
 
    doexe "${FILES}/wpa_cli.sh"
    hereins wpa_supplicant.conf <<EOF
# This is a network block that connects to any unsecured access point.
# We give it a low priority so any defined blocks are preferred.
network={
    key_mgmt=NONE
    priority=-9999999
}
EOF

    keepdir /var/run/wpa_supplicant
    # FIXME: once genesis is there we want wpa_priv
    #keepdir /var/run/wpa_{priv,supplicant}
    #fowners :wpa_priv /var/run/wpa_priv
    #fperms 0755 /var/run/wpa_priv
}
