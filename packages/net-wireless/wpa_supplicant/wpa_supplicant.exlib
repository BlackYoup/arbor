# Copyright 2009 Daniel Mierswa <impulze@impulze.org>
# Copyright 2010 Sterling X. Winter <replica@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

myexparam -b checkout=false
exparam -v CHECKOUT checkout

require qmake4 [ no_qt_dependency=true ] systemd-service

SUMMARY="Linux WPA/WPA2/IEEE 802.1X Supplicant"
DESCRIPTION="
wpa_supplicant is a WPA Supplicant for Linux, BSD, Mac OS X, and Windows with
support for WPA and WPA2 (IEEE 802.11i / RSN). It is suitable for both
desktop/laptop computers and embedded systems. Supplicant is the IEEE
802.1X/WPA component that is used in the client stations. It implements key
negotiation with a WPA Authenticator and it controls the roaming and IEEE
802.11 authentication/association of the wlan driver.

wpa_supplicant is designed to be a daemon program that runs in the background
and acts as the backend component controlling the wireless connection.
wpa_supplicant supports separate frontend programs and a text-based frontend
(wpa_cli) and a GUI (wpa_gui) are included with wpa_supplicant.
"
HOMEPAGE="http://hostap.epitest.fi/${PN}/"

if ! ${CHECKOUT}; then
    DOWNLOADS="http://hostap.epitest.fi/releases/${PNV}.tar.gz"
fi

LICENCES="|| ( BSD-3 GPL-2 )"
SLOT="0"

MYOPTIONS="
    baselayout
    dbus     [[ description = [ Enable the DBus control interface                    ] ]]
    debug    [[ description = [ Support printing out debug message to stdout         ] ]]
    eap-fast [[
        description = [
            Enable EAP-FAST using either OpenSSL >=1.0.0 (requires 'ssl' option) or internal
            implementation
        ]
        requires = -gnutls
    ]]
    nl80211  [[ description = [ Support the new 802.11 netlink interface             ] ]]
    pcap     [[ description = [
        Use libdnet/libpcap for Layer 2 processing instead of Linux packet sockets
    ] ]]
    pcsc     [[ description = [
        Include GSM SIM/USIM interface for GSM/UMTS authentication algorithm (for EAP-SIM/EAP-AKA)
    ] ]]
    qt4      [[ description = [ Build the Qt4-based wpa_gui program                  ] ]]
    readline [[ description = [ Use readline for line editing and history in wpa_cli ] ]]
    systemd  [[ requires = dbus ]]

    (
        gnutls [[ description = [
            Use GnuTLS for TLS connections instead of internal implementation
        ] ]]
        openssl [[ description = [
            Use OpenSSL for TLS connections instead of internal implementation
        ] ]]
    ) [[ number-selected = at-most-one ]]
"

DEPENDENCIES="
    build:
        dbus? ( dev-util/pkg-config )

    build+run:
        dbus?     ( sys-apps/dbus )
        eap-fast? (
            openssl? ( dev-libs/openssl[>=0.9.9] )
        )
        gnutls?  ( dev-libs/gnutls[<3.0.0] )
        nl80211? ( net-libs/libnl:1 )
        pcap?    (
            dev-libs/libdnet
            dev-libs/libpcap
        )
        pcsc?     ( sys-apps/pcsc-lite )
        qt4?      ( x11-libs/qt:4      )
        readline? (
            sys-libs/ncurses
            sys-libs/readline
        )
        openssl? ( dev-libs/openssl )

        !gnutls? (
            !openssl? ( dev-libs/libtommath )
        )
"

if ${CHECKOUT}; then
DEPENDENCIES+="
    build:
        app-text/docbook-sgml-dtd:4.1
        app-text/docbook-utils
"
fi

# FIXME: Tests don't seem to get along with external crypto -- needs further
# investigation. Be sure to uncomment *all* test-related code below when this
# is resolved.
RESTRICT="test"

WORK=${WORKBASE}/${PNV}/${PN}

[[ ${PV} == "0.7.3" ]] && DEFAULT_SRC_PREPARE_PATCHES=( -p2 "${FILES}"/${PNV}-new-dbus.patch )

DEFAULT_SRC_COMPILE_PARAMS+=( CC="${CC}" BINDIR=/usr/bin LIBDIR=/usr/${LIBDIR} V=1 )

DEFAULT_SRC_INSTALL_EXTRA_DOCS=( eap_testing.txt wpa_supplicant.conf )

# Enable CONFIG_* options
config_enable() {
    for config in ${@} ; do
        local str="CONFIG_${config}"
        [[ ${str} =~ = ]] || str="${str}=y"

        edo echo "${str}" >> .config
    done
}

# Enable CONFIG_DRIVER_* options
config_enable_driver() {
    for driver in ${@} ; do
        config_enable "DRIVER_${driver}"
    done
}

# Enable CONFIG_EAP_* options
config_enable_eap() {
    for eap in ${@} ; do
        config_enable "EAP_${eap}"
    done
}

src_prepare() {
    default
    edo sed -i -e 's:/usr/local/sbin/:/usr/bin/:g' Makefile

    # FILES is a reserved exheres-0 variable
    ${CHECKOUT} && edo sed -i -e 's:FILES:DOC_FILES:g' doc/docbook/Makefile
}

src_configure() {
    config_enable \
        BACKEND=file \
        CTRL_IFACE=unix \
        ELOOP=eloop \
        IEEE80211R \
        IEEE8021X_EAPOL \
        MAIN=main \
        OS=unix \
        PEERKEY \
        PKCS12 \
        WPS

    option dbus     && config_enable CTRL_IFACE_DBUS
    option dbus     && config_enable CTRL_IFACE_DBUS_NEW
    option dbus     && config_enable CTRL_IFACE_DBUS_INTRO
    option debug    && config_enable DEBUG_FILE ||
                       config_enable NO_STDOUT_DEBUG
    option pcap     && config_enable L2_PACKET=pcap ||
                       config_enable L2_PACKET=linux
    option readline && config_enable READLINE

    # EAP_AKA, EAP_AKA_PRIME, and EAP_SIM require PCSC. USIM_SIMULATOR is used
    # by EAP_AKA.
    if option pcsc ; then
        config_enable \
            PCSC \
            USIM_SIMULATOR

        config_enable_eap \
            AKA \
            AKA_PRIME \
            SIM
    fi

#    Enable tracing code for developer debugging
#    This tracks use of memory allocations and other registrations and reports
#    incorrect use with a backtrace of call (or allocation) location.
#    config_enable WPA_TRACE

#    Use libbfd to get more details for developer debugging
#    This enables use of libbfd to get more detailed symbols for the backtraces
#    generated by WPA_TRACE
#    config_enable WPA_TRACE_BFD

#    if option build_options:recommended_tests ; then
#        config_enable \
#            CLIENT_MLME \
#            EAPOL_TEST
#
#        config_enable_driver TEST
#    fi

    # EAP_FAST requires EAP_TLS (which is always enabled), and only works with
    # OpenSSL-0.9.9 or internal TLS implementation
    if option gnutls ; then
        config_enable \
            TLS=gnutls \
            GNUTLS_EXTRA
    elif option openssl ; then
        config_enable \
            TLS=openssl \
            SMARTCARD
        option eap-fast && config_enable_eap FAST
    else
        config_enable TLS=internal
        option eap-fast && config_enable_eap FAST
    fi

    config_enable_driver \
        ATMEL \
        HOSTAP \
        RALINK \
        ROBOSWITCH \
        WEXT \
        WIRED
        #HERMES # Requires additional files not included in the distribution.
                # http://www.agere.com/support/drivers/
                # See wpa_supplicant/README

    option nl80211 && config_enable_driver NL80211 && \
        has_version --root "net-libs/libnl:1[>=2]" && config_enable LIBNL20

    # EAP_PEAP, EAP_TLS, and EAP_TTLS require TLS (which is always enabled)
    config_enable_eap \
        GPSK \
        GPSK_SHA256 \
        GTC \
        IKEV2 \
        LEAP \
        MD5 \
        MSCHAPV2 \
        OTP \
        PAX \
        PEAP \
        PSK \
        SAKE \
        TLS \
        TTLS

    # Enabling this is a PITA, especially for the user. For details see the
    # file 'wpa_supplicant/defconfig' in the source.
    #config_enable DYNAMIC_EAP_METHODS

    # Enable privilege separation (see README)
    #config_enable PRIVSEP

    # Enable mitigation against certain attacks against TKIP by delaying
    # Michael MIC error reports by a random amount of time between 0 and 60
    # seconds.
    #config_enable DELAYED_MIC_ERROR_REPORT

    # Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
    # 35-50 kB in code size.
    #config_enable NO_WPA

    # Remove WPA2 support. This allows WPA to be used, but removes WPA2 code to
    # save about 1 kB in code size when building only WPA-Personal (no EAP
    # support) or 6 kB if building for WPA-Enterprise.
    #config_enable NO_WPA2

    # Remove IEEE 802.11i/WPA-Personal ASCII passphrase support This option can
    # be used to reduce code size by removing support for converting ASCII
    # passphrases into PSK. If this functionality is removed, the PSK can only
    # be configured as the 64-octet hexstring (e.g., from wpa_passphrase). This
    # saves about 0.5 kB in code size.
    #config_enable NO_WPA_PASSPHRASE

    # Experimental; unset by default
    #config_enable IEEE80211W
    #config_enable_eap TNC

    # Don't use internal libtommath
    #config_enable INTERNAL_LIBTOMMATH
    #config_enable INTERNAL_LIBTOMMATH_FAST

    # Utterly useless options
    #config_enable NO_CONFIG_BLOBS
    #config_enable NO_CONFIG_WRITE
    #config_enable NO_SCAN_PROCESSING

    # Driver interface for no driver (e.g., WPS ER only)
    #config_enable_driver NONE

    option qt4 && eqmake4 -o wpa_gui-qt4/{Makefile,wpa_gui.pro}
}

src_compile() {
    default
    option qt4 && emake -C wpa_gui-qt4
    ${CHECKOUT} && emake -C doc/docbook man
}

#src_test() {
#    emake tests
#}

src_install() {
    dobin wpa_cli wpa_passphrase
    dosbin wpa_supplicant

    # Symlinks for compatibility with baselayout-1
    if has_version "sys-apps/baselayout[<2.0.0]" ; then
        dodir /bin
        dosym /usr/bin/wpa_cli /bin/wpa_cli
        dodir /sbin
        dosym /usr/sbin/wpa_supplicant /sbin/wpa_supplicant
    fi

    option qt4 && dobin wpa_gui-qt4/wpa_gui

    if option dbus ; then
        pushd dbus

        insinto /etc/dbus-1/system.d/
        newins {dbus-,}wpa_supplicant.conf

        edo sed -e '/^Exec=/s:/sbin:/usr/sbin:' -i 'fi.epitest.hostap.WPASupplicant.service'
        edo sed -e '/^Exec=/s:/sbin:/usr/sbin:' -i 'fi.w1.wpa_supplicant1.service'

        # Will probably need to be moved to session services if privilege separation is implemented
        insinto /usr/share/dbus-1/system-services/
        doins 'fi.epitest.hostap.WPASupplicant.service'
        doins 'fi.w1.wpa_supplicant1.service'

        popd
    fi

    if option systemd ; then
        insinto /etc/conf.d
        hereins wpa_supplicant.conf <<EOF
# If you wish to start the wpa_supplicant daemon to be controlled via the DBus
# interface by another service then IFACE can be commented out or empty.
#
# See man wpa_supplicant(8) for details

CONFIG="-c/etc/wpa_supplicant/wpa_supplicant.conf"
IFACE="-iwlan0"
DRIVER="-Dnl80211,wext"
EOF
    fi
    install_systemd_files

    if option baselayout ; then
        exeinto /etc/wpa_supplicant
        doexe "${FILES}"/wpa_cli.sh
    fi

    insinto /etc/wpa_supplicant
    hereins wpa_supplicant.conf <<EOF
# This is a network block that connects to any unsecured access point.
# We give it a low priority so any defined blocks are preferred.
network={
    key_mgmt=NONE
    priority=-9999999
}
EOF

    emagicdocs
    doman doc/docbook/*.{5,8}

    ### PRIVILEGE SEPARATION
    ### TODO once genesis handling is known
    ###
#    dosbin wpa_priv

    # also require the following
    # user/${PN}
    # group/${PN}
    # group/wpa_priv

    # members of the wpa_priv group can start wpa_supplicant, therefore they
    # need read access on wpa_priv created sockets
#    keepdir /var/run/wpa_priv
#    edo chown :wpa_priv "${IMAGE}"/var/run/wpa_priv
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_priv

    # users starting wpa_supplicant (who are in the wpa_priv group) need to
    # write their pids into a separate directory
#    keepdir /var/run/wpa_supplicant
#    edo chown wpa_supplicant "${IMAGE}"/var/run/wpa_supplicant
#    edo chmod 0750 "${IMAGE}"/var/run/wpa_supplicant

#    local defaultdriver=wext
#    option nl80211 && defaultdriver=nl80211

#    newinitd "${FILES}"/wpa_priv.init.d wpa_priv
#    newconfd "${FILES}"/wpa_priv.conf.d wpa_priv

#    if option nl80211 ; then
#        edo echo WPA_PRIV_DEFAULT_DRIVER=nl80211 >> "${IMAGE}"/etc/conf.d/wpa_priv
#    else
#        edo echo WPA_PRIV_DEFAULT_DRIVER=wext >> "${IMAGE}"/etc/conf.d/wpa_priv
#    fi
}

#pkg_postinst() {
#    einfo "In order to use a control interface group with wpa_supplicant"
#    einfo "Please add the system-wide wpa_supplicant user to that group:"
#    einfo " usermod -a -G <control_interface_group> wpa_supplicant"
#}

