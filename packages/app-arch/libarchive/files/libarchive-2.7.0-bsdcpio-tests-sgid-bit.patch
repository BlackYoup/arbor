From fc0f30215fb0ca120e3e233b6f0bd8dfa1b0a7d9 Mon Sep 17 00:00:00 2001
From: kientzle <kientzle@2e22974a-a639-11dd-bc7a-dd6b2ed99ab5>
Date: Tue, 21 Apr 2009 16:27:07 +0000
Subject: [PATCH] Issue 26: Fix failing cpio tests on systems where sgid bit propagates
 to subdirectories.

git-svn-id: http://libarchive.googlecode.com/svn/release/2.7@1050 2e22974a-a639-11dd-bc7a-dd6b2ed99ab5
---
 cpio/test/test_format_newc.c |    5 +++--
 cpio/test/test_option_c.c    |    6 ++++--
 2 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/cpio/test/test_format_newc.c b/cpio/test/test_format_newc.c
index 18a6c7b..0533364 100644
--- a/cpio/test/test_format_newc.c
+++ b/cpio/test/test_format_newc.c
@@ -203,10 +203,11 @@ DEFINE_TEST(test_format_newc)
 	assertEqualMem(e + 0, "070701", 6); /* Magic */
 	assert(is_hex(e + 6, 8)); /* ino */
 #if defined(_WIN32) && !defined(__CYGWIN__)
-	/* Group members bits and others bits do not work. */ 
+	/* Group members bits and others bits do not work. */
 	assertEqualInt(0x41c0, from_hex(e + 14, 8) & 0xffc0); /* Mode */
 #else
-	assertEqualInt(0x41fd, from_hex(e + 14, 8)); /* Mode */
+	/* Mode: sgid bit sometimes propagates from parent dirs, ignore it. */
+	assertEqualInt(040775, from_hex(e + 14, 8) & ~02000);
 #endif
 	assertEqualInt(from_hex(e + 22, 8), getuid()); /* uid */
 	assertEqualInt(gid, from_hex(e + 30, 8)); /* gid */
diff --git a/cpio/test/test_option_c.c b/cpio/test/test_option_c.c
index 2f4e3bc..23eabff 100644
--- a/cpio/test/test_option_c.c
+++ b/cpio/test/test_option_c.c
@@ -182,10 +182,12 @@ DEFINE_TEST(test_option_c)
 	assert(is_octal(e + 12, 6)); /* ino */
 	assert(dev != from_octal(e + 12, 6));
 #if defined(_WIN32) && !defined(__CYGWIN__)
-	/* Group members bits and others bits do not work. */ 
+	/* Group members bits and others bits do not work. */
 	assertEqualMem(e + 18, "040777", 6); /* Mode */
 #else
-	assertEqualMem(e + 18, "040775", 6); /* Mode */
+	/* Accept 042775 to accomodate systems where sgid bit propagates. */
+	if (memcmp(e + 18, "042775", 6) != 0)
+		assertEqualMem(e + 18, "040775", 6); /* Mode */
 #endif
 	assertEqualInt(from_octal(e + 24, 6), getuid()); /* uid */
 	/* Gid should be same as first entry. */
-- 
1.6.2.4

