# Copyright 2008-2009 Daniel Mierswa <impulze@impulze.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'cups-1.3.8-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2008 Gentoo Foundation.

require multilib autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.11 1.10 ] ] pam

SUMMARY="Common UNIX Printing System"
HOMEPAGE="http://www.${PN}.org"
DOWNLOADS="ftp://ftp.easysw.com/pub/${PN}/${PV}/${PNV}-source.tar.bz2"
DESCRIPTION="A portable printing layer for UNIXÂ®-based operating systems."

LICENCES="GPL-2"
SLOT="0"
LANGS="da de es eu fi fr it ja ko nl no pl pt pt_BR ru sv zh zh_TW"
MYOPTIONS="dbus debug gnutls libusb pam perl python tcpd tiff threads xinetd

libusb [[ description = [ Use libusb rather than the internal USB implementation ] ]]
tcpd [[ description = [ Use TCP Wrappers to restrict access to cupsd ] ]]
linguas: ${LANGS}"

# TODO:
# options: acl avahi/zeroconf java kerberos ldap php slp
# features: maybe ppds?
# probably better slotting to avoid rebuilding

DEPENDENCIES="
    build:
        dbus? ( dev-util/pkg-config )
        gnutls? ( dev-util/pkg-config )
    build+run:
        dbus? ( sys-apps/dbus )
        gnutls? ( dev-libs/gnutls )
        libusb? ( dev-libs/libusb:0.1 )
        pam? ( sys-libs/pam )
        perl? ( dev-lang/perl )
        python? ( dev-lang/python:* )
        tcpd? ( sys-apps/tcp-wrappers )
        tiff? ( media-libs/tiff )
        app-text/poppler [[ note = [ pdftops ] ]]
        media-libs/jpeg
        media-libs/libpng
        group/lpadmin
    post:
        xinetd? ( sys-apps/xinetd )
        app-text/ghostscript[cups] [[ note = [ pstoraster, pdftoraster ] ]]
"

UPSTREAM_DOCUMENTATION="${HOMEPAGE}/documentation.php"
UPSTREAM_RELEASE_NOTES="${UPSTREAM_DOCUMENTATION}/whatsnew.html"
REMOTE_IDS="freshmeat:cups"

# testsuite has lots of FAILs for now, will check into those next version
RESTRICT="test"

DEFAULT_SRC_PREPARE_PATCHES+=(
    "${FILES}/${PN}-backend-https.patch"
)

DEFAULT_SRC_INSTALL_PARAMS+=(
    BUILDROOT="${IMAGE}"
)

src_prepare() {
    # remove default optimizations and do not strip by default
    edo sed -e 's:OPTIM="-Os -g":OPTIM="":' \
            -e 's:INSTALL_STRIP="-s":INSTALL_STRIP="":' \
            -i config-scripts/cups-compiler.m4

    # do not overwrite libdir if lib64 is found on the system and
    # don't use the library dir as server directory, since that'll
    # break multilib
    edo sed -e 's#libdir=".*"#:#' \
            -e '/CUPS_SERVERBIN="/s:lib/cups:libexec/cups:' \
            -i config-scripts/cups-directories.m4

    # do not gzip manpages by default
    edo sed -i -e '/MAN[0-9]EXT=/s:\.gz::g' config-scripts/cups-manpages.m4

    # disable the xinetd service by default
    option xinetd && edo sed -i -e "s:^{:{\n\tdisable = yes:" init/cups-lpd.in

    AT_M4DIR=config-scripts autotools_src_prepare
}

src_configure() {
    for lang in ${LANGS}; do
        option "linguas:${lang}" && CUPSLANGS="${lang} ${CUPSLANGS}"
    done

    [[ -z "${CUPSLANGS}" ]] && CUPSLANGS=none

    # XXX Enables: acl 'kerberos glssapi' ldap slp
    # XXX Withs: java php
    econf \
        --enable-jpeg \
        --enable-png \
        --enable-raw-printing \
        --enable-static \
        --libdir="/usr/$(get_libdir)" \
        --localstatedir=/var \
        --with-cups-{group,user}=lp \
        --with-docdir="/usr/share/doc/${PNVR}/handbook" \
        --with-languages="${CUPSLANGS}" \
        --with-pdftops=pdftops \
        --with-system-groups=lpadmin \
        $(option_enable dbus) \
        $(option_enable gnutls) \
        $(option_enable pam) \
        $(option_enable gnutls ssl) \
        $(option_enable !gnutls openssl) \
        $(option_enable libusb libusb) \
        $(option_enable tcpd tcp-wrappers) \
        $(option_enable tiff) \
        $(option_enable threads) \
        $(option_with perl) \
        $(option_with python) \
        $(option_with xinetd xinetd /etc/xinetd.d)
}

src_install() {
    default

    keepdir /usr/libexec/cups/driver /usr/share/cups/{model,profiles} \
            /var/cache/cups/rss /var/log/cups /var/run/cups/certs \
            /var/spool/cups/tmp

    keepdir /etc/cups/{interfaces,ppd,ssl}

    edo rm -r "${IMAGE}/etc"/{rc{0,2,3,5},init}.d

    # provide our own pam script
    if option pam ; then
        edo rm -f "${IMAGE}/etc/pam.d/cups"
        pamd_mimic_system cups auth account
    fi

    # add init.d dependencies to the cups init script
    local neededservices=
    option dbus && neededservices+=" dbus"

    [[ -n "${neededservices}" ]] && neededservices="need${neededservices}"

    hereinitd cupsd <<EOF
#!/sbin/runscript

depend() {
    use net
    $neededservices
    before nfs
    after logger
}

start() {
    ebegin "Starting cupsd"
    start-stop-daemon --start --quiet --exec /usr/sbin/cupsd
    eend \$?
}

stop() {
    ebegin "Stopping cupsd"
    start-stop-daemon --stop --quiet --exec /usr/sbin/cupsd
    eend \$?
}
EOF

    echo "ServerName localhost" >> "${IMAGE}"/etc/cups/client.conf
}

src_test() {
    # 1 = medium testsuite
    emake unittests
    edo cd test
    USER=paludisbuild edo ./run-stp-tests.sh 1 2 n
}

RESTRICT_src_test_expensive() {
    # 4 = torture testsuite :P
    emake unittests
    edo cd test
    USER=paludisbuild edo ./run-stp-tests.sh 4 2 n
}

