From 37192774f23903d6a42d7786e89241f99e4b1d9d Mon Sep 17 00:00:00 2001
From: William Orr <will@worrbase.com>
Date: Fri, 18 Nov 2011 01:39:27 -0500
Subject: [PATCH] Fixed race condition in sydbox
Upstream: Submitted, it's on zebrapig but we're waiting for alip to sober up.

- detach from finished children so that
  their parents can reap them instead
  of accidentally reaping them ourselves

- Changed error string
---
 src/syd-loop.c |    7 ++++---
 1 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/syd-loop.c b/src/syd-loop.c
index 51ef125..6f43816 100644
--- a/src/syd-loop.c
+++ b/src/syd-loop.c
@@ -144,10 +144,10 @@ static int event_exit(context_t *ctx, pid_t pid, int *code_ptr)
     }
 
 resume:
-    if (G_UNLIKELY(!pink_trace_resume(pid, 0))) {
+    if (G_UNLIKELY(!pink_trace_detach(pid, 0))) {
         if (G_UNLIKELY(ESRCH != errno)) {
-            g_critical("failed to resume the dying child %i: %s", pid, g_strerror(errno));
-            g_printerr("failed to resume the dying child %i: %s\n", pid, g_strerror(errno));
+            g_critical("failed to detach the dying child %i: %s", pid, g_strerror(errno));
+            g_printerr("failed to detach the dying child %i: %s\n", pid, g_strerror(errno));
             exit(-1);
         }
     }
@@ -282,6 +282,7 @@ int trace_loop(context_t *ctx)
                     return exit_code;
                 break;
             case PINK_EVENT_EXIT:
+                g_debug("child %i is exiting with code: %i");
                 if (0 != event_exit(ctx, pid, &exit_code))
                     return exit_code;
                 break;
-- 
1.7.7.3