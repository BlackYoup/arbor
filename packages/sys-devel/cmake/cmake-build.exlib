# Copyright 2008 Wulf Krueger <philantrop@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2014-2015 Heiko Becker <heirecka@exherbo.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'cmake-2.6.0.ebuild' from Gentoo, which is:
#     Copyright 1999-2008 Gentoo Foundation.

require bash-completion elisp-optional [ source_directory=Auxiliary ]

export_exlib_phases src_prepare src_configure src_compile src_test src_install

SUMMARY="Cross platform Make"
HOMEPAGE="http://www.cmake.org"
DOWNLOADS="${HOMEPAGE}/files/v$(ever range 1-2)/${PNV}.tar.gz"

REMOTE_IDS="freecode:${PN}"

UPSTREAM_CHANGELOG="${HOMEPAGE}/files/v$(ever range 1-2)/CMakeChangeLog-${PV}"

LICENCES="BSD-3"
SLOT="0"
MYOPTIONS="doc qt4
    qt5   [[ description = [ Build against Qt5 instead of Qt4. ] ]]
    vim-syntax

    ( qt4 qt5 )  [[ number-selected = at-most-one ]]"

ever at_least 3.2.1 && MYOPTIONS+="
    bootstrap [[ description = [ Use the internal jsoncpp (it needs cmake to build itself) ] ]]"

DEPENDENCIES="
    build:
        doc? ( dev-python/Sphinx[>=1.2.2][python_abis:2.7] )
    build+run:
        app-arch/bzip2
        app-arch/libarchive
        app-arch/xz
        dev-libs/expat[>=2.0.1]
        dev-libs/libxml2:2.0[>=2.6.28]
        net-misc/curl[>=7.16.4][ssl(+)]
        qt4? ( x11-libs/qt:4 )
        qt5? ( x11-libs/qtbase:5 )
"

if ever at_least 3.2.1 ; then
    DEPENDENCIES+="
        build+run:
            app-arch/libarchive[>=3.0.0]
            sys-libs/ncurses
           !bootstrap? ( dev-libs/jsoncpp[>=0.6.0] )
    "
else
    DEPENDENCIES+="
        build+run:
            app-arch/libarchive
    "
fi

BASH_COMPLETIONS=(
    Auxiliary/bash-completion/cmake
    'Auxiliary/bash-completion/cpack cpack'
    'Auxiliary/bash-completion/ctest ctest'
)

VIMFILE="${PN}.vim"

DEFAULT_SRC_PREPARE_PATCHES+=(
    "${FILES}"/remove-test-failure-submits-via-network2.patch
)
DEFAULT_SRC_TEST_PARAMS=( ARGS=--verbose )

cmake-build_src_prepare() {
    default

    if option qt4; then
        edo sed -i -e '/Icon/ s/\.png$//' Source/QtDialog/CMake.desktop
    fi
    # Don't install bash-completions, use bash-completion.exlib
    edo sed -e '/^install(FILES cmake cpack/d' \
            -i Auxiliary/bash-completion/CMakeLists.txt

    # Does only work with python2, errors out because of "except UnicodeError, error"
    edo sed -e "s/COMMAND \${SPHINX_EXECUTABLE}/COMMAND python2 \${SPHINX_EXECUTABLE\}/" \
            -i Utilities/Sphinx/CMakeLists.txt
}

cmake-build_src_configure() {
    edo ./bootstrap \
        --parallel=${EXJOBS:-1} \
        --$(option qt5 || option qt4 || echo "no-")qt-gui \
        --system-bzip2 \
        --system-curl \
        --system-expat \
        --system-libarchive \
        --system-zlib \
        --prefix=/usr \
        --docdir=/share/doc/${PNVR} \
        --datadir=/share/${PN} \
        --mandir=/share/man \
        --verbose \
        $(option doc && echo "--sphinx-man") \
        $(ever at_least 3.2.1 && option bootstrap --no-system-jsoncpp --system-jsoncpp) \
        -- \
        $(option qt4 && echo " -DCMAKE_DISABLE_FIND_PACKAGE_Qt5Core:BOOL=TRUE")
}

cmake-build_src_compile() {
    default
    elisp-optional_src_compile
}

cmake-build_src_test() {
    edo bin/ctest -V -E "CTestTestFailedSubmit|Qt4And5AutomocReverse"
}

cmake-build_src_install() {
    default

    bash-completion_src_install
    elisp-optional_src_install

    if option vim-syntax; then
        insinto /usr/share/vim/vimfiles/syntax
        doins "${WORK}"/Auxiliary/cmake-syntax.vim

        insinto /usr/share/vim/vimfiles/indent
        doins "${WORK}"/Auxiliary/cmake-indent.vim

        insinto /usr/share/vim/vimfiles/ftdetect
        doins "${FILES}/${VIMFILE}"
    fi
}

