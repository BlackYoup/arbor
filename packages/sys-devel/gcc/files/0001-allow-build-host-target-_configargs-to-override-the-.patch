From 7f6628791564ee284921bbd4117536c73d11ee7a Mon Sep 17 00:00:00 2001
From: Saleem Abdulrasool <compnerd@compnerd.org>
Date: Sun, 13 Jan 2013 12:25:06 -0800
Subject: [PATCH] allow {build,host,target}_configargs to override the global
 args

This seems like an oversight in the configure script.  All other modifications
to the arguments prepend rather than append.  Doing so allows the user to
override the build/host/target configure options which is not possible if the
arguments are appended as arguments passed later take precedence over arguments
passed earlier.
---
 configure    | 6 +++---
 configure.ac | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/configure b/configure
index 8011d82..6bcf2ed 100755
--- a/configure
+++ b/configure
@@ -7148,7 +7148,7 @@ tbaseargs="$tbaseargs --disable-option-checking"
 # For the build-side libraries, we just need to pretend we're native,
 # and not use the same cache file.  Multilibs are neither needed nor
 # desired.
-build_configargs="$build_configargs --cache-file=../config.cache ${baseargs}"
+build_configargs="--cache-file=../config.cache ${baseargs} $build_configargs"
 
 # For host modules, accept cache file option, or specification as blank.
 case "${cache_file}" in
@@ -7162,9 +7162,9 @@ esac
 
 # Host dirs don't like to share a cache file either, horribly enough.
 # This seems to be due to autoconf 2.5x stupidity.
-host_configargs="$host_configargs --cache-file=./config.cache ${extra_host_args} ${baseargs}"
+host_configargs="--cache-file=./config.cache ${extra_host_args} ${baseargs} $host_configargs"
 
-target_configargs="$target_configargs ${tbaseargs}"
+target_configargs="${tbaseargs} $target_configargs"
 
 # Passing a --with-cross-host argument lets the target libraries know
 # whether they are being built with a cross-compiler or being built
diff --git a/configure.ac b/configure.ac
index f0d86d9..c708144 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2742,7 +2742,7 @@ AC_ARG_VAR([target_configargs],
 # For the build-side libraries, we just need to pretend we're native,
 # and not use the same cache file.  Multilibs are neither needed nor
 # desired.
-build_configargs="$build_configargs --cache-file=../config.cache ${baseargs}"
+build_configargs="--cache-file=../config.cache ${baseargs} $build_configargs"
 
 # For host modules, accept cache file option, or specification as blank.
 case "${cache_file}" in
@@ -2756,9 +2756,9 @@ esac
 
 # Host dirs don't like to share a cache file either, horribly enough.
 # This seems to be due to autoconf 2.5x stupidity.
-host_configargs="$host_configargs --cache-file=./config.cache ${extra_host_args} ${baseargs}"
+host_configargs="--cache-file=./config.cache ${extra_host_args} ${baseargs} $host_configargs"
 
-target_configargs="$target_configargs ${tbaseargs}"
+target_configargs="${tbaseargs} $target_configargs"
 
 # Passing a --with-cross-host argument lets the target libraries know
 # whether they are being built with a cross-compiler or being built
-- 
1.8.1

