# Copyright 2012 Â© Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gnu [ suffix=bz2 subdir=${PNV} ]
require alternatives

SUMMARY="stand alone compiler"
HOMEPAGE="https://gcc.gnu.org/"

LICENCES="GPL-2"
# TODO(compnerd) drop the 5.x -> 5.1 mapping for the SLOT when 5.x is removed.
# TODO(compnerd) drop the old slotting when gcc 4.x is removed
if ever at_least 6.0 ; then
    SLOT="$(ever major)"
elif ever at_least 5.2 ; then
    SLOT=5.1
else
    SLOT="$(ever range 1-2)"
fi

# Update the multiarch patch when adding a target
CROSS_COMPILE_TARGETS="
    aarch64-unknown-linux-gnueabi
    aarch64-unknown-linux-musleabi
    armv7-unknown-linux-gnueabi
    armv7-unknown-linux-musleabi
    armv7-unknown-linux-gnueabihf
    armv7-unknown-linux-musleabihf
    i686-pc-linux-gnu
    i686-pc-linux-musl
    x86_64-pc-linux-gnu
    x86_64-pc-linux-musl
    powerpc64-unknown-linux-gnu
"
MYOPTIONS="
    ( targets: ${CROSS_COMPILE_TARGETS} ) [[ number-selected = at-least-one ]]
    graphite [[ description = [ enable support for Graphite based loop optimizations ] ]]
    threads  [[ description = [ build with threading support; requires target libc ] ]]
"

DEPENDENCIES="
    build+run:
        threads? (
            dev-libs/gmp:=[>=4.2]
            dev-libs/mpc:=[>=0.8.1]
            dev-libs/mpfr:=[>=2.4.0]
            sys-libs/zlib
        )
        !sys-devel/static-gcc [[
            description = [ static-gcc was moved back to gcc. ]
            resolution = uninstall-blocked-after
        ]]
    run:
        sys-devel/binutils[targets:*(-)?]
        !dev-lang/clang[<3.6.1-r5] [[
            description = [ Alternatives conflict ]
            resolution = uninstall-blocked-after
        ]]
    post:
        sys-libs/libstdc++:${SLOT}[~${PV}]
        app-admin/eclectic-gcc[targets:*(-)?]
"
#   build:
#       $(for host in ${CROSS_COMPILE_TARGETS} ; do
#           echo hosts:${host}? ( sys-devel/binutils[targets:${host}] )
#         done)
#   buil+run:
#       sys-libs/glibc[hosts:*(-)?]

if ever at_least 5.1.0 ; then
    DEPENDENCIES+="
        build+run:
            graphite? ( dev-libs/isl:=[>=0.12] )
    "
else
    DEPENDENCIES+="
        build+run:
            graphite? (
                dev-libs/cloog:=[>=0.17&<0.19]
                dev-libs/isl:=[>=0.10&<0.13]
            )
    "
fi

gcc_pkg_setup() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local target_cflags_var=${target//-/_}_CFLAGS

        # NOTE(compnerd) ensure that CFLAGS_FOR_TARGET are specified by the user as otherwise the
        # generated target components will be invalid as they will be compiled with CFLAGS for the
        # host.
        if option targets:${target}; then
            [[ -n ${!target_cflags_var} ]] || die "CFLAGS for ${target} are not set"
        fi
    done
}

gcc_src_prepare() {
    edo sed -i -e '/AR = ar/cAR := \$(AR)' libcpp/Makefile.in
    edo sed -i -e 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
    default
}

gcc_src_configure() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local libpath=/usr/${target}/lib
        local gxx_incdir=/usr/${target}/include/c++/${PV}
        local target_cflags_var=${target//-/_}_CFLAGS
        local target_cppflags_var=${target//-/_}_CPPFLAGS
        local target_cxxflags_var=${target//-/_}_CXXFLAGS
        local target_ldflags_var=${target//-/_}_LDFLAGS
        local tool_prefix=$(exhost --tool-prefix)

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo mkdir -p "${WORKBASE}/build/${target}"
        edo cd "${WORKBASE}/build/${target}"

        edo env                                             \
            AR=${CHOST}-ar                                  \
            RANLIB=${CHOST}-ranlib                          \
            AR_FOR_TARGET=${tool_prefix}ar                  \
            AS_FOR_TARGET=${tool_prefix}as                  \
            CPP_FOR_TARGET=${tool_prefix}cpp                \
            READELF_FOR_TARGET=${tool_prefix}readelf        \
            NM_FOR_TARGET=${tool_prefix}nm                  \
            OBJDUMP_FOR_TARGET=${tool_prefix}objdump        \
            CFLAGS_FOR_TARGET="${!target_cflags_var}"       \
            CPPFLAGS_FOR_TARGET="${!target_cppflags_var}"   \
            CXXFLAGS_FOR_TARGET="${!target_cxxflags_var}"   \
            LDFLAGS_FOR_TARGET="${!target_ldflags_var}"     \
        "${WORKBASE}/${PNV}/configure"         \
                --cache-file=config.cache                   \
                --build=${CHOST}                            \
                --host=${CHOST}                             \
                --target=${target}                          \
                --prefix=/usr/${CHOST}                      \
                --datarootdir=/usr/share                    \
                --localstatedir=/var                        \
                --sysconfdir=/etc                           \
                --disable-dependency-tracking               \
                --enable-fast-install                       \
                --enable-serial-configure                   \
                --disable-bootstrap                         \
                --disable-decimal-float                     \
                --disable-install-libiberty                 \
                --disable-libada                            \
                --disable-libatomic                         \
                --disable-libcilkrts                        \
                --disable-libffi                            \
                --disable-libgfortran                       \
                --disable-libgo                             \
                --disable-libgomp                           \
                --disable-libitm                            \
                --disable-libjava                           \
                $(if ! ever at_least 4.9 ; then
                    echo --disable-libmudflap
                  fi)                                       \
                $(if ever at_least 5.0 ; then
                    echo --disable-libmpx
                  fi)                                       \
                --disable-libobjc                           \
                $(if ever at_least 5.0 ; then
                    echo --disable-liboffloadmic
                  fi)                                       \
                --disable-libquadmath                       \
                --disable-libsanitizer                      \
                --disable-libssp                            \
                --disable-libstdcxx                         \
                --disable-libstdc++-v3                      \
                --disable-libvtv                            \
                --disable-vtable-verify                     \
                --disable-multilib                          \
                --disable-nls                               \
                --disable-shared                            \
                --enable-lto                                \
                --disable-plugin                            \
                $(option_enable threads)                    \
                --enable-languages=c,c++,fortran,objc,obj-c++ \
                --with-sysroot='""'                         \
                --with-gxx-include-dir="${gxx_incdir}"      \
                $(if ever at_least 5.1 ; then
                    option_with graphite isl
                  else
                    option_with graphite cloog
                  fi)                                       \
                $(optionq threads || echo --with-newlib)    \
                $(optionq threads || echo --without-headers)\
                $(if [[ ${target} == ${CHOST} ]] ; then
                    echo --program-transform="s,$,-${SLOT},"
                  else
                    echo --program-transform="s,^,${target}-,;s,$,-${SLOT},"
                  fi)                                       \
                --with-lib-path=${libpath}                  \
                --with-as=/usr/${CHOST}/bin/${target}-as    \
                --with-ld=/usr/${CHOST}/bin/${target}-ld    \
                --with-system-zlib                          \
                $(if [[ ${target} == armv7* ]] ; then
                        # TODO(compnerd) use the variant agnostic architecture by default
                        echo --with-arch=armv7-a
                  fi)                                       \
                $(if [[ ${target} == arm*-*-*-*hf ]] ; then
                    echo --with-float=hard
                  fi)                                       \
                --with-glibc-version=2.11                   \
                --enable-linker-build-id                    \
                --with-multilib-list=
    done
}

gcc_src_compile() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local target_cflags_var=${target//-/_}_CFLAGS
        local target_cppflags_var=${target//-/_}_CPPFLAGS
        local target_cxxflags_var=${target//-/_}_CXXFLAGS
        local target_ldflags_var=${target//-/_}_LDFLAGS

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"

        # NOTE(compnerd) unset CPP which is set by default by ebuild.bash.  We want to auto-detect
        # the C preprocessor so that the cross-compiled configuration is properly detected and can
        # honour the target specific flags.
        unset CPP

        AR_FOR_TARGET=$(exhost --tool-prefix)ar           \
        READELF_FOR_TARGET=$(exhost --tool-prefix)readelf \
        CFLAGS_FOR_TARGET="${!target_cflags_var}"         \
        CPPFLAGS_FOR_TARGET="${!target_cppflags_var}"     \
        CXXFLAGS_FOR_TARGET="${!target_cxxflags_var}"     \
        LDFLAGS_FOR_TARGET="${!target_ldflags_var}"       \
        default
    done
}

gcc_src_install() {
    local target= alternatives=()

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"

        emake -j1 DESTDIR="${IMAGE}" install
        edo rm "${IMAGE}/usr/${CHOST}/bin/${target}-gcc-${PV}"
        if [[ ${target} == ${CHOST} ]] ; then
            # TODO(compnerd) tweak build to automatically name these tools properly
            for tool in cpp-${SLOT} gcov-${SLOT} ; do
                edo mv "${IMAGE}"/usr/${CHOST}/bin/{,${target}-}${tool}
                nonfatal edo mv "${IMAGE}"/usr/share/man/man1/{,${target}-}${tool}.1
            done
            for tool in c++-${SLOT} g++-${SLOT} gcc-${SLOT} gcc-ar-${SLOT} gcc-nm-${SLOT} gcc-ranlib-${SLOT} gfortran-${SLOT} ; do
                edo rm "${IMAGE}/usr/${CHOST}/bin/${tool}"
                nonfatal edo mv "${IMAGE}"/usr/share/man/man1/{,${target}-}${tool}.1
            done
        fi

        for tool in gfortran ; do
            nonfatal edo mv "${IMAGE}"/usr/share/info/${tool}{.info,-${SLOT}.info}
        done

        edo pushd "${IMAGE}"

        local unset_nullglob=
        shopt -q nullglob || unset_nullglob=1
        shopt -s nullglob

        # allow for C pre-preprocessor alternatives to be set correctly
        edo pushd usr/"${CHOST}"/bin
        edo mv ${target}-cpp-${SLOT} ${target}-gcc-cpp-${SLOT}
        nonfatal edo rm ${target}-cpp
        edo popd
        edo pushd usr/share/man/man1
        edo mv ${target}-cpp-${SLOT}.1 ${target}-gcc-cpp-${SLOT}.1
        nonfatal edo rm ${target}-cpp.1
        edo popd

        for tool in usr/"${CHOST}"/bin/${target}-*-${SLOT}; do
            alternatives+=( /"${tool%-${SLOT}}" "${tool##*/}" )
        done

        alternatives+=( "/usr/${CHOST}/bin/${target}-gcc" "${target}-gcc-${SLOT}" )
        alternatives+=( "/usr/${CHOST}/bin/${target}-gfortran" "${target}-gfortran-${SLOT}" )
        alternatives+=( "/usr/${CHOST}/bin/${target}-gcc-cpp" "${target}-gcc-cpp-${SLOT}" )

        for man in usr/share/man/man*/*.*; do
            local ext=${man##*.}
            # some are already slotted due to --program-suffix, some aren't
            [[ ${man} =~ -${SLOT}.${ext}$ ]] && man=${man%-${SLOT}.${ext}}.${ext}
            local name=${man##*/}
            alternatives+=( /${man} ${name%.${ext}}-${SLOT}.${ext} )
        done
        for info in usr/share/info/*.info; do
            # some are already slotted due to --program-suffix, some aren't
            [[ ${info} =~ -${SLOT}.info$ ]] && info=${info%-${SLOT}.info}.info
            local name=${info##*/}
            alternatives+=( /${info} ${name%.info}-${SLOT}.info )
        done
        for locale in usr/share/locale/*/*/*.mo; do
            [[ -e ${locale} ]] || continue
            local name=${locale##*/}
            alternatives+=( /${locale} ${name%.mo}-${SLOT}.mo )
        done

        [[ -n ${unset_nullglob} ]] && shopt -u nullglob

        edo popd
    done

    alternatives_for gcc ${SLOT} ${SLOT} "${alternatives[@]}"

    edo find "${IMAGE}" -depth -type d -empty -delete
}

export_exlib_phases pkg_setup src_prepare src_configure src_compile src_install

