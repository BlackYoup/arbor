# Copyright 2007 Bryan Østergaard <kloeri@exherbo.org>
# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2008-2010 Bo Ørsted Andresen <zlin@exherbo.org>
# Copyright 2009,2011,2012 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gnu [ suffix=bz2 subdir=${PNV} ]
require alternatives versionator

export_exlib_phases src_unpack src_prepare src_configure src_compile src_test_expensive src_install pkg_postinst pkg_prerm pkg_postrm

SUMMARY="GNU Compiler Collection"

LICENCES="GPL-2"
SLOT="$(ever range 1-2)"

MYOPTIONS="
    ada
    doc
    fortran
    propolice
    objc            [[ description = [ build support for the Objective C code language ] ]]
    obj-c++         [[ description = [ build support for the Objective C++ language ] ]]
    objc-runtime    [[ description = [ build the Objective-C runtime (needed for building Objective-C code) ] ]]
    openmp          [[ description = [ build support for OpenMP ] ]]
"

DEPENDENCIES="
    build:
        sys-devel/gettext
        sys-devel/make
        ada? ( || ( sys-devel/gcc[ada] dev-lang/gnat ) )
    test-expensive:
        dev-util/dejagnu
        sys-devel/autogen
        dev-libs/mpc[>=0.8.1]
        dev-libs/mpfr:=[>=2.3]
"

# LTO (Link-Time Optimization)
DEPENDENCIES+="
    build+run:
        sys-devel/binutils[>=2.20.1] [[ note = [ minimal version of binutils for LTO ] ]]
"
# GCC 4.6+ no longer depends on libelf for LTO
if ! ever at_least 4.6 ; then
    DEPENDENCIES+="
        build+run:
            dev-util/elfutils[>=0.143] [[ note = [ Enable link-time optimisation ] ]]
    "
fi

# graphite support
MYOPTIONS+=" graphite [[ description = [ enable support for Graphite based loop optimizations ] ]]"
# upstream says it is a build time dependency, but uninstall breaks at least gcc-4.6, probably also
# gcc[>=4.4]
if ever at_least 4.6.0; then
    DEPENDENCIES+="
        build+run:
            graphite? ( dev-libs/ppl:=[>=0.11] )
    "
fi
if ever at_least 4.7; then
    DEPENDENCIES+="
        build+run:
            dev-libs/gmp:=[>=4.2]
            graphite? ( || ( dev-libs/cloog dev-libs/cloog-ppl[>=0.15.5] ) )
    "
else
    DEPENDENCIES+="
        build+run:
            dev-libs/gmp:=[>=4.1]
            graphite? ( dev-libs/cloog-ppl[>=0.15.5] )
    "
fi

# java support
if [[ ${SLOT} == 4.4 ]]; then
    ECJ_JAR_PV="4.3" # There is no ecj-4.4.jar
elif [[ ${SLOT} == 4.6 ]]; then
    ECJ_JAR_PV="4.5" # There is no ecj-4.6.jar
elif [[ ${SLOT} == 4.7 ]]; then
    ECJ_JAR_PV="4.5" # There is no ecj-4.7.jar
else
    ECJ_JAR_PV=${SLOT}
fi

DOWNLOADS+=" java? ( mirror://sourceware/java/ecj-${ECJ_JAR_PV}.jar )"
MYOPTIONS+=" java"
DEPENDENCIES+="
    build:
        doc? ( app-doc/doxygen[>=1.5.1] )
        java? ( app-arch/unzip
                app-arch/zip )
"

# go support
if ever at_least 4.6.0; then
    MYOPTIONS+=" go [[ description = [ Build support for the Go programming language ] ]]"
fi

MYOPTIONS+="
    targets:
        arm-exherbo-linux-gnueabi
        i686-pc-linux-gnu
        x86_64-pc-linux-gnu
"

REMOTE_IDS="freecode:${PN}"

UPSTREAM_RELEASE_NOTES="${HOMEPAGE}${PN}-${SLOT}/"
UPSTREAM_CHANGELOG="${UPSTREAM_RELEASE_NOTES}changes.html"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}onlinedocs/libstdc++/libstdc++-html-USERS-${SLOT}/ [[ description = [ API documentation ] ]]"

# TODO(compnerd) consider upstreaming the 0001- prefixed patches; they are
# generic build system fixes which should be mostly palatable for upstream as
# they simply fix rarely used parameters' behaviour to match the documentation
DEFAULT_SRC_PREPARE_PATCHES=( "${FILES}/exherbo-multiarch-paths.patch"
                              "${FILES}/0001-config-fix-definition-for-target-flags.patch"
                              "${FILES}/0001-allow-build-host-target-_configargs-to-override-the-.patch"
                              "${FILES}/0001-makefile.in-honour-configure-args-for-subdirs.patch" )

RESTRICT="test" # tests are expensive

gcc_src_unpack() {
    if option java ; then
        unpack --if-compressed ${ARCHIVES//ecj-${ECJ_JAR_PV}.jar}
        edo cp "${FETCHEDDIR}"/ecj-${ECJ_JAR_PV}.jar "${ECONF_SOURCE}"/ecj.jar
    else
        default
    fi
}

gcc_src_prepare() {
    # NOTE(compnerd) this ugly hack brought to you courtesy of gcc upstream; they hardcode the path
    # and make it impossible to change; just hack around it.  The goal is simple: treat the target
    # libraries as non-cross-compile libraries.
    # TODO(compnerd) find a more elegant solution to this (potentially addressing one of the
    # upstream FIXMEs in the process)
    edo sed -e "s,glibcxx_toolexecdir=no,glibcxx_toolexecdir='\${libdir}/gcc/\${host_alias}',"  \
            -e "s,glibcxx_toolexeclibdir=no,glibcxx_toolexeclibdir='\${libdir}',"               \
            -i "${WORK}/libstdc++-v3/configure"                                                 \
    edo sed -e "s,toolexecdir=\S\+,toolexecdir='\$(libdir)/gcc-lib/\$(target_alias)',"          \
            -e "s,toolexeclibdir=\S\+,toolexeclibdir='\$(libdir)',"                             \
            -i "${WORK}/libgcc/configure"                                                       \
            -i "${WORK}/libitm/configure"                                                       \
            -i "${WORK}/libmudflap/configure"

    default
}

gcc_src_configure() {
    local cxxlibraries=( libstdc++-v3 libitm ) library=
    local language= languages=( c++ ) target=
    local cloog_backend=

    # support for optional languages
    for language in ada fortran java objc obj-c++ ; do
        option ${language} && languages+=( ${language} )
    done

    if ever at_least 4.6 ; then
        option go && languages+=( go )
    fi

    # select cloog backend
    cloog_backend=ppl-legacy
    if ever at_least 4.7 && has_version --root dev-libs/cloog ; then
        cloog_backend=isl
    fi

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local libpath=/${target}/lib:/usr/${target}/lib
        local target_cflags_var=${target//-/_}_CFLAGS
        local target_ldflags_var=${target//-/_}_LDFLAGS
        local target_cxxflags_var=${target//-/_}_CXXFLAGS

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo mkdir -p "${WORKBASE}/build/${target}"
        edo cd "${WORKBASE}/build/${target}"

        # NOTE(compnerd) ensure that CFLAGS_FOR_TARGET are specified by the user as otherwise the
        # generated target components will be invalid as they will be compiled with CFLAGS for the
        # host.
        [[ -n ${!target_cflags_var} ]] || die "CFLAGS for ${target} are not set"

        # NOTE(compnerd) ensure that CXXFLAGS_FOR_TARGET is set, otherwise the compilation of target
        # components (e.g. libstdc++) will fail due to improper flags being passed to the compiler.
        # In the case it is not set, assume that they should be the same as CFLAGS.
        [[ -n ${!target_cxxflags_var} ]] || target_cxxflags_var=${target}_CFLAGS

        # TODO(compnerd) enable precompiled headers

        # NOTE(compnerd) nasty workaround for the fact that CPPFLAGS_FOR_TARGET is not being passed
        # to the subconfigure for the target libstdc++ resulting in the CPP check failing for
        # multilib enabled platforms as we me may not have the required headers because libc for the
        # multilib is not present.
        for library in "${cxxlibraries[@]}" ; do
            edo mkdir -p "${WORKBASE}/build/${target}/${target}/${library}"
            cat > "${WORKBASE}/build/${target}/${target}/${library}/config.cache" <<-EOF
ac_cv_prog_CXXCPP="\$CXX ${!target_cxxflags_var} -E"
EOF
        done

        # NOTE(compnerd) we pass gcc_cv_objdump as we are using an out of tree binutils build
        # (provided by binutils), and the default objdump name will not prefix the target as
        # necessary.

        # NOTE(compnerd) the --with-sysroot='""' is a brilliant hack designed to allow gcc to
        # function properly in the multiarch'ed environment.  It configures the compiler to be a
        # sysroot'ed cross-compiler with an empty sysroot prefix, treating the system root as the
        # sysroot.

        # TODO(compnerd) figure out why the program transformation for ${TARGET} = ${CHOST} results
        # in a double prefix

            gcc_cv_objdump=${target}-objdump                                                        \
            CFLAGS_FOR_TARGET="${!target_cflags_var}"                                               \
            LDFLAGS_FOR_TARGET="${!target_ldflags_var}"                                             \
            CXXFLAGS_FOR_TARGET="${!target_cxxflags_var}"                                           \
            target_configargs="--prefix=/usr/${target} --with-slibdir=/usr/${target}/lib"           \
        edo "${WORKBASE}/${PNV/_p/-}/configure"                                                     \
                --build=${CHOST}                                                                    \
                --host=${CHOST}                                                                     \
                --target=${target}                                                                  \
                --prefix=/usr/${CHOST}                                                              \
                --datarootdir=/usr/share                                                            \
                --localstatedir=/var                                                                \
                --sysconfdir=/etc                                                                   \
                --disable-bootstrap                                                                 \
                --disable-dependency-tracking                                                       \
                --disable-multilib                                                                  \
                --disable-libstdcxx-pch                                                             \
                --enable-fast-install                                                               \
                --enable-clocale=gnu                                                                \
                --enable-languages="$(IFS=, ; echo "${languages[*]}")"                              \
                --enable-lto $(! ever at_least 4.6 && echo --with-libelf)                           \
                --enable-nls                                                                        \
                $(option_enable fortran libquadmath)                                                \
                $(option_enable fortran libquadmath-support)                                        \
                $(option_with graphite cloog)                                                       \
                $(option_with graphite ppl)                                                         \
                $(if ever at_least 4.6 && optionq graphite ; then
                    option_enable graphite cloog-backend ${cloog_backend}
                    ever at_least 4.7 && echo '--disable-cloog-version-check'
                  fi)                                                                               \
                $(option_enable openmp libgomp)                                                     \
                $(option_enable objc-runtime libobjc)                                               \
                $(option_enable propolice libssp)                                                   \
                $(if test x"${target}" = x"${CHOST}" ; then
                    echo --program-suffix=-${SLOT}
                  else
                    echo --program-transform="s,^,${target}-,;s,$,-${SLOT},"
                  fi)                                                                               \
                --with-as=/usr/${CHOST}/bin/${target}-as                                            \
                --with-ld=/usr/${CHOST}/bin/${target}-ld                                            \
                --with-system-zlib                                                                  \
                --with-sysroot='""'                                                                 \
                --with-gxx-include-dir=/usr/${target}/include/c++/${PV}                             \
        || die
    done
}

gcc_src_compile() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"
        default
    done
}

gcc_src_test_expensive() {
    if ! ever at_least 4.6.1; then
        # Increase stack size from 8M to 24M to make
        # gcc.c-torture/compile/limits-exprparen.c test pass as per
        # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=31827
        ulimit -s 24000
    fi

    edo cd "${WORKBASE}/build/${CHOST}"
    emake check
}

__gcc_slot_ada() {
    local programs=(
        gnat
        gnatbind
        gnatchop
        gnatclean
        gnatfind
        gnatkr
        gnatlink
        gnatls
        gnatmake
        gnatname
        gnatprep
        gnatxref
    )
    local program=

    option ada || return

    for program in "${programs[@]}" ; do
        edo mv "${IMAGE}"/usr/${CHOST}/bin/${program}{,-${SLOT}}
    done
}

__gcc_slot_java() {
    # TODO(compnerd) determine whether ecj.jar is actually installed into the dataroot location.
    # If not, it *should* be.  Although ecj is the compiler, it is designed to run atop the JVM,
    # and as such, is host agnostic.  There is no reason to have a version per CHOST.
    local unslotted=(
        "${IMAGE}"/usr/${CHOST}/*/security/classpath.security
        "${IMAGE}"/usr/share/java/ecj.jar
    )
    local extension= item= name=

    option java || return

    for item in "${unslotted[@]}" ; do
        name=$(basename "${item}")
        extension=${name#*.}

        edo mv "${item%.${extension}}"{,-${SLOT}}.${extension}
    done
}

__gcc_slot_shared_data() {
    local item= name= page=

    for page in "${IMAGE}"/usr/share/info/*.info ; do
        name=$(basename "${page}" .info)
        edo mv "${IMAGE}"/usr/share/info/${name}{,-${SLOT}}.info
    done

    # NOTE(compnerd) we are currently only moving pages in section 7 as section 1 pages are already
    # slotted due to the binary naming (c.f. --package-suffix).
    # TODO(compnerd) consider generalising this so that in the case that new man pages are added,
    # they will be implicitly slotted.  The logic in __gcc_provide_slot_alternatives is already
    # agnostic to sections!
    for page in "${IMAGE}"/usr/share/man/man7/* ; do
        name=$(basename "${page}" .7)
        edo mv "${IMAGE}"/usr/share/man/man7/${name}{,-${SLOT}}.7
    done

    for item in "${IMAGE}"/usr/share/locale/*/*/{cpplib,gcc}.mo ; do
        name=$(basename "${item}" .mo)
        edo mv "${item%.mo}"{,-${SLOT}}.mo
    done
}

__gcc_slot_runtime() {
    local library=

    # to avoid collisions with links as they will be handled properly in pkg_postinst, remove any
    # symbolic links first
    for library in "${IMAGE}"/usr/${CHOST}/lib/* ; do
        if [[ -L ${library} ]] ; then
            edo rm "${library}"
            # used to sanity check that the link is handled
            removed+=( "${library/${IMAGE}/${ROOT:-/}}" )
        fi
    done

    for library in "${IMAGE}"/usr/${CHOST}/lib/* ; do
        [[ -f ${library} ]] || continue

        library=${library##${IMAGE}}
        local name=$(basename "${library}") # libffi.so.4.0.1   libstdc++.so.6.0.10 libstdc++.la
        local extension=${name#*.}          #        so.4.0.1             so.6.0.10           la

        case "${name}" in
        # always use newest available so version and create so symlinks
        libffi.so*|libgcc_s.so*|libgfortran.so*|libgcj_bc.so*|libgomp.so*|libitm.so*|libobjc.so*|*.so.0.0.0)
            # rename /usr/${CHOST}/lib/libffi.so.4.0.1 => /usr/${CHOST}/lib/libffi-4.3.so.4.0.1
            edo mv "${IMAGE}${library%.${extension}}"{,-${SLOT}}.${extension}

            symlinks+=( "${library%.${extension}}-${SLOT}.${extension}" )
            so_symlinks+=( "${library}" )
        ;;
        libstdc++.so.*-gdb.py)
            # skip
        ;;
        # slotted properly by upstream (i.e. no collisions between slots), create so symlinks
        libgcj-tools.so*|libgcj.so*|libgij.so*|libstdc++.so*)
            [[ ${name} == libstdc++.so.* ]] && libstdcpp="${name}"

            so_symlinks+=( "${library}" )
        ;;
        # always use newest available version
        *.a|*.la|*.spec|*.security|*.properties)
            # rename /usr/${CHOST}/lib/libffi.la => /usr/${CHOST}/lib/libffi-4.3.la
            edo mv "${IMAGE}${library%.${extension}}"{,-${SLOT}}.${extension}

            symlinks+=( "${library%.${extension}}-${SLOT}.${extension}" )
        ;;
        esac
    done
}

__gcc_setup_gdb_extension() {
    local item=

    [[ -d ${IMAGE}/usr/share/gdb/python/auto-load ]] || dodir /usr/share/gdb/python/auto-load

    # GDB extension
    # c.f. http://gcc.gnu.org/ml/gcc/2009-09/msg00085.html
    # NOTE(compnerd) these are formatters which are platform agnostic, so simply grab the
    # version from the host ABI
    for item in "${IMAGE}"/usr/${CHOST}/lib/*-gdb.py ; do
        local name=

        [[ -f ${item} ]] || continue

        name=$(basename "${item}")
        edo mv "${item}" "${IMAGE}/usr/share/gdb/python/auto-load/${name%-gdb.py}"

        nonfatal edo rm "${IMAGE}"/usr/lib*/${name}
    done
}

__gcc_provide_slot_alternatives() {
    local alternatives=( "${PN}" "${SLOT}" "${SLOT}" )
    local program= item= location= name= section=

    # binaries
    for program in "${IMAGE}"/usr/${CHOST}/bin/*-${SLOT} ; do
        name=$(basename "${program}" -${SLOT})
        alternatives+=( "/usr/${CHOST}/bin/${name}" "${name}-${SLOT}" )
    done

    alternatives+=( "/usr/${CHOST}/bin/cc" "${CHOST}-gcc-${SLOT}" )
    alternatives+=( "/usr/${CHOST}/bin/c++" "${CHOST}-g++-${SLOT}" )

    # java runtime
    if option java ; then
        for item in "${IMAGE}"/usr/${CHOST}/*/security/classpath.security ; do
            alternatives+=( "${ROOT:-/}${item##${IMAGE}/}" "classpath-${SLOT}.security" )
        done

        # TODO(compnerd) determine whether ecj.jar and libgcj-tools.jar are actually installed into
        # the dataroot location.
        # If not, they *should* be.  Although ecj is the compiler, it is designed to run atop the JVM,
        # and as such, is host agnostic.  There is no reason to have a version per CHOST.
        # I believe that libgcj-tools contains the classpath support tools, which are also designed
        # to be run atop the JVM, and as such are CHOST agnostic.
        alternatives+=( "/usr/share/java/ecj.jar" "ecj-${SLOT}.jar" )
        alternatives+=( "/usr/share/java/tools.jar" "libgcj-tools-${PV}.jar" )
    fi

    # info pages
    for item in "${IMAGE}"/usr/share/info/*-${SLOT}.info ; do
        name=$(basename "${item}" -${SLOT}.info)
        alternatives+=( "/usr/share/info/${name}.info" "${name}-${SLOT}.info" )
    done

    # man pages
    for item in "${IMAGE}"/usr/share/man/man?/*-${SLOT}.? ; do
        section=${item##*.}
        name=$(basename "${item}" -${SLOT}.${section})
        alternatives+=( "/usr/share/man/man${section}/${name}.${section}" "${name}-${SLOT}.${section}" )
    done

    # locale data
    for item in "${IMAGE}"/usr/share/locale/*/*/{cpplib,gcc}-${SLOT}.mo ; do
        name=$(basename "${item}" -${SLOT}.mo)
        location=$(dirname "${item}")
        alternatives+=( "${ROOT:-/}${location##${IMAGE}/}/${name}.mo" "${name}-${SLOT}.mo" )
    done

    # provide alternatives
    alternatives_for "${alternatives[@]}"
}

gcc_src_install() {
    local target= dir=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"
        emake -j1 DESTDIR="${IMAGE}" install
        edo rm "${IMAGE}/usr/${CHOST}/bin/${target}-gcc-${PV}"
    done
    edo find "${IMAGE}" -depth -type d -empty -delete

    # TODO(compnerd) precompiled headers for libstdcxx

    if option doc ; then
        insinto /usr/share/doc/${PNVR}/html
        edo pushd "${WORKBASE}/build/${CHOST}/${CHOST}/libstdc++-v3/doc"
        emake doc-html-doxygen
        doins -r doxygen/html/*
        edo popd
    fi

    __gcc_slot_ada
    __gcc_slot_java
    __gcc_slot_runtime
    __gcc_slot_shared_data
    __gcc_setup_gdb_extension
    __gcc_provide_slot_alternatives

    # fixup libstdc++.so symlink
    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option targets:${target} ; then
            edo rewrite_so_symlink "${libstdcpp}" "${IMAGE}/usr/${target}/lib" "/usr/${target}/lib"
        fi
    done

    # cleanup empty directories
    for dir in "${IMAGE}"/usr/*/lib/${PN}/*/${MY_PV:-${PV}}/include{-fixed,} ; do
        [[ -d ${dir} ]] && edo find "${dir}" -type d -empty -delete
    done
}

myln() {
    nonfatal edo ln -fs "${1}" "${2}" || { eerror "Creating ${2} symlink failed"; return $?; }
    return 0
}

rewrite_symlink() {
    local x ignore lib ext slot versions=() versions_sorted=() latest_slot
    if [[ ${1} == --ignore ]]; then
        ignore=${2}; shift
    fi
    lib=${1%-${SLOT}.*}
    ext=${1#*-${SLOT}.}
    for x in "${2}"/${lib}-+([[:digit:].]).${ext}; do
        [[ ! -f ${x} || ${x##*/} == ${ignore} ]] && continue
        slot=${x##*/${lib}-}
        versions+=( "${slot%.${ext}}" )
    done
    if [[ ${#versions[@]} -le 0 ]]; then
        eerror "Could not rewrite ${1/-${SLOT}}, no other versions available"
        return 127
    fi
    versions_sorted=( $(version_sort_lowest_first "${versions[@]}") )
    latest_slot=${versions_sorted[${#versions_sorted[@]}-1]}
    myln ${lib}-${latest_slot}.${ext} "${2}"/${lib}.${ext}
}

rewrite_so_symlink() {
    local ret=0 d l ignore ignored lib versions=() versions_sorted=() latest
    if [[ ${1} == --ignore ]]; then
        ignore=${2}; shift
    fi
    lib=${1%%+([[:digit:].])}; shift
    for d in "$@"; do
        for l in "${d}"/${lib}.+([[:digit:].]); do
            [[ ! -f ${l} ]] && continue
            [[ ${l##*/} == ${ignore} ]] && ignored=true && continue
            versions+=( "${l##*/${lib}.}" )
        done
    done
    if [[ ${#versions[@]} -le 0 ]]; then
        [[ -n ${ignore} && -n ${ignored} ]] && return 0
        eerror "Could not rewrite ${lib}, no other versions available"
        return 127
    fi
    versions_sorted=( $(version_sort_lowest_first "${versions[@]}") )
    latest=${lib}.${versions_sorted[${#versions_sorted[@]}-1]}
    while [[ ${latest} == ${lib}.* ]]; do
        myln ${latest} "${1}"/${latest%.*} || ((++ret))
        latest=${latest%.*}
    done
    return $ret
}

cleanup_dangling_libstdcpp_symlinks() {
    local l
    for l in "${ROOT}"/usr/libstdc++.so*; do
        if [[ -L ${l} && ! -f ${l} ]]; then
            nonfatal edo rm "${l}" || eerror "Failed to clean up ${l}"
        fi
    done
}

handle_symlinks() {
    local x
    # generate symlinks for libraries that were manually slotted in src_install, e.g.: libffi.so.4.0.1 -> libffi-4.3.so.4.0.1
    for x in "${symlinks[@]}"; do
        rewrite_symlink ${1} "${x##*/}" "${ROOT}${x%/*}"
    done

    # generate so symlinks, e.g.: libffi.so -> libffi.so.4 -> libffi.so.4.0 -> libffi.so.4.0.1
    for x in "${so_symlinks[@]}"; do
        rewrite_so_symlink ${1} ${x##*/} "${ROOT}"/${x%/*}
    done

    cleanup_dangling_libstdcpp_symlinks
}

gcc_pkg_postinst() {
    alternatives_pkg_postinst

    handle_symlinks

    # get notification if symlinks were removed during src_install that wasn't handled above in pkg_postinst
    for x in "${removed[@]}"; do
        [[ ! -e ${ROOT}${x} ]] && eerror "/${x} was removed and never recreated"
    done
}

gcc_pkg_prerm() {
    alternatives_pkg_prerm

    local ignore
    [[ -n ${REPLACED_BY_ID} ]] || ignore=--ignore
    handle_symlinks ${ignore}
}

gcc_pkg_postrm() {
    local x
    for x in "${symlinks[@]}"; do
        if [[ -L ${ROOT}${x/-${SLOT}} && ! -e ${ROOT}${x/-${SLOT}} ]]; then
            nonfatal edo rm "${ROOT}${x/-${SLOT}}" || eerror "Failed to clean up dangling symlink"
        fi
    done

    for x in "${so_symlinks[@]%.*}"; do
        while [[ ${x} == */*.so* ]]; do
            if [[ -L ${ROOT}${x} && ! -e ${ROOT}${x} ]]; then
                nonfatal edo rm "${ROOT}${x}" || eerror "Failed to clean up dangling symlink"
            fi
            x=${x%.*}
        done
    done
}

