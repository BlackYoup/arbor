# Copyright 2007 Bryan Østergaard <kloeri@exherbo.org>
# Copyright 2008, 2009 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2008 Bo Ørsted Andresen <zlin@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require multilib versionator alternatives gnu

SUMMARY="GNU Compiler Collection"
DOWNLOADS="mirror://gnu/${PN}/${PNV}/${PNV}.tar.bz2"

LICENCES="GPL-2"
SLOT="$(ever range 1-2)"

MYOPTIONS="ada doc fortran objc obj-c++ nls propolice"

REMOTE_IDS="freshmeat:${PN}"
UPSTREAM_RELEASE_NOTES="${HOMEPAGE}${PN}-${SLOT}/"
UPSTREAM_CHANGELOG="${UPSTREAM_RELEASE_NOTES}changes.html"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}onlinedocs/libstdc++/libstdc++-html-USERS-${SLOT}/ [[ description = [ API documentation ] ]]"

# tests require autogen and dejagnu which haven't been packaged yet
RESTRICT="test"

DEPENDENCIES="
    build:
        sys-devel/make"

if ever at_least 4.3; then
    MYOPTIONS+=" java"
    # ecj jar version will need manual updating. No 4.4 version available (yet?)
    ECJ_JAR_PV="4.3"
    DOWNLOADS+=" java? ( mirror://sourceware/java/ecj-${ECJ_JAR_PV}.jar )"
    DEPENDENCIES+="
        build:
            doc? ( app-doc/doxygen[>=1.5.1] )
            java? ( app-arch/unzip
                    app-arch/zip )
        build+run:
            dev-libs/gmp[>=4.1]
            dev-libs/mpfr[>=2.3]
            ada? ( dev-lang/gnat:${SLOT} )"
else
    DEPENDENCIES+="
        build:
            doc? ( app-doc/doxygen[>=1.3.9] )
        build+run:
            fortran? ( dev-libs/gmp[>=4.1]
                       dev-libs/mpfr[>=2.3] )
            ada? ( dev-lang/gnat:${SLOT} )"
fi

if ever at_least 4.4.0-r1; then
    MYOPTIONS+=" graphite"
    DEPENDENCIES+="
        build:
            graphite? ( dev-libs/cloog-ppl )"
fi

WORK="${WORKBASE}/${PN}_build"
ECONF_SOURCE="${WORKBASE}"/${PNV}

DEFAULT_SRC_COMPILE_PARAMS=( bootstrap )

src_unpack() {
    if ever at_least 4.3 && option java ; then
        unpack --if-compressed ${ARCHIVES//ecj-${ECJ_JAR_PV}.jar}
        cp "${FETCHEDDIR}"/ecj-${ECJ_JAR_PV}.jar "${ECONF_SOURCE}"/ecj.jar \
            || die "copying ecj.jar failed."
    else
        default
    fi
    mkdir "${WORK}" || die "mkdir ${WORK} failed"
}

src_prepare() {
    cd  "${WORKBASE}/${PNV}" || die "Entering ${WORKBASE}/${PNV} failed"
    default
}

src_configure() {
    local i LANGS="c++"
    for i in ada fortran objc obj-c++; do
        option ${i} && LANGS+=",${i}"
    done
    ever at_least 4.3 && option java && LANGS+=",java"

    econf \
        --hates=docdir \
        --disable-multilib \
        --enable-languages="${LANGS}" \
        --enable-libstdcxx-pch=$(! tc-is-cross-compiler && echo yes || echo no) \
        --program-suffix=-${SLOT} \
        $(ever at_least 4.4.0-r1 && option_with graphite cloog) \
        $(ever at_least 4.4.0-r1 && option_with graphite ppl) \
        $(option_enable nls) \
        $(option_enable propolice libssp)
}

src_install() {
    default

    local libdir=$(get_libdir)

    # Precompiled headers, disable for cross-compiling
    insinto /usr/include/c++/${MY_PV:-${PV}}/${CHOST}/bits
    doins -r "${WORK}"/${CHOST}/libstdc++-v3/include/${CHOST}/bits/*.gch

    if option doc; then
        insinto /usr/share/doc/${PNVR}/html
        if ever at_least 4.3; then
            pushd "${WORK}"/${CHOST}/libstdc++-v3/doc || die "Cound not enter libstdc++-v3/doc"
            emake doc-html-doxygen
            doins -r doxygen/html/*
        else
            pushd "${WORK}"/${CHOST}/libstdc++-v3 || die "Cound not enter libstdc++-v3"
            emake doxygen
            doins -r docs/doxygen/html_user/*
        fi
        popd
    fi

    # nuke empty dir if applicable
    if option !fortran && ever at_least 4.2; then
        rmdir "${IMAGE}"/usr/${libdir}/${PN}/${CHOST}/${MY_PV:-${PV}}/finclude || die "rmdir finclude failed"
    fi

    ### slots handling
    pushd "${IMAGE}" || die "Could not enter IMAGE"

    local x bn ext alternatives=( "${PN}" "${SLOT}" "${SLOT}" )

    # binaries - slotted properly by upstream, manage with alternatives
    for x in usr/bin/*-${SLOT}; do
        bn=$(basename "${x}" -${SLOT})
        alternatives+=( /usr/bin/${bn} ${bn}-${SLOT} )
    done
    alternatives+=( /usr/bin/cc gcc )

    # libraries
    for x in usr/${libdir}/*.* usr/${libdir}/debug/usr/${libdir}/*.*; do
        if [[ -L ${x} ]]; then
            # letting the build system generate symlinks in src_install results in collisions, instead we do it in pkg_postinst
            echo rm "${x}"
            rm "${x}" || die "rm /${x} failed"
            removed+=( "/${x}" ) # just a sanity check
        elif [[ -f ${x} ]]; then
            bn=$(basename "${x}") # libffi.so.4.0.1 libstdc++.so.6.0.10 libstdc++.la
            ext=${bn#*.}          #        so.4.0.1           so.6.0.10           la
            case "${bn}" in
                # always use newest available so version and create so symlinks
                libffi.so*|libgcc_s.so*|libgcj_bc.so*|libgomp.so*|libobjc.so*|*.so.0.0.0)
                    # rename usr/lib/{libffi.so.4.0.1 => libffi-4.3.so.4.0.1}
                    # symlinks+=( usr/lib/libffi-4.3.so.4.0.1 )
                    # so_symlinks+=( usr/lib/libffi.so.4.0.1 )
                    echo mv "${x%.${ext}}"{,-${SLOT}}.${ext}
                    mv "${x%.${ext}}"{,-${SLOT}}.${ext} || die "mv /${x} failed"
                    symlinks+=( "${x%.${ext}}-${SLOT}.${ext}" )
                    so_symlinks+=( "${x}" )
                    ;;
                # slotted properly by upstream (i.e. no collisions between slots), create so symlinks
                libgcj-tools.so*|libgcj.so*|libgfortran.so*|libgij.so*|libstdc++.so*)
                    # so_symlinks+=( usr/lib/libstdc++.so.6.0.10 )
                    [[ ${x} == *.py ]] && continue
                    so_symlinks+=( "${x}" )
                    ;;
                # always use newest available version
                *.a|*.la|*.spec|*.security|*.properties)
                    # rename usr/lib/{libstdc++.la => libstdc++-4.3.la}
                    # symlinks+=( usr/lib/libstdc++-4.3.la )
                    echo mv "${x%.${ext}}"{,-${SLOT}}.${ext}
                    mv "${x%.${ext}}"{,-${SLOT}}.${ext} || die "mv /${x} failed"
                    symlinks+=( "${x%.${ext}}-${SLOT}.${ext}" )
                    ;;
            esac
        fi
    done

    # info pages
    for x in usr/share/info/*.info; do
        bn=$(basename "${x}" .info)
        mv usr/share/info/${bn}{,-${SLOT}}.info || die "mv /${x} failed"
        alternatives+=( /usr/share/info/${bn}.info ${bn}-${SLOT}.info )
    done

    # man pages
    for x in usr/share/man/man1/*-${SLOT}.1; do
        bn=$(basename "${x}" -${SLOT}.1)
        alternatives+=( /usr/share/man/man1/${bn}.1 ${bn}-${SLOT}.1 )
    done
    for x in usr/share/man/man7/*; do
        bn=$(basename "${x}" .7)
        mv "${x%.7}"{,-${SLOT}}.7 || die "mv /${x} failed"
        alternatives+=( /usr/share/man/man7/${bn}.7 ${bn}-${SLOT}.7 )
    done

    # locales
    if option nls; then
        for x in usr/share/locale/*/*/{cpplib,gcc}.mo; do
            bn=$(basename "${x}" .mo)
            mv "${x%.mo}"{,-${SLOT}}.mo || die "mv /${x} failed"
            alternatives+=( /${x} ${bn}-${SLOT}.mo )
        done
    fi

    # java
    if ever at_least 4.3 && option java; then

    hereenvd 40gcj <<EOF
JAVAC=/usr/bin/gcj
JAVACMD=/usr/bin/gij
EOF

        for x in usr/${libdir}/security/classpath.security usr/share/java/ecj.jar; do
            bn=$(basename "${x}")
            ext=${bn#*.}
            echo mv "${x%.${ext}}"{,-${SLOT}}.${ext}
            mv "${x%.${ext}}"{,-${SLOT}}.${ext} || die "mv /${x} failed"
            alternatives+=( /${x} ${bn%.${ext}}-${SLOT}.${ext} )
        done
        alternatives+=( /usr/share/java/tools.jar libgcj-tools-${PV}.jar )
        alternatives+=( /usr/bin/java gij-${SLOT} )
    fi

    alternatives_for "${alternatives[@]}"
    popd

    # fix libstdc++.so symlink
    mkdir "${TEMP}"/libstdc++-hack || die "mkdir libstdc++-hack failed"
    cp /usr/${libdir}/libstdc++.so.*([[:digit:].]) "${TEMP}"/libstdc++-hack/ || die "cp from / to libstdc++-hack/ failed"
    cp "${IMAGE}"/usr/${libdir}/libstdc++.so.*([[:digit:].]) "${TEMP}"/libstdc++-hack/ || die "cp from image to libstdc++-hack/ failed"
    fix_libstdcplusplus "${TEMP}"/libstdc++-hack "${IMAGE}"

    if [[ -d "${IMAGE}"/usr/${libdir}/${PN}/${CHOST}/${MY_PV:-${PV}}/include-fixed ]]; then
        find "${IMAGE}"/usr/${libdir}/${PN}/${CHOST}/${MY_PV:-${PV}}/include-fixed -type d -empty -delete || die "Failed to remove empty directories."
    fi
}

pkg_preinst() {
    local pch x y
    for pch in extc++.h.gch stdc++.h.gch stdtr1c++.h.gch; do
        if [[ -f ${ROOT}/usr/include/c++/${PV}/${CHOST}/bits/${pch} ]]; then
            echo rm "${ROOT}"/usr/include/c++/${PV}/${CHOST}/bits/${pch}
            rm "${ROOT}"/usr/include/c++/${PV}/${CHOST}/bits/${pch} \
                || die "Failed to remove ${ROOT}/usr/include/c++/${PV}/${CHOST}/bits/${pch} for a dir-over-file-merge"
        fi
    done

    # ease migration to proper slotting (i.e. prevent paludis from breaking before pkg_postinst, which would fix it)
    if [[ -f ${ROOT}/usr/$(get_libdir)/libgcc_s.so.1 ]]; then
        touch ${ROOT}/usr/$(get_libdir)/libgcc_s.so.1 || die "touch ${ROOT}/usr/$(get_libdir)/libgcc_s.so.1 failed"
    fi
}

generate_symlinks() {
    local newest=${1} source=${2} target=${3}
    if [[ -n ${newest} && -e ${target} ]]; then
        # remove existing file if there is no newer version
        echo rm "${target}"
        rm "${target}" || eerror "rm ${target} failed"
    fi
    if [[ ! -e ${target} ]]; then
        # create symlink if it is missing or dangling
        echo ln -fs "${source}" "${target}"
        ln -fs "${source}" "${target}" || eerror "Creating ${target} symlink failed"
    fi
}

fix_libstdcplusplus() {
    local f versions=() versions_sorted latest
    for f in "${1}"/libstdc++.so.*([[:digit:].]) ; do
        versions+=( "${f##*/libstdc++.so.}" )
    done
    versions_sorted=( $(version_sort "${versions[@]}") )
    latest=libstdc++.so.${versions_sorted[${#versions_sorted[@]}-1]}
    while [[ ${latest} == libstdc++.so.* ]]; do
        generate_symlinks true ${latest} "${2}"usr/${libdir}/${latest%.*}
        latest=${latest%.*}
    done
}

pkg_postinst() {
    alternatives_pkg_postinst

    local x y newest

    # upgrade existing, valid symlinks only if there isn't a newer version installed
    newest=$(best_version ${CATEGORY}/${PN})
    newest=${newest#${CATEGORY}/${PN}-}
    if [[ -z ${newest%%:*} ]] || ever at_least ${newest%%:*}; then
        newest=true
    else
        newest=
    fi

    # generate symlinks for libraries that were manually slotted in src_install, e.g.: libffi.so.4.0.1 -> libffi-4.3.so.4.0.1
    for x in "${symlinks[@]}"; do
        generate_symlinks "${newest}" "${x##*/}" "${ROOT}${x/-${SLOT}}"
    done

    for x in "${so_symlinks[@]}"; do
        y=${x}
        # generate so symlinks, e.g.: libffi.so -> libffi.so.4 -> libffi.so.4.0 -> libffi.so.4.0.1
        while [[ ${y} == */*.so.* ]]; do
            generate_symlinks "${newest}" "${y##*/}" "${ROOT}${y%.*}"
            y=${y%.*}
        done
    done

    # get notification if symlinks were removed during src_install that wasn't handled above in pkg_postinst
    for x in "${removed[@]}"; do
        [[ ! -e ${ROOT}${x} ]] && eerror "/${x} was removed and never recreated"
    done
}

pkg_prerm() {
    alternatives_pkg_prerm

    # make sure libstdc++.so* symlinks are ok
    fix_libstdcplusplus /usr/$(get_libdir) "${ROOT}"
}

pkg_postrm() {
    local x
    for x in "${symlinks[@]}"; do
        if [[ -L ${ROOT}${x/-${SLOT}} && ! -e ${ROOT}${x/-${SLOT}} ]]; then
            echo rm "${ROOT}${x/-${SLOT}}"
            rm "${ROOT}${x/-${SLOT}}" || eerror "Failed to clean up dangling symlink"
        fi
    done

    for x in "${so_symlinks[@]%.*}"; do
        while [[ ${x} == */*.so* ]]; do
            if [[ -L ${ROOT}${x} && ! -e ${ROOT}${x} ]]; then
                echo rm "${ROOT}${x}"
                rm "${ROOT}${x}" || eerror "Failed to clean up dangling symlink"
            fi
            x=${x%.*}
        done
    done
}

