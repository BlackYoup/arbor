Source: Upstream, see http://www.nabble.com/m4-1.4.11-test-strtod.c-fails-with-5-asserts-td16726902.html.
Upstream: Yes
Reason: Work around a test failure caused by a glibc-2.7 bug (fixed upstream too).

diff -Naur m4-1.4.11/m4/strtod.m4 m4-1.4.11.new/m4/strtod.m4
--- m4-1.4.11/m4/strtod.m4	2008-03-30 08:19:58.000000000 +0700
+++ m4-1.4.11.new/m4/strtod.m4	2008-04-17 11:31:16.000000000 +0700
@@ -1,4 +1,4 @@
-# strtod.m4 serial 7
+# strtod.m4 serial 9
 dnl Copyright (C) 2002, 2003, 2006, 2007, 2008 Free Software
 dnl Foundation, Inc.
 dnl This file is free software; the Free Software Foundation
@@ -19,6 +19,14 @@
       [AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 #include <stdlib.h>
 #include <math.h>
+/* Compare two numbers with ==.
+   This is a separate function because IRIX 6.5 "cc -O" miscompiles an
+   'x == x' test.  */
+static int
+numeric_equal (double x, double y)
+{
+  return x == y;
+}
 ]], [[
   {
     /* Older glibc and Cygwin mis-parse "-0x".  */
@@ -36,6 +44,14 @@
     if (value != HUGE_VAL || term != (string + 3))
       return 1;
   }
+  {
+    /* glibc 2.7 and cygwin 1.5.24 misparse "nan()".  */
+    const char *string = "nan()";
+    char *term;
+    double value = strtod (string, &term);
+    if (numeric_equal (value, value) || term != (string + 5))
+      return 1;
+  }
 ]])],
 	[gl_cv_func_strtod_works=yes],
 	[gl_cv_func_strtod_works=no],
